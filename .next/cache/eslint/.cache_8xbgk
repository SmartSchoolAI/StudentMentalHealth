[{"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\auth\\AclGuard.tsx":"1","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\auth\\AuthGuard.tsx":"2","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\auth\\GuestGuard.tsx":"3","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\card-snippet\\index.tsx":"4","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\card-snippet\\types.ts":"5","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\card-statistics\\card-stats-horizontal\\index.tsx":"6","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\card-statistics\\card-stats-vertical\\index.tsx":"7","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\card-statistics\\card-stats-with-image\\index.tsx":"8","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\card-statistics\\types.ts":"9","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\custom-checkbox\\basic\\index.tsx":"10","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\custom-checkbox\\icons\\index.tsx":"11","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\custom-checkbox\\image\\index.tsx":"12","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\custom-checkbox\\types.ts":"13","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\custom-radio\\basic\\index.tsx":"14","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\custom-radio\\icons\\index.tsx":"15","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\custom-radio\\image\\index.tsx":"16","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\custom-radio\\types.ts":"17","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\customizer\\index.tsx":"18","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\icon\\index.tsx":"19","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\mui\\avatar\\index.tsx":"20","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\mui\\avatar\\types.ts":"21","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\mui\\badge\\index.tsx":"22","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\mui\\badge\\types.ts":"23","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\mui\\chip\\index.tsx":"24","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\mui\\chip\\types.ts":"25","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\mui\\timeline-dot\\index.tsx":"26","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\mui\\timeline-dot\\types.ts":"27","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\option-menu\\index.tsx":"28","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\option-menu\\types.ts":"29","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\page-header\\index.tsx":"30","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\page-header\\types.ts":"31","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\plan-details\\types.ts":"32","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\react-apexcharts\\index.tsx":"33","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\react-draft-wysiwyg\\index.tsx":"34","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\repeater\\index.tsx":"35","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\repeater\\types.ts":"36","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\scroll-to-top\\index.tsx":"37","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\sidebar\\index.tsx":"38","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\sidebar\\type.ts":"39","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\spinner\\index.tsx":"40","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\window-wrapper\\index.tsx":"41","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\context\\settingsContext.tsx":"42","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\hooks\\useBgColor.tsx":"43","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\hooks\\useClipboard.tsx":"44","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\hooks\\useSettings.ts":"45","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\layouts\\BlankLayout.tsx":"46","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\layouts\\BlankLayoutWithAppBar.tsx":"47","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\layouts\\components\\blank-layout-with-appBar\\index.tsx":"48","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\layouts\\components\\horizontal\\app-bar-content\\index.tsx":"49","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\layouts\\components\\horizontal\\navigation\\HorizontalNavGroup.tsx":"50","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\layouts\\components\\horizontal\\navigation\\HorizontalNavItems.tsx":"51","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\layouts\\components\\horizontal\\navigation\\HorizontalNavLink.tsx":"52","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\layouts\\components\\horizontal\\navigation\\index.tsx":"53","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\layouts\\components\\shared-components\\footer\\FooterContent.tsx":"54","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\layouts\\components\\shared-components\\footer\\index.tsx":"55","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\layouts\\components\\shared-components\\ModeToggler.tsx":"56","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\layouts\\components\\shared-components\\NotificationDropdown.tsx":"57","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\layouts\\components\\shared-components\\ShortcutsDropdown.tsx":"58","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\layouts\\components\\shared-components\\UserDropdown.tsx":"59","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\layouts\\components\\vertical\\appBar\\index.tsx":"60","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\layouts\\components\\vertical\\navigation\\Drawer.tsx":"61","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\layouts\\components\\vertical\\navigation\\index.tsx":"62","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\layouts\\components\\vertical\\navigation\\VerticalNavGroup.tsx":"63","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\layouts\\components\\vertical\\navigation\\VerticalNavHeader.tsx":"64","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\layouts\\components\\vertical\\navigation\\VerticalNavItems.tsx":"65","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\layouts\\components\\vertical\\navigation\\VerticalNavLink.tsx":"66","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\layouts\\components\\vertical\\navigation\\VerticalNavSectionTitle.tsx":"67","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\layouts\\Layout.tsx":"68","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\layouts\\types.ts":"69","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\layouts\\utils.ts":"70","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\layouts\\VerticalLayout.tsx":"71","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\styles\\libs\\fullcalendar\\index.ts":"72","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\styles\\libs\\keen-slider\\index.ts":"73","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\styles\\libs\\react-apexcharts\\index.ts":"74","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\styles\\libs\\react-cleave\\index.ts":"75","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\styles\\libs\\react-credit-cards\\index.ts":"76","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\styles\\libs\\react-datepicker\\index.ts":"77","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\styles\\libs\\react-draft-wysiwyg\\index.ts":"78","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\styles\\libs\\react-dropzone\\index.ts":"79","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\styles\\libs\\react-hot-toast\\index.ts":"80","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\styles\\libs\\recharts\\index.ts":"81","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\styles\\mui\\stepper.ts":"82","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\breakpoints\\index.ts":"83","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\globalStyles.ts":"84","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\accordion.ts":"85","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\alerts.ts":"86","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\autocomplete.ts":"87","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\avatars.ts":"88","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\backdrop.ts":"89","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\button.ts":"90","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\card.ts":"91","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\chip.ts":"92","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\dataGrid.ts":"93","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\dialog.ts":"94","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\divider.ts":"95","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\index.ts":"96","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\input.ts":"97","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\link.ts":"98","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\list.ts":"99","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\menu.ts":"100","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\pagination.ts":"101","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\paper.ts":"102","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\popover.ts":"103","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\rating.ts":"104","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\select.ts":"105","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\snackbar.ts":"106","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\switches.ts":"107","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\table.ts":"108","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\tabs.ts":"109","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\timeline.ts":"110","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\toggleButton.ts":"111","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\tooltip.ts":"112","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\typography.ts":"113","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\palette\\index.ts":"114","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\shadows\\index.ts":"115","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\spacing\\index.ts":"116","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\ThemeComponent.tsx":"117","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\ThemeOptions.ts":"118","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\types.ts":"119","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\typography\\index.ts":"120","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\utils\\create-emotion-cache.ts":"121","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\utils\\format.ts":"122","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\utils\\get-daterange.ts":"123","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\utils\\get-initials.ts":"124","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\utils\\hex-to-rgba.ts":"125","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\utils\\is-float.ts":"126","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\utils\\rgba-to-hex.ts":"127","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\utils\\types.ts":"128","D:\\MYXINLI\\SchoolMentalHealth\\src\\@fake-db\\types.ts":"129","D:\\MYXINLI\\SchoolMentalHealth\\src\\configs\\acl.ts":"130","D:\\MYXINLI\\SchoolMentalHealth\\src\\configs\\auth.ts":"131","D:\\MYXINLI\\SchoolMentalHealth\\src\\configs\\firebase.ts":"132","D:\\MYXINLI\\SchoolMentalHealth\\src\\configs\\functions.ts":"133","D:\\MYXINLI\\SchoolMentalHealth\\src\\configs\\themeConfig.ts":"134","D:\\MYXINLI\\SchoolMentalHealth\\src\\context\\AuthContext.tsx":"135","D:\\MYXINLI\\SchoolMentalHealth\\src\\context\\FirebaseContext.tsx":"136","D:\\MYXINLI\\SchoolMentalHealth\\src\\context\\types.ts":"137","D:\\MYXINLI\\SchoolMentalHealth\\src\\hooks\\useAuth.tsx":"138","D:\\MYXINLI\\SchoolMentalHealth\\src\\hooks\\useFirebaseAuth.tsx":"139","D:\\MYXINLI\\SchoolMentalHealth\\src\\iconify-bundle\\bundle-icons-react.d.ts":"140","D:\\MYXINLI\\SchoolMentalHealth\\src\\iconify-bundle\\bundle-icons-react.js":"141","D:\\MYXINLI\\SchoolMentalHealth\\src\\iconify-bundle\\bundle-icons-react.ts":"142","D:\\MYXINLI\\SchoolMentalHealth\\src\\iconify-bundle\\icons-bundle-react.js":"143","D:\\MYXINLI\\SchoolMentalHealth\\src\\layouts\\components\\acl\\Can.tsx":"144","D:\\MYXINLI\\SchoolMentalHealth\\src\\layouts\\components\\acl\\CanViewNavGroup.tsx":"145","D:\\MYXINLI\\SchoolMentalHealth\\src\\layouts\\components\\acl\\CanViewNavLink.tsx":"146","D:\\MYXINLI\\SchoolMentalHealth\\src\\layouts\\components\\acl\\CanViewNavSectionTitle.tsx":"147","D:\\MYXINLI\\SchoolMentalHealth\\src\\layouts\\components\\Autocomplete.tsx":"148","D:\\MYXINLI\\SchoolMentalHealth\\src\\layouts\\components\\Direction.tsx":"149","D:\\MYXINLI\\SchoolMentalHealth\\src\\layouts\\components\\horizontal\\AppBarContent.tsx":"150","D:\\MYXINLI\\SchoolMentalHealth\\src\\layouts\\components\\horizontal\\ServerSideNavItems.tsx":"151","D:\\MYXINLI\\SchoolMentalHealth\\src\\layouts\\components\\Translations.tsx":"152","D:\\MYXINLI\\SchoolMentalHealth\\src\\layouts\\components\\UserIcon.tsx":"153","D:\\MYXINLI\\SchoolMentalHealth\\src\\layouts\\components\\vertical\\AppBarContent.tsx":"154","D:\\MYXINLI\\SchoolMentalHealth\\src\\layouts\\components\\vertical\\ServerSideNavItems.tsx":"155","D:\\MYXINLI\\SchoolMentalHealth\\src\\layouts\\UserLayout.tsx":"156","D:\\MYXINLI\\SchoolMentalHealth\\src\\layouts\\UserThemeOptions.ts":"157","D:\\MYXINLI\\SchoolMentalHealth\\src\\navigation\\horizontal\\index.ts":"158","D:\\MYXINLI\\SchoolMentalHealth\\src\\navigation\\vertical\\index.ts":"159","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\401.tsx":"160","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\404.tsx":"161","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\500.tsx":"162","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\acl\\index.tsx":"163","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\ai\\keysetting.tsx":"164","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\1.tsx":"165","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\10.tsx":"166","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\100.tsx":"167","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\101.tsx":"168","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\102.tsx":"169","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\103.tsx":"170","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\104.tsx":"171","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\105.tsx":"172","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\106.tsx":"173","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\107.tsx":"174","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\108.tsx":"175","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\109.tsx":"176","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\11.tsx":"177","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\110.tsx":"178","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\111.tsx":"179","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\112.tsx":"180","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\113.tsx":"181","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\114.tsx":"182","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\115.tsx":"183","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\116.tsx":"184","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\117.tsx":"185","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\118.tsx":"186","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\119.tsx":"187","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\12.tsx":"188","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\120.tsx":"189","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\121.tsx":"190","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\122.tsx":"191","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\123.tsx":"192","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\124.tsx":"193","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\125.tsx":"194","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\126.tsx":"195","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\127.tsx":"196","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\128.tsx":"197","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\129.tsx":"198","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\13.tsx":"199","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\130.tsx":"200","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\131.tsx":"201","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\132.tsx":"202","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\133.tsx":"203","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\134.tsx":"204","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\135.tsx":"205","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\136.tsx":"206","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\137.tsx":"207","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\138.tsx":"208","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\139.tsx":"209","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\14.tsx":"210","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\140.tsx":"211","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\141.tsx":"212","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\142.tsx":"213","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\143.tsx":"214","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\144.tsx":"215","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\145.tsx":"216","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\146.tsx":"217","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\147.tsx":"218","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\148.tsx":"219","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\149.tsx":"220","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\15.tsx":"221","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\150.tsx":"222","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\151.tsx":"223","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\152.tsx":"224","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\153.tsx":"225","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\154.tsx":"226","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\155.tsx":"227","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\156.tsx":"228","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\157.tsx":"229","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\158.tsx":"230","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\159.tsx":"231","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\16.tsx":"232","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\160.tsx":"233","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\161.tsx":"234","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\162.tsx":"235","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\163.tsx":"236","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\164.tsx":"237","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\165.tsx":"238","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\166.tsx":"239","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\167.tsx":"240","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\168.tsx":"241","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\169.tsx":"242","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\17.tsx":"243","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\170.tsx":"244","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\171.tsx":"245","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\172.tsx":"246","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\173.tsx":"247","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\174.tsx":"248","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\175.tsx":"249","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\176.tsx":"250","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\177.tsx":"251","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\178.tsx":"252","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\179.tsx":"253","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\18.tsx":"254","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\180.tsx":"255","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\181.tsx":"256","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\182.tsx":"257","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\183.tsx":"258","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\184.tsx":"259","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\185.tsx":"260","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\186.tsx":"261","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\187.tsx":"262","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\188.tsx":"263","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\189.tsx":"264","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\19.tsx":"265","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\190.tsx":"266","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\191.tsx":"267","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\192.tsx":"268","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\193.tsx":"269","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\194.tsx":"270","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\195.tsx":"271","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\196.tsx":"272","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\197.tsx":"273","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\198.tsx":"274","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\199.tsx":"275","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\2.tsx":"276","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\20.tsx":"277","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\200.tsx":"278","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\201.tsx":"279","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\202.tsx":"280","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\203.tsx":"281","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\204.tsx":"282","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\205.tsx":"283","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\206.tsx":"284","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\207.tsx":"285","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\208.tsx":"286","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\209.tsx":"287","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\21.tsx":"288","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\210.tsx":"289","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\211.tsx":"290","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\212.tsx":"291","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\213.tsx":"292","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\214.tsx":"293","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\215.tsx":"294","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\216.tsx":"295","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\217.tsx":"296","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\218.tsx":"297","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\219.tsx":"298","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\22.tsx":"299","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\220.tsx":"300","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\221.tsx":"301","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\222.tsx":"302","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\223.tsx":"303","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\224.tsx":"304","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\225.tsx":"305","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\226.tsx":"306","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\227.tsx":"307","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\228.tsx":"308","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\229.tsx":"309","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\23.tsx":"310","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\230.tsx":"311","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\231.tsx":"312","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\232.tsx":"313","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\233.tsx":"314","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\234.tsx":"315","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\235.tsx":"316","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\236.tsx":"317","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\237.tsx":"318","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\238.tsx":"319","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\239.tsx":"320","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\24.tsx":"321","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\240.tsx":"322","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\241.tsx":"323","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\242.tsx":"324","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\243.tsx":"325","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\244.tsx":"326","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\245.tsx":"327","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\246.tsx":"328","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\247.tsx":"329","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\248.tsx":"330","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\249.tsx":"331","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\25.tsx":"332","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\250.tsx":"333","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\251.tsx":"334","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\252.tsx":"335","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\253.tsx":"336","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\254.tsx":"337","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\255.tsx":"338","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\256.tsx":"339","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\257.tsx":"340","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\258.tsx":"341","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\259.tsx":"342","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\26.tsx":"343","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\260.tsx":"344","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\261.tsx":"345","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\262.tsx":"346","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\263.tsx":"347","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\264.tsx":"348","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\265.tsx":"349","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\266.tsx":"350","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\267.tsx":"351","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\268.tsx":"352","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\269.tsx":"353","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\27.tsx":"354","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\270.tsx":"355","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\271.tsx":"356","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\272.tsx":"357","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\273.tsx":"358","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\274.tsx":"359","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\275.tsx":"360","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\276.tsx":"361","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\277.tsx":"362","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\278.tsx":"363","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\279.tsx":"364","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\28.tsx":"365","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\280.tsx":"366","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\281.tsx":"367","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\282.tsx":"368","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\283.tsx":"369","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\284.tsx":"370","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\285.tsx":"371","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\286.tsx":"372","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\287.tsx":"373","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\288.tsx":"374","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\289.tsx":"375","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\29.tsx":"376","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\290.tsx":"377","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\291.tsx":"378","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\292.tsx":"379","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\293.tsx":"380","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\294.tsx":"381","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\295.tsx":"382","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\296.tsx":"383","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\297.tsx":"384","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\298.tsx":"385","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\299.tsx":"386","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\3.tsx":"387","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\30.tsx":"388","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\300.tsx":"389","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\301.tsx":"390","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\302.tsx":"391","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\303.tsx":"392","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\304.tsx":"393","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\305.tsx":"394","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\306.tsx":"395","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\307.tsx":"396","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\308.tsx":"397","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\309.tsx":"398","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\31.tsx":"399","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\310.tsx":"400","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\311.tsx":"401","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\312.tsx":"402","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\313.tsx":"403","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\314.tsx":"404","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\315.tsx":"405","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\316.tsx":"406","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\317.tsx":"407","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\318.tsx":"408","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\319.tsx":"409","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\32.tsx":"410","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\320.tsx":"411","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\321.tsx":"412","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\322.tsx":"413","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\323.tsx":"414","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\324.tsx":"415","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\325.tsx":"416","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\326.tsx":"417","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\327.tsx":"418","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\328.tsx":"419","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\329.tsx":"420","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\33.tsx":"421","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\330.tsx":"422","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\331.tsx":"423","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\332.tsx":"424","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\333.tsx":"425","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\334.tsx":"426","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\335.tsx":"427","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\336.tsx":"428","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\337.tsx":"429","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\338.tsx":"430","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\339.tsx":"431","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\34.tsx":"432","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\340.tsx":"433","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\341.tsx":"434","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\342.tsx":"435","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\343.tsx":"436","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\344.tsx":"437","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\345.tsx":"438","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\346.tsx":"439","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\347.tsx":"440","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\348.tsx":"441","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\349.tsx":"442","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\35.tsx":"443","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\350.tsx":"444","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\351.tsx":"445","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\352.tsx":"446","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\353.tsx":"447","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\354.tsx":"448","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\355.tsx":"449","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\356.tsx":"450","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\357.tsx":"451","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\358.tsx":"452","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\359.tsx":"453","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\36.tsx":"454","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\360.tsx":"455","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\361.tsx":"456","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\362.tsx":"457","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\363.tsx":"458","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\364.tsx":"459","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\365.tsx":"460","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\366.tsx":"461","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\367.tsx":"462","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\368.tsx":"463","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\369.tsx":"464","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\37.tsx":"465","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\370.tsx":"466","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\371.tsx":"467","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\372.tsx":"468","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\373.tsx":"469","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\374.tsx":"470","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\375.tsx":"471","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\376.tsx":"472","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\377.tsx":"473","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\378.tsx":"474","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\379.tsx":"475","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\38.tsx":"476","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\380.tsx":"477","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\381.tsx":"478","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\382.tsx":"479","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\383.tsx":"480","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\384.tsx":"481","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\385.tsx":"482","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\386.tsx":"483","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\387.tsx":"484","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\388.tsx":"485","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\389.tsx":"486","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\39.tsx":"487","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\390.tsx":"488","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\391.tsx":"489","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\392.tsx":"490","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\393.tsx":"491","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\394.tsx":"492","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\395.tsx":"493","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\396.tsx":"494","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\397.tsx":"495","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\398.tsx":"496","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\399.tsx":"497","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\4.tsx":"498","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\40.tsx":"499","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\400.tsx":"500","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\41.tsx":"501","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\42.tsx":"502","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\43.tsx":"503","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\44.tsx":"504","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\45.tsx":"505","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\46.tsx":"506","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\47.tsx":"507","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\48.tsx":"508","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\49.tsx":"509","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\5.tsx":"510","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\50.tsx":"511","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\51.tsx":"512","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\52.tsx":"513","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\53.tsx":"514","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\54.tsx":"515","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\55.tsx":"516","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\56.tsx":"517","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\57.tsx":"518","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\58.tsx":"519","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\59.tsx":"520","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\6.tsx":"521","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\60.tsx":"522","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\61.tsx":"523","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\62.tsx":"524","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\63.tsx":"525","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\64.tsx":"526","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\65.tsx":"527","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\66.tsx":"528","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\67.tsx":"529","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\68.tsx":"530","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\69.tsx":"531","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\7.tsx":"532","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\70.tsx":"533","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\71.tsx":"534","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\72.tsx":"535","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\73.tsx":"536","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\74.tsx":"537","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\75.tsx":"538","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\76.tsx":"539","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\77.tsx":"540","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\78.tsx":"541","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\79.tsx":"542","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\8.tsx":"543","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\80.tsx":"544","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\81.tsx":"545","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\82.tsx":"546","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\83.tsx":"547","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\84.tsx":"548","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\85.tsx":"549","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\86.tsx":"550","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\87.tsx":"551","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\88.tsx":"552","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\89.tsx":"553","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\9.tsx":"554","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\90.tsx":"555","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\91.tsx":"556","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\92.tsx":"557","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\93.tsx":"558","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\94.tsx":"559","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\95.tsx":"560","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\96.tsx":"561","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\97.tsx":"562","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\98.tsx":"563","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\99.tsx":"564","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\ceping\\detail\\index.tsx":"565","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\ceping\\detail\\[id].tsx":"566","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\ceping\\index.tsx":"567","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\dashboards\\analytics.tsx":"568","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\dashboards\\analyticsclass.tsx":"569","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\dashboards\\analyticsstudent.tsx":"570","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\dashboards\\StatisticsClassbyClass.tsx":"571","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\dashboards\\StatisticsStudentsbyClass.tsx":"572","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\dashboards\\StatisticsStudentsbyIndividual.tsx":"573","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\dashboards\\xmjs_gongkaike.tsx":"574","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\dashboards\\xmjs_wygl.tsx":"575","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\form\\configsetting.tsx":"576","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\form\\datacode.tsx":"577","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\form\\datacollection.tsx":"578","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\form\\formdict.tsx":"579","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\form\\formfieldshowtype.tsx":"580","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\form\\formname\\dataformfield.tsx":"581","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\form\\formname\\formfield.tsx":"582","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\form\\formname\\formflow.tsx":"583","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\form\\formname.tsx":"584","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\form\\menuone.tsx":"585","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\form\\menutwo.tsx":"586","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\index.tsx":"587","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\login\\index.tsx":"588","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\print\\middleschool\\index.tsx":"589","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\print\\middleschool\\[id].tsx":"590","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\tab\\index.tsx":"591","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\tab\\TabContent.tsx":"592","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\tab\\TabHeader.tsx":"593","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\tab\\[tab].tsx":"594","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\user\\password.tsx":"595","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\_app.tsx":"596","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\_document.tsx":"597","D:\\MYXINLI\\SchoolMentalHealth\\src\\store\\index.ts":"598","D:\\MYXINLI\\SchoolMentalHealth\\src\\store.ts":"599","D:\\MYXINLI\\SchoolMentalHealth\\src\\types\\apps\\calendarTypes.ts":"600","D:\\MYXINLI\\SchoolMentalHealth\\src\\types\\apps\\chatTypes.ts":"601","D:\\MYXINLI\\SchoolMentalHealth\\src\\types\\apps\\emailTypes.ts":"602","D:\\MYXINLI\\SchoolMentalHealth\\src\\types\\apps\\invoiceTypes.ts":"603","D:\\MYXINLI\\SchoolMentalHealth\\src\\types\\apps\\permissionTypes.ts":"604","D:\\MYXINLI\\SchoolMentalHealth\\src\\types\\apps\\userTypes.ts":"605","D:\\MYXINLI\\SchoolMentalHealth\\src\\types\\forms\\AddOrEditTableLanguage.ts":"606","D:\\MYXINLI\\SchoolMentalHealth\\src\\types\\forms\\chinacity.ts":"607","D:\\MYXINLI\\SchoolMentalHealth\\src\\types\\forms\\chinacityshort.ts":"608","D:\\MYXINLI\\SchoolMentalHealth\\src\\types\\forms\\fixedasset.ts":"609","D:\\MYXINLI\\SchoolMentalHealth\\src\\types\\forms\\mdi.ts":"610","D:\\MYXINLI\\SchoolMentalHealth\\src\\types\\forms\\reactDatepickerTypes.ts":"611","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\ai\\KeySetting.tsx":"612","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\ceping\\App.tsx":"613","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\ceping\\AppModel.tsx":"614","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\ceping\\Detail.tsx":"615","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\charts\\apex-charts\\ApexAreaChart.tsx":"616","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\charts\\apex-charts\\ApexBarChart.tsx":"617","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\charts\\apex-charts\\ApexCandlestickChart.tsx":"618","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\charts\\apex-charts\\ApexColumnChart.tsx":"619","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\charts\\apex-charts\\ApexDonutChart.tsx":"620","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\charts\\apex-charts\\ApexHeatmapChart.tsx":"621","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\charts\\apex-charts\\ApexLineChart.tsx":"622","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\charts\\apex-charts\\ApexRadarChart.tsx":"623","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\charts\\apex-charts\\ApexRadialBarChart.tsx":"624","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\charts\\apex-charts\\ApexScatterChart.tsx":"625","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\dashboards\\analytics\\AnalyticsDepositWithdraw.tsx":"626","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\dashboards\\analytics\\AnalyticsPerformance.tsx":"627","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\dashboards\\analytics\\AnalyticsSalesByCountries.tsx":"628","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\dashboards\\analytics\\AnalyticsSessions.tsx":"629","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\dashboards\\analytics\\AnalyticsTable.tsx":"630","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\dashboards\\analytics\\AnalyticsTotalEarning.tsx":"631","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\dashboards\\analytics\\AnalyticsTotalProfit.tsx":"632","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\dashboards\\analytics\\AnalyticsTransactionsCard.tsx":"633","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\dashboards\\analytics\\AnalyticsTransactionsCardMenuIcon.tsx":"634","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\dashboards\\analytics\\AnalyticsTrophy.tsx":"635","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\dashboards\\analytics\\AnalyticsWeeklyOverview.tsx":"636","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\dashboards\\analytics\\ButtonGroupSplit.tsx":"637","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\Enginee\\AddOrEditTable.tsx":"638","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\Enginee\\AddOrEditTableCore.tsx":"639","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\Enginee\\ImagesPreview.tsx":"640","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\Enginee\\index.tsx":"641","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\Enginee\\IndexBottomFlowNode.tsx":"642","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\Enginee\\IndexBottomFlowNodeDot.tsx":"643","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\Enginee\\IndexJumpDialogWindow.tsx":"644","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\Enginee\\IndexTableHeader.tsx":"645","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\Enginee\\PickersCustomInput.tsx":"646","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\Enginee\\SoulAssessmentModel.tsx":"647","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\Enginee\\SoulAssessmentModelCourseInterest.tsx":"648","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\Enginee\\SoulAssessmentModelMiddleSchool.tsx":"649","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\Enginee\\SoulAssessmentModelSCL90.tsx":"650","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\Enginee\\store.ts":"651","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\Enginee\\ViewTable.tsx":"652","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\Enginee\\ViewTableCore.tsx":"653","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\pages\\auth\\FooterIllustrationsV2.tsx":"654","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\pages\\dialog-examples\\create-app-tabs\\DialogTabBilling.tsx":"655","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\pages\\dialog-examples\\create-app-tabs\\DialogTabDatabase.tsx":"656","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\pages\\dialog-examples\\create-app-tabs\\DialogTabDetails.tsx":"657","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\pages\\dialog-examples\\create-app-tabs\\DialogTabFramework.tsx":"658","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\pages\\dialog-examples\\DialogAddAddress.tsx":"659","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\pages\\dialog-examples\\DialogAddCard.tsx":"660","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\pages\\dialog-examples\\DialogAuthentication.tsx":"661","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\pages\\dialog-examples\\DialogCreateApp.tsx":"662","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\pages\\dialog-examples\\DialogEditUserInfo.tsx":"663","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\pages\\dialog-examples\\DialogReferEarn.tsx":"664","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\pages\\dialog-examples\\DialogShareProject.tsx":"665","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\pages\\misc\\FooterIllustrations.tsx":"666"},{"size":1771,"mtime":1719388312861,"results":"667","hashOfConfig":"668"},{"size":1071,"mtime":1719388312862,"results":"669","hashOfConfig":"668"},{"size":844,"mtime":1719388312862,"results":"670","hashOfConfig":"668"},{"size":4402,"mtime":1719388312862,"results":"671","hashOfConfig":"668"},{"size":346,"mtime":1719388312863,"results":"672","hashOfConfig":"668"},{"size":2647,"mtime":1719388312863,"results":"673","hashOfConfig":"668"},{"size":1956,"mtime":1719388312864,"results":"674","hashOfConfig":"668"},{"size":1825,"mtime":1719388312864,"results":"675","hashOfConfig":"668"},{"size":814,"mtime":1719388312864,"results":"676","hashOfConfig":"668"},{"size":3582,"mtime":1719388312865,"results":"677","hashOfConfig":"668"},{"size":2358,"mtime":1719388312865,"results":"678","hashOfConfig":"668"},{"size":2071,"mtime":1719388312866,"results":"679","hashOfConfig":"668"},{"size":1578,"mtime":1719388312866,"results":"680","hashOfConfig":"668"},{"size":3556,"mtime":1719388312866,"results":"681","hashOfConfig":"668"},{"size":2322,"mtime":1719388312867,"results":"682","hashOfConfig":"668"},{"size":1861,"mtime":1719388312867,"results":"683","hashOfConfig":"668"},{"size":1639,"mtime":1719388312867,"results":"684","hashOfConfig":"668"},{"size":13863,"mtime":1719388312868,"results":"685","hashOfConfig":"668"},{"size":221,"mtime":1719388312868,"results":"686","hashOfConfig":"668"},{"size":1697,"mtime":1719388312869,"results":"687","hashOfConfig":"668"},{"size":262,"mtime":1719388312869,"results":"688","hashOfConfig":"668"},{"size":857,"mtime":1719388312870,"results":"689","hashOfConfig":"668"},{"size":135,"mtime":1719388312870,"results":"690","hashOfConfig":"668"},{"size":1109,"mtime":1719388312870,"results":"691","hashOfConfig":"668"},{"size":150,"mtime":1719388312870,"results":"692","hashOfConfig":"668"},{"size":1963,"mtime":1719388312871,"results":"693","hashOfConfig":"668"},{"size":283,"mtime":1719388312871,"results":"694","hashOfConfig":"668"},{"size":3395,"mtime":1719388312871,"results":"695","hashOfConfig":"668"},{"size":1085,"mtime":1719388312872,"results":"696","hashOfConfig":"668"},{"size":350,"mtime":1719388312872,"results":"697","hashOfConfig":"668"},{"size":117,"mtime":1719388312872,"results":"698","hashOfConfig":"668"},{"size":858,"mtime":1719388312873,"results":"699","hashOfConfig":"668"},{"size":219,"mtime":1719388312873,"results":"700","hashOfConfig":"668"},{"size":333,"mtime":1719388312873,"results":"701","hashOfConfig":"668"},{"size":459,"mtime":1719388312874,"results":"702","hashOfConfig":"668"},{"size":211,"mtime":1719388312874,"results":"703","hashOfConfig":"668"},{"size":1091,"mtime":1719388312874,"results":"704","hashOfConfig":"668"},{"size":1586,"mtime":1719388312875,"results":"705","hashOfConfig":"668"},{"size":265,"mtime":1719388312875,"results":"706","hashOfConfig":"668"},{"size":4269,"mtime":1719388312875,"results":"707","hashOfConfig":"668"},{"size":696,"mtime":1719388312876,"results":"708","hashOfConfig":"668"},{"size":4674,"mtime":1719388312876,"results":"709","hashOfConfig":"668"},{"size":1981,"mtime":1719388312876,"results":"710","hashOfConfig":"668"},{"size":1718,"mtime":1719388312877,"results":"711","hashOfConfig":"668"},{"size":213,"mtime":1719388312877,"results":"712","hashOfConfig":"668"},{"size":1017,"mtime":1719388312877,"results":"713","hashOfConfig":"668"},{"size":1533,"mtime":1719388312877,"results":"714","hashOfConfig":"668"},{"size":5602,"mtime":1719388312878,"results":"715","hashOfConfig":"668"},{"size":5629,"mtime":1719388312879,"results":"716","hashOfConfig":"668"},{"size":10206,"mtime":1719388312879,"results":"717","hashOfConfig":"668"},{"size":863,"mtime":1719388312880,"results":"718","hashOfConfig":"668"},{"size":5057,"mtime":1719388312880,"results":"719","hashOfConfig":"668"},{"size":934,"mtime":1719388312881,"results":"720","hashOfConfig":"668"},{"size":3041,"mtime":1719388312882,"results":"721","hashOfConfig":"668"},{"size":2677,"mtime":1719388312883,"results":"722","hashOfConfig":"668"},{"size":990,"mtime":1719388312881,"results":"723","hashOfConfig":"668"},{"size":7664,"mtime":1719388312881,"results":"724","hashOfConfig":"668"},{"size":5837,"mtime":1719388312882,"results":"725","hashOfConfig":"668"},{"size":7801,"mtime":1719388312882,"results":"726","hashOfConfig":"668"},{"size":3279,"mtime":1719388312883,"results":"727","hashOfConfig":"668"},{"size":3684,"mtime":1719388312884,"results":"728","hashOfConfig":"668"},{"size":6687,"mtime":1719388312886,"results":"729","hashOfConfig":"668"},{"size":10719,"mtime":1719388312884,"results":"730","hashOfConfig":"668"},{"size":8032,"mtime":1719388312884,"results":"731","hashOfConfig":"668"},{"size":1458,"mtime":1719388312885,"results":"732","hashOfConfig":"668"},{"size":6424,"mtime":1719388312885,"results":"733","hashOfConfig":"668"},{"size":3658,"mtime":1719388312885,"results":"734","hashOfConfig":"668"},{"size":1121,"mtime":1719388312878,"results":"735","hashOfConfig":"668"},{"size":3089,"mtime":1719388312886,"results":"736","hashOfConfig":"668"},{"size":2221,"mtime":1719388312886,"results":"737","hashOfConfig":"668"},{"size":4837,"mtime":1719388312878,"results":"738","hashOfConfig":"668"},{"size":13315,"mtime":1719388312887,"results":"739","hashOfConfig":"668"},{"size":2663,"mtime":1719388312887,"results":"740","hashOfConfig":"668"},{"size":2554,"mtime":1719388312888,"results":"741","hashOfConfig":"668"},{"size":946,"mtime":1719388312888,"results":"742","hashOfConfig":"668"},{"size":210,"mtime":1719388312888,"results":"743","hashOfConfig":"668"},{"size":18820,"mtime":1719388312889,"results":"744","hashOfConfig":"668"},{"size":4856,"mtime":1719388312889,"results":"745","hashOfConfig":"668"},{"size":2308,"mtime":1719388312890,"results":"746","hashOfConfig":"668"},{"size":1246,"mtime":1719388312890,"results":"747","hashOfConfig":"668"},{"size":1587,"mtime":1719388312891,"results":"748","hashOfConfig":"668"},{"size":2961,"mtime":1719388312891,"results":"749","hashOfConfig":"668"},{"size":151,"mtime":1719388312892,"results":"750","hashOfConfig":"668"},{"size":2369,"mtime":1719388312892,"results":"751","hashOfConfig":"668"},{"size":2178,"mtime":1719388312892,"results":"752","hashOfConfig":"668"},{"size":3819,"mtime":1719388312893,"results":"753","hashOfConfig":"668"},{"size":448,"mtime":1719388312893,"results":"754","hashOfConfig":"668"},{"size":1046,"mtime":1719388312893,"results":"755","hashOfConfig":"668"},{"size":598,"mtime":1719388312893,"results":"756","hashOfConfig":"668"},{"size":1389,"mtime":1719388312894,"results":"757","hashOfConfig":"668"},{"size":2588,"mtime":1719388312894,"results":"758","hashOfConfig":"668"},{"size":2366,"mtime":1719388312894,"results":"759","hashOfConfig":"668"},{"size":3214,"mtime":1719388312895,"results":"760","hashOfConfig":"668"},{"size":1589,"mtime":1719388312895,"results":"761","hashOfConfig":"668"},{"size":693,"mtime":1719388312895,"results":"762","hashOfConfig":"668"},{"size":2599,"mtime":1719388312895,"results":"763","hashOfConfig":"668"},{"size":2015,"mtime":1719388312896,"results":"764","hashOfConfig":"668"},{"size":126,"mtime":1719388312896,"results":"765","hashOfConfig":"668"},{"size":919,"mtime":1719388312896,"results":"766","hashOfConfig":"668"},{"size":735,"mtime":1719388312897,"results":"767","hashOfConfig":"668"},{"size":994,"mtime":1719388312897,"results":"768","hashOfConfig":"668"},{"size":128,"mtime":1719388312897,"results":"769","hashOfConfig":"668"},{"size":532,"mtime":1719388312897,"results":"770","hashOfConfig":"668"},{"size":343,"mtime":1719388312897,"results":"771","hashOfConfig":"668"},{"size":230,"mtime":1719388312898,"results":"772","hashOfConfig":"668"},{"size":508,"mtime":1719388312898,"results":"773","hashOfConfig":"668"},{"size":355,"mtime":1719388312898,"results":"774","hashOfConfig":"668"},{"size":1866,"mtime":1719388312898,"results":"775","hashOfConfig":"668"},{"size":626,"mtime":1719388312899,"results":"776","hashOfConfig":"668"},{"size":2325,"mtime":1719388312899,"results":"777","hashOfConfig":"668"},{"size":239,"mtime":1719388312899,"results":"778","hashOfConfig":"668"},{"size":711,"mtime":1719388312899,"results":"779","hashOfConfig":"668"},{"size":297,"mtime":1719388312899,"results":"780","hashOfConfig":"668"},{"size":3482,"mtime":1719388312900,"results":"781","hashOfConfig":"668"},{"size":6159,"mtime":1719388312900,"results":"782","hashOfConfig":"668"},{"size":75,"mtime":1719388312901,"results":"783","hashOfConfig":"668"},{"size":2558,"mtime":1719388312891,"results":"784","hashOfConfig":"668"},{"size":2091,"mtime":1719388312892,"results":"785","hashOfConfig":"668"},{"size":608,"mtime":1719388312901,"results":"786","hashOfConfig":"668"},{"size":1524,"mtime":1719388312901,"results":"787","hashOfConfig":"668"},{"size":128,"mtime":1719388312902,"results":"788","hashOfConfig":"668"},{"size":3442,"mtime":1719388312902,"results":"789","hashOfConfig":"668"},{"size":281,"mtime":1719388312902,"results":"790","hashOfConfig":"668"},{"size":169,"mtime":1719388312902,"results":"791","hashOfConfig":"668"},{"size":440,"mtime":1719388312902,"results":"792","hashOfConfig":"668"},{"size":91,"mtime":1719388312903,"results":"793","hashOfConfig":"668"},{"size":740,"mtime":1719388312903,"results":"794","hashOfConfig":"668"},{"size":698,"mtime":1719388312903,"results":"795","hashOfConfig":"668"},{"size":4525,"mtime":1719388312904,"results":"796","hashOfConfig":"668"},{"size":1119,"mtime":1719388312904,"results":"797","hashOfConfig":"668"},{"size":924,"mtime":1719999652429,"results":"798","hashOfConfig":"668"},{"size":668,"mtime":1719388312904,"results":"799","hashOfConfig":"668"},{"size":1395,"mtime":1719388312905,"results":"800","hashOfConfig":"668"},{"size":3409,"mtime":1719388312905,"results":"801","hashOfConfig":"668"},{"size":7744,"mtime":1719388312906,"results":"802","hashOfConfig":"668"},{"size":767,"mtime":1719388312906,"results":"803","hashOfConfig":"668"},{"size":830,"mtime":1719388312906,"results":"804","hashOfConfig":"668"},{"size":147,"mtime":1719388312906,"results":"805","hashOfConfig":"668"},{"size":1515,"mtime":1719388312907,"results":"806","hashOfConfig":"668"},{"size":11,"mtime":1719388312907,"results":"807","hashOfConfig":"668"},{"size":6498,"mtime":1719388312907,"results":"808","hashOfConfig":"668"},{"size":7550,"mtime":1719388312907,"results":"809","hashOfConfig":"668"},{"size":3000382,"mtime":1719388312928,"results":"810","hashOfConfig":"668"},{"size":268,"mtime":1719388312932,"results":"811","hashOfConfig":"668"},{"size":947,"mtime":1719388312932,"results":"812","hashOfConfig":"668"},{"size":609,"mtime":1719388312932,"results":"813","hashOfConfig":"668"},{"size":645,"mtime":1719388312933,"results":"814","hashOfConfig":"668"},{"size":16131,"mtime":1719388312931,"results":"815","hashOfConfig":"668"},{"size":865,"mtime":1719388312931,"results":"816","hashOfConfig":"668"},{"size":3401,"mtime":1719388312933,"results":"817","hashOfConfig":"668"},{"size":570,"mtime":1719388312933,"results":"818","hashOfConfig":"668"},{"size":155,"mtime":1719388312931,"results":"819","hashOfConfig":"668"},{"size":264,"mtime":1719388312931,"results":"820","hashOfConfig":"668"},{"size":1441,"mtime":1719388312934,"results":"821","hashOfConfig":"668"},{"size":2081,"mtime":1719388312934,"results":"822","hashOfConfig":"668"},{"size":2805,"mtime":1719388312930,"results":"823","hashOfConfig":"668"},{"size":9317,"mtime":1719388312930,"results":"824","hashOfConfig":"668"},{"size":17387,"mtime":1719388312935,"results":"825","hashOfConfig":"668"},{"size":15026,"mtime":1719388312935,"results":"826","hashOfConfig":"668"},{"size":1901,"mtime":1719388312935,"results":"827","hashOfConfig":"668"},{"size":2132,"mtime":1719388312936,"results":"828","hashOfConfig":"668"},{"size":2125,"mtime":1719388312936,"results":"829","hashOfConfig":"668"},{"size":1524,"mtime":1719388312937,"results":"830","hashOfConfig":"668"},{"size":176,"mtime":1719638824507,"results":"831","hashOfConfig":"668"},{"size":449,"mtime":1719388312937,"results":"832","hashOfConfig":"668"},{"size":450,"mtime":1719388312938,"results":"833","hashOfConfig":"668"},{"size":451,"mtime":1719388312938,"results":"834","hashOfConfig":"668"},{"size":451,"mtime":1719388312938,"results":"835","hashOfConfig":"668"},{"size":451,"mtime":1719388312938,"results":"836","hashOfConfig":"668"},{"size":451,"mtime":1719388312938,"results":"837","hashOfConfig":"668"},{"size":451,"mtime":1719388312939,"results":"838","hashOfConfig":"668"},{"size":451,"mtime":1719388312939,"results":"839","hashOfConfig":"668"},{"size":451,"mtime":1719388312939,"results":"840","hashOfConfig":"668"},{"size":451,"mtime":1719388312939,"results":"841","hashOfConfig":"668"},{"size":451,"mtime":1719388312940,"results":"842","hashOfConfig":"668"},{"size":451,"mtime":1719388312940,"results":"843","hashOfConfig":"668"},{"size":450,"mtime":1719388312940,"results":"844","hashOfConfig":"668"},{"size":451,"mtime":1719388312940,"results":"845","hashOfConfig":"668"},{"size":451,"mtime":1719388312940,"results":"846","hashOfConfig":"668"},{"size":451,"mtime":1719388312941,"results":"847","hashOfConfig":"668"},{"size":451,"mtime":1719388312941,"results":"848","hashOfConfig":"668"},{"size":451,"mtime":1719388312941,"results":"849","hashOfConfig":"668"},{"size":451,"mtime":1719388312941,"results":"850","hashOfConfig":"668"},{"size":451,"mtime":1719388312941,"results":"851","hashOfConfig":"668"},{"size":451,"mtime":1719388312942,"results":"852","hashOfConfig":"668"},{"size":451,"mtime":1719388312942,"results":"853","hashOfConfig":"668"},{"size":451,"mtime":1719388312942,"results":"854","hashOfConfig":"668"},{"size":450,"mtime":1719388312942,"results":"855","hashOfConfig":"668"},{"size":451,"mtime":1719388312942,"results":"856","hashOfConfig":"668"},{"size":451,"mtime":1719388312943,"results":"857","hashOfConfig":"668"},{"size":451,"mtime":1719388312943,"results":"858","hashOfConfig":"668"},{"size":451,"mtime":1719388312943,"results":"859","hashOfConfig":"668"},{"size":451,"mtime":1719388312943,"results":"860","hashOfConfig":"668"},{"size":451,"mtime":1719388312943,"results":"861","hashOfConfig":"668"},{"size":451,"mtime":1719388312944,"results":"862","hashOfConfig":"668"},{"size":451,"mtime":1719388312944,"results":"863","hashOfConfig":"668"},{"size":451,"mtime":1719388312944,"results":"864","hashOfConfig":"668"},{"size":451,"mtime":1719388312944,"results":"865","hashOfConfig":"668"},{"size":450,"mtime":1719388312945,"results":"866","hashOfConfig":"668"},{"size":451,"mtime":1719388312945,"results":"867","hashOfConfig":"668"},{"size":451,"mtime":1719388312945,"results":"868","hashOfConfig":"668"},{"size":451,"mtime":1719388312945,"results":"869","hashOfConfig":"668"},{"size":451,"mtime":1719388312945,"results":"870","hashOfConfig":"668"},{"size":451,"mtime":1719388312946,"results":"871","hashOfConfig":"668"},{"size":451,"mtime":1719388312946,"results":"872","hashOfConfig":"668"},{"size":451,"mtime":1719388312946,"results":"873","hashOfConfig":"668"},{"size":451,"mtime":1719388312946,"results":"874","hashOfConfig":"668"},{"size":451,"mtime":1719388312947,"results":"875","hashOfConfig":"668"},{"size":451,"mtime":1719388312947,"results":"876","hashOfConfig":"668"},{"size":450,"mtime":1719388312947,"results":"877","hashOfConfig":"668"},{"size":451,"mtime":1719388312947,"results":"878","hashOfConfig":"668"},{"size":451,"mtime":1719388312947,"results":"879","hashOfConfig":"668"},{"size":451,"mtime":1719388312948,"results":"880","hashOfConfig":"668"},{"size":451,"mtime":1719388312948,"results":"881","hashOfConfig":"668"},{"size":451,"mtime":1719388312948,"results":"882","hashOfConfig":"668"},{"size":451,"mtime":1719388312948,"results":"883","hashOfConfig":"668"},{"size":451,"mtime":1719388312948,"results":"884","hashOfConfig":"668"},{"size":451,"mtime":1719388312949,"results":"885","hashOfConfig":"668"},{"size":451,"mtime":1719388312949,"results":"886","hashOfConfig":"668"},{"size":451,"mtime":1719388312949,"results":"887","hashOfConfig":"668"},{"size":450,"mtime":1719388312949,"results":"888","hashOfConfig":"668"},{"size":451,"mtime":1719388312949,"results":"889","hashOfConfig":"668"},{"size":451,"mtime":1719388312950,"results":"890","hashOfConfig":"668"},{"size":451,"mtime":1719388312950,"results":"891","hashOfConfig":"668"},{"size":451,"mtime":1719388312950,"results":"892","hashOfConfig":"668"},{"size":451,"mtime":1719388312950,"results":"893","hashOfConfig":"668"},{"size":451,"mtime":1719388312951,"results":"894","hashOfConfig":"668"},{"size":451,"mtime":1719388312951,"results":"895","hashOfConfig":"668"},{"size":451,"mtime":1719388312951,"results":"896","hashOfConfig":"668"},{"size":451,"mtime":1719388312951,"results":"897","hashOfConfig":"668"},{"size":451,"mtime":1719388312951,"results":"898","hashOfConfig":"668"},{"size":450,"mtime":1719388312952,"results":"899","hashOfConfig":"668"},{"size":451,"mtime":1719388312952,"results":"900","hashOfConfig":"668"},{"size":451,"mtime":1719388312952,"results":"901","hashOfConfig":"668"},{"size":451,"mtime":1719388312952,"results":"902","hashOfConfig":"668"},{"size":451,"mtime":1719388312952,"results":"903","hashOfConfig":"668"},{"size":451,"mtime":1719388312953,"results":"904","hashOfConfig":"668"},{"size":451,"mtime":1719388312953,"results":"905","hashOfConfig":"668"},{"size":451,"mtime":1719388312953,"results":"906","hashOfConfig":"668"},{"size":451,"mtime":1719388312953,"results":"907","hashOfConfig":"668"},{"size":451,"mtime":1719388312953,"results":"908","hashOfConfig":"668"},{"size":451,"mtime":1719388312954,"results":"909","hashOfConfig":"668"},{"size":450,"mtime":1719388312954,"results":"910","hashOfConfig":"668"},{"size":451,"mtime":1719388312954,"results":"911","hashOfConfig":"668"},{"size":451,"mtime":1719388312954,"results":"912","hashOfConfig":"668"},{"size":451,"mtime":1719388312954,"results":"913","hashOfConfig":"668"},{"size":451,"mtime":1719388312955,"results":"914","hashOfConfig":"668"},{"size":451,"mtime":1719388312955,"results":"915","hashOfConfig":"668"},{"size":451,"mtime":1719388312955,"results":"916","hashOfConfig":"668"},{"size":451,"mtime":1719388312955,"results":"917","hashOfConfig":"668"},{"size":451,"mtime":1719388312955,"results":"918","hashOfConfig":"668"},{"size":451,"mtime":1719388312956,"results":"919","hashOfConfig":"668"},{"size":451,"mtime":1719388312956,"results":"920","hashOfConfig":"668"},{"size":450,"mtime":1719388312956,"results":"921","hashOfConfig":"668"},{"size":451,"mtime":1719388312956,"results":"922","hashOfConfig":"668"},{"size":451,"mtime":1719388312956,"results":"923","hashOfConfig":"668"},{"size":451,"mtime":1719388312957,"results":"924","hashOfConfig":"668"},{"size":451,"mtime":1719388312957,"results":"925","hashOfConfig":"668"},{"size":451,"mtime":1719388312957,"results":"926","hashOfConfig":"668"},{"size":451,"mtime":1719388312957,"results":"927","hashOfConfig":"668"},{"size":451,"mtime":1719388312958,"results":"928","hashOfConfig":"668"},{"size":451,"mtime":1719388312958,"results":"929","hashOfConfig":"668"},{"size":451,"mtime":1719388312958,"results":"930","hashOfConfig":"668"},{"size":451,"mtime":1719388312958,"results":"931","hashOfConfig":"668"},{"size":450,"mtime":1719388312958,"results":"932","hashOfConfig":"668"},{"size":451,"mtime":1719388312959,"results":"933","hashOfConfig":"668"},{"size":451,"mtime":1719388312959,"results":"934","hashOfConfig":"668"},{"size":451,"mtime":1719388312959,"results":"935","hashOfConfig":"668"},{"size":451,"mtime":1719388312959,"results":"936","hashOfConfig":"668"},{"size":451,"mtime":1719388312959,"results":"937","hashOfConfig":"668"},{"size":451,"mtime":1719388312960,"results":"938","hashOfConfig":"668"},{"size":451,"mtime":1719388312960,"results":"939","hashOfConfig":"668"},{"size":451,"mtime":1719388312960,"results":"940","hashOfConfig":"668"},{"size":451,"mtime":1719388312960,"results":"941","hashOfConfig":"668"},{"size":451,"mtime":1719388312960,"results":"942","hashOfConfig":"668"},{"size":449,"mtime":1719388312961,"results":"943","hashOfConfig":"668"},{"size":450,"mtime":1719388312961,"results":"944","hashOfConfig":"668"},{"size":445,"mtime":1719388312961,"results":"945","hashOfConfig":"668"},{"size":445,"mtime":1719388312961,"results":"946","hashOfConfig":"668"},{"size":445,"mtime":1719388312961,"results":"947","hashOfConfig":"668"},{"size":445,"mtime":1719388312962,"results":"948","hashOfConfig":"668"},{"size":445,"mtime":1719388312962,"results":"949","hashOfConfig":"668"},{"size":445,"mtime":1719388312962,"results":"950","hashOfConfig":"668"},{"size":445,"mtime":1719388312962,"results":"951","hashOfConfig":"668"},{"size":445,"mtime":1719388312962,"results":"952","hashOfConfig":"668"},{"size":445,"mtime":1719388312963,"results":"953","hashOfConfig":"668"},{"size":445,"mtime":1719388312963,"results":"954","hashOfConfig":"668"},{"size":450,"mtime":1719388312963,"results":"955","hashOfConfig":"668"},{"size":445,"mtime":1719388312963,"results":"956","hashOfConfig":"668"},{"size":445,"mtime":1719388312964,"results":"957","hashOfConfig":"668"},{"size":445,"mtime":1719388312964,"results":"958","hashOfConfig":"668"},{"size":445,"mtime":1719388312964,"results":"959","hashOfConfig":"668"},{"size":445,"mtime":1719388312964,"results":"960","hashOfConfig":"668"},{"size":445,"mtime":1719388312964,"results":"961","hashOfConfig":"668"},{"size":445,"mtime":1719388312965,"results":"962","hashOfConfig":"668"},{"size":445,"mtime":1719388312965,"results":"963","hashOfConfig":"668"},{"size":445,"mtime":1719388312965,"results":"964","hashOfConfig":"668"},{"size":445,"mtime":1719388312965,"results":"965","hashOfConfig":"668"},{"size":450,"mtime":1719388312965,"results":"966","hashOfConfig":"668"},{"size":445,"mtime":1719388312966,"results":"967","hashOfConfig":"668"},{"size":445,"mtime":1719388312966,"results":"968","hashOfConfig":"668"},{"size":445,"mtime":1719388312966,"results":"969","hashOfConfig":"668"},{"size":445,"mtime":1719388312966,"results":"970","hashOfConfig":"668"},{"size":445,"mtime":1719388312966,"results":"971","hashOfConfig":"668"},{"size":445,"mtime":1719388312967,"results":"972","hashOfConfig":"668"},{"size":445,"mtime":1719388312967,"results":"973","hashOfConfig":"668"},{"size":445,"mtime":1719388312967,"results":"974","hashOfConfig":"668"},{"size":445,"mtime":1719388312967,"results":"975","hashOfConfig":"668"},{"size":445,"mtime":1719388312967,"results":"976","hashOfConfig":"668"},{"size":450,"mtime":1719388312968,"results":"977","hashOfConfig":"668"},{"size":445,"mtime":1719388312968,"results":"978","hashOfConfig":"668"},{"size":445,"mtime":1719388312968,"results":"979","hashOfConfig":"668"},{"size":445,"mtime":1719388312969,"results":"980","hashOfConfig":"668"},{"size":445,"mtime":1719388312969,"results":"981","hashOfConfig":"668"},{"size":445,"mtime":1719388312969,"results":"982","hashOfConfig":"668"},{"size":445,"mtime":1719388312969,"results":"983","hashOfConfig":"668"},{"size":445,"mtime":1719388312969,"results":"984","hashOfConfig":"668"},{"size":445,"mtime":1719388312970,"results":"985","hashOfConfig":"668"},{"size":445,"mtime":1719388312970,"results":"986","hashOfConfig":"668"},{"size":445,"mtime":1719388312970,"results":"987","hashOfConfig":"668"},{"size":450,"mtime":1719388312970,"results":"988","hashOfConfig":"668"},{"size":445,"mtime":1719388312970,"results":"989","hashOfConfig":"668"},{"size":445,"mtime":1719388312970,"results":"990","hashOfConfig":"668"},{"size":445,"mtime":1719388312971,"results":"991","hashOfConfig":"668"},{"size":445,"mtime":1719388312971,"results":"992","hashOfConfig":"668"},{"size":445,"mtime":1719388312971,"results":"993","hashOfConfig":"668"},{"size":445,"mtime":1719388312971,"results":"994","hashOfConfig":"668"},{"size":445,"mtime":1719388312971,"results":"995","hashOfConfig":"668"},{"size":445,"mtime":1719388312972,"results":"996","hashOfConfig":"668"},{"size":445,"mtime":1719388312972,"results":"997","hashOfConfig":"668"},{"size":445,"mtime":1719388312972,"results":"998","hashOfConfig":"668"},{"size":450,"mtime":1719388312972,"results":"999","hashOfConfig":"668"},{"size":445,"mtime":1719388312973,"results":"1000","hashOfConfig":"668"},{"size":445,"mtime":1719388312973,"results":"1001","hashOfConfig":"668"},{"size":445,"mtime":1719388312973,"results":"1002","hashOfConfig":"668"},{"size":445,"mtime":1719388312973,"results":"1003","hashOfConfig":"668"},{"size":445,"mtime":1719388312973,"results":"1004","hashOfConfig":"668"},{"size":445,"mtime":1719388312974,"results":"1005","hashOfConfig":"668"},{"size":445,"mtime":1719388312974,"results":"1006","hashOfConfig":"668"},{"size":445,"mtime":1719388312974,"results":"1007","hashOfConfig":"668"},{"size":445,"mtime":1719388312974,"results":"1008","hashOfConfig":"668"},{"size":445,"mtime":1719388312974,"results":"1009","hashOfConfig":"668"},{"size":450,"mtime":1719388312975,"results":"1010","hashOfConfig":"668"},{"size":445,"mtime":1719388312975,"results":"1011","hashOfConfig":"668"},{"size":445,"mtime":1719388312975,"results":"1012","hashOfConfig":"668"},{"size":445,"mtime":1719388312975,"results":"1013","hashOfConfig":"668"},{"size":445,"mtime":1719388312975,"results":"1014","hashOfConfig":"668"},{"size":445,"mtime":1719388312976,"results":"1015","hashOfConfig":"668"},{"size":445,"mtime":1719388312976,"results":"1016","hashOfConfig":"668"},{"size":445,"mtime":1719388312976,"results":"1017","hashOfConfig":"668"},{"size":445,"mtime":1719388312977,"results":"1018","hashOfConfig":"668"},{"size":445,"mtime":1719388312977,"results":"1019","hashOfConfig":"668"},{"size":445,"mtime":1719388312977,"results":"1020","hashOfConfig":"668"},{"size":450,"mtime":1719388312977,"results":"1021","hashOfConfig":"668"},{"size":445,"mtime":1719388312977,"results":"1022","hashOfConfig":"668"},{"size":445,"mtime":1719388312978,"results":"1023","hashOfConfig":"668"},{"size":445,"mtime":1719388312978,"results":"1024","hashOfConfig":"668"},{"size":445,"mtime":1719388312978,"results":"1025","hashOfConfig":"668"},{"size":445,"mtime":1719388312978,"results":"1026","hashOfConfig":"668"},{"size":445,"mtime":1719388312978,"results":"1027","hashOfConfig":"668"},{"size":445,"mtime":1719388312979,"results":"1028","hashOfConfig":"668"},{"size":445,"mtime":1719388312979,"results":"1029","hashOfConfig":"668"},{"size":445,"mtime":1719388312979,"results":"1030","hashOfConfig":"668"},{"size":445,"mtime":1719388312979,"results":"1031","hashOfConfig":"668"},{"size":450,"mtime":1719388312979,"results":"1032","hashOfConfig":"668"},{"size":445,"mtime":1719388312980,"results":"1033","hashOfConfig":"668"},{"size":445,"mtime":1719388312980,"results":"1034","hashOfConfig":"668"},{"size":445,"mtime":1719388312980,"results":"1035","hashOfConfig":"668"},{"size":445,"mtime":1719388312980,"results":"1036","hashOfConfig":"668"},{"size":445,"mtime":1719388312981,"results":"1037","hashOfConfig":"668"},{"size":445,"mtime":1719388312981,"results":"1038","hashOfConfig":"668"},{"size":445,"mtime":1719388312981,"results":"1039","hashOfConfig":"668"},{"size":445,"mtime":1719388312981,"results":"1040","hashOfConfig":"668"},{"size":445,"mtime":1719388312982,"results":"1041","hashOfConfig":"668"},{"size":445,"mtime":1719388312982,"results":"1042","hashOfConfig":"668"},{"size":450,"mtime":1719388312982,"results":"1043","hashOfConfig":"668"},{"size":445,"mtime":1719388312982,"results":"1044","hashOfConfig":"668"},{"size":445,"mtime":1719388312982,"results":"1045","hashOfConfig":"668"},{"size":445,"mtime":1719388312983,"results":"1046","hashOfConfig":"668"},{"size":445,"mtime":1719388312983,"results":"1047","hashOfConfig":"668"},{"size":445,"mtime":1719388312983,"results":"1048","hashOfConfig":"668"},{"size":445,"mtime":1719388312983,"results":"1049","hashOfConfig":"668"},{"size":445,"mtime":1719388312983,"results":"1050","hashOfConfig":"668"},{"size":445,"mtime":1719388312984,"results":"1051","hashOfConfig":"668"},{"size":445,"mtime":1719388312984,"results":"1052","hashOfConfig":"668"},{"size":445,"mtime":1719388312984,"results":"1053","hashOfConfig":"668"},{"size":449,"mtime":1719388312984,"results":"1054","hashOfConfig":"668"},{"size":450,"mtime":1719388312984,"results":"1055","hashOfConfig":"668"},{"size":445,"mtime":1719388312985,"results":"1056","hashOfConfig":"668"},{"size":445,"mtime":1719388312985,"results":"1057","hashOfConfig":"668"},{"size":445,"mtime":1719388312985,"results":"1058","hashOfConfig":"668"},{"size":445,"mtime":1719388312985,"results":"1059","hashOfConfig":"668"},{"size":445,"mtime":1719388312985,"results":"1060","hashOfConfig":"668"},{"size":445,"mtime":1719388312986,"results":"1061","hashOfConfig":"668"},{"size":445,"mtime":1719388312986,"results":"1062","hashOfConfig":"668"},{"size":445,"mtime":1719388312986,"results":"1063","hashOfConfig":"668"},{"size":445,"mtime":1719388312986,"results":"1064","hashOfConfig":"668"},{"size":445,"mtime":1719388312986,"results":"1065","hashOfConfig":"668"},{"size":450,"mtime":1719388312987,"results":"1066","hashOfConfig":"668"},{"size":445,"mtime":1719388312987,"results":"1067","hashOfConfig":"668"},{"size":445,"mtime":1719388312987,"results":"1068","hashOfConfig":"668"},{"size":445,"mtime":1719388312987,"results":"1069","hashOfConfig":"668"},{"size":445,"mtime":1719388312987,"results":"1070","hashOfConfig":"668"},{"size":445,"mtime":1719388312988,"results":"1071","hashOfConfig":"668"},{"size":445,"mtime":1719388312988,"results":"1072","hashOfConfig":"668"},{"size":445,"mtime":1719388312988,"results":"1073","hashOfConfig":"668"},{"size":445,"mtime":1719388312988,"results":"1074","hashOfConfig":"668"},{"size":445,"mtime":1719388312988,"results":"1075","hashOfConfig":"668"},{"size":445,"mtime":1719388312989,"results":"1076","hashOfConfig":"668"},{"size":450,"mtime":1719388312989,"results":"1077","hashOfConfig":"668"},{"size":445,"mtime":1719388312989,"results":"1078","hashOfConfig":"668"},{"size":445,"mtime":1719388312989,"results":"1079","hashOfConfig":"668"},{"size":445,"mtime":1719388312989,"results":"1080","hashOfConfig":"668"},{"size":445,"mtime":1719388312990,"results":"1081","hashOfConfig":"668"},{"size":445,"mtime":1719388312990,"results":"1082","hashOfConfig":"668"},{"size":445,"mtime":1719388312990,"results":"1083","hashOfConfig":"668"},{"size":445,"mtime":1719388312990,"results":"1084","hashOfConfig":"668"},{"size":445,"mtime":1719388312991,"results":"1085","hashOfConfig":"668"},{"size":445,"mtime":1719388312991,"results":"1086","hashOfConfig":"668"},{"size":445,"mtime":1719388312991,"results":"1087","hashOfConfig":"668"},{"size":450,"mtime":1719388312991,"results":"1088","hashOfConfig":"668"},{"size":445,"mtime":1719388312991,"results":"1089","hashOfConfig":"668"},{"size":445,"mtime":1719388312992,"results":"1090","hashOfConfig":"668"},{"size":445,"mtime":1719388312992,"results":"1091","hashOfConfig":"668"},{"size":445,"mtime":1719388312992,"results":"1092","hashOfConfig":"668"},{"size":445,"mtime":1719388312992,"results":"1093","hashOfConfig":"668"},{"size":445,"mtime":1719388312993,"results":"1094","hashOfConfig":"668"},{"size":445,"mtime":1719388312993,"results":"1095","hashOfConfig":"668"},{"size":445,"mtime":1719388312993,"results":"1096","hashOfConfig":"668"},{"size":445,"mtime":1719388312993,"results":"1097","hashOfConfig":"668"},{"size":445,"mtime":1719388312993,"results":"1098","hashOfConfig":"668"},{"size":450,"mtime":1719388312994,"results":"1099","hashOfConfig":"668"},{"size":445,"mtime":1719388312994,"results":"1100","hashOfConfig":"668"},{"size":445,"mtime":1719388312994,"results":"1101","hashOfConfig":"668"},{"size":661,"mtime":1719388312994,"results":"1102","hashOfConfig":"668"},{"size":445,"mtime":1719388312994,"results":"1103","hashOfConfig":"668"},{"size":445,"mtime":1719388312995,"results":"1104","hashOfConfig":"668"},{"size":445,"mtime":1719388312995,"results":"1105","hashOfConfig":"668"},{"size":445,"mtime":1719388312995,"results":"1106","hashOfConfig":"668"},{"size":445,"mtime":1719388312995,"results":"1107","hashOfConfig":"668"},{"size":445,"mtime":1719388312995,"results":"1108","hashOfConfig":"668"},{"size":445,"mtime":1719388312996,"results":"1109","hashOfConfig":"668"},{"size":450,"mtime":1719388312996,"results":"1110","hashOfConfig":"668"},{"size":445,"mtime":1719388312996,"results":"1111","hashOfConfig":"668"},{"size":445,"mtime":1719388312996,"results":"1112","hashOfConfig":"668"},{"size":445,"mtime":1719388312996,"results":"1113","hashOfConfig":"668"},{"size":445,"mtime":1719388312997,"results":"1114","hashOfConfig":"668"},{"size":445,"mtime":1719388312997,"results":"1115","hashOfConfig":"668"},{"size":445,"mtime":1719388312997,"results":"1116","hashOfConfig":"668"},{"size":445,"mtime":1719388312997,"results":"1117","hashOfConfig":"668"},{"size":445,"mtime":1719388312997,"results":"1118","hashOfConfig":"668"},{"size":445,"mtime":1719388312998,"results":"1119","hashOfConfig":"668"},{"size":445,"mtime":1719388312998,"results":"1120","hashOfConfig":"668"},{"size":450,"mtime":1719388312998,"results":"1121","hashOfConfig":"668"},{"size":445,"mtime":1719388312998,"results":"1122","hashOfConfig":"668"},{"size":445,"mtime":1719388312998,"results":"1123","hashOfConfig":"668"},{"size":445,"mtime":1719388312999,"results":"1124","hashOfConfig":"668"},{"size":445,"mtime":1719388312999,"results":"1125","hashOfConfig":"668"},{"size":445,"mtime":1719388312999,"results":"1126","hashOfConfig":"668"},{"size":445,"mtime":1719388312999,"results":"1127","hashOfConfig":"668"},{"size":445,"mtime":1719388312999,"results":"1128","hashOfConfig":"668"},{"size":445,"mtime":1719388313000,"results":"1129","hashOfConfig":"668"},{"size":445,"mtime":1719388313000,"results":"1130","hashOfConfig":"668"},{"size":445,"mtime":1719388313000,"results":"1131","hashOfConfig":"668"},{"size":450,"mtime":1719388313000,"results":"1132","hashOfConfig":"668"},{"size":445,"mtime":1719388313001,"results":"1133","hashOfConfig":"668"},{"size":445,"mtime":1719388313001,"results":"1134","hashOfConfig":"668"},{"size":445,"mtime":1719388313001,"results":"1135","hashOfConfig":"668"},{"size":445,"mtime":1719388313001,"results":"1136","hashOfConfig":"668"},{"size":445,"mtime":1719388313001,"results":"1137","hashOfConfig":"668"},{"size":445,"mtime":1719388313002,"results":"1138","hashOfConfig":"668"},{"size":445,"mtime":1719388313002,"results":"1139","hashOfConfig":"668"},{"size":445,"mtime":1719388313002,"results":"1140","hashOfConfig":"668"},{"size":445,"mtime":1719388313002,"results":"1141","hashOfConfig":"668"},{"size":445,"mtime":1719388313002,"results":"1142","hashOfConfig":"668"},{"size":450,"mtime":1719388313003,"results":"1143","hashOfConfig":"668"},{"size":445,"mtime":1719388313003,"results":"1144","hashOfConfig":"668"},{"size":445,"mtime":1719388313003,"results":"1145","hashOfConfig":"668"},{"size":445,"mtime":1719388313003,"results":"1146","hashOfConfig":"668"},{"size":445,"mtime":1719388313003,"results":"1147","hashOfConfig":"668"},{"size":445,"mtime":1719388313004,"results":"1148","hashOfConfig":"668"},{"size":445,"mtime":1719388313004,"results":"1149","hashOfConfig":"668"},{"size":445,"mtime":1719388313004,"results":"1150","hashOfConfig":"668"},{"size":445,"mtime":1719388313004,"results":"1151","hashOfConfig":"668"},{"size":445,"mtime":1719388313004,"results":"1152","hashOfConfig":"668"},{"size":445,"mtime":1719388313005,"results":"1153","hashOfConfig":"668"},{"size":450,"mtime":1719388313005,"results":"1154","hashOfConfig":"668"},{"size":445,"mtime":1719388313005,"results":"1155","hashOfConfig":"668"},{"size":445,"mtime":1719388313005,"results":"1156","hashOfConfig":"668"},{"size":445,"mtime":1719388313005,"results":"1157","hashOfConfig":"668"},{"size":445,"mtime":1719388313006,"results":"1158","hashOfConfig":"668"},{"size":445,"mtime":1719388313006,"results":"1159","hashOfConfig":"668"},{"size":445,"mtime":1719388313006,"results":"1160","hashOfConfig":"668"},{"size":445,"mtime":1719388313006,"results":"1161","hashOfConfig":"668"},{"size":445,"mtime":1719388313006,"results":"1162","hashOfConfig":"668"},{"size":445,"mtime":1719388313007,"results":"1163","hashOfConfig":"668"},{"size":445,"mtime":1719388313007,"results":"1164","hashOfConfig":"668"},{"size":449,"mtime":1719388313007,"results":"1165","hashOfConfig":"668"},{"size":450,"mtime":1719388313007,"results":"1166","hashOfConfig":"668"},{"size":445,"mtime":1719388313008,"results":"1167","hashOfConfig":"668"},{"size":450,"mtime":1719388313008,"results":"1168","hashOfConfig":"668"},{"size":450,"mtime":1719388313008,"results":"1169","hashOfConfig":"668"},{"size":450,"mtime":1719388313008,"results":"1170","hashOfConfig":"668"},{"size":450,"mtime":1719388313008,"results":"1171","hashOfConfig":"668"},{"size":450,"mtime":1719388313009,"results":"1172","hashOfConfig":"668"},{"size":450,"mtime":1719388313009,"results":"1173","hashOfConfig":"668"},{"size":450,"mtime":1719388313009,"results":"1174","hashOfConfig":"668"},{"size":450,"mtime":1719388313009,"results":"1175","hashOfConfig":"668"},{"size":450,"mtime":1719388313010,"results":"1176","hashOfConfig":"668"},{"size":449,"mtime":1719388313010,"results":"1177","hashOfConfig":"668"},{"size":450,"mtime":1719388313010,"results":"1178","hashOfConfig":"668"},{"size":450,"mtime":1719388313010,"results":"1179","hashOfConfig":"668"},{"size":450,"mtime":1719388313010,"results":"1180","hashOfConfig":"668"},{"size":450,"mtime":1719388313011,"results":"1181","hashOfConfig":"668"},{"size":450,"mtime":1719388313011,"results":"1182","hashOfConfig":"668"},{"size":450,"mtime":1719388313011,"results":"1183","hashOfConfig":"668"},{"size":450,"mtime":1719388313011,"results":"1184","hashOfConfig":"668"},{"size":450,"mtime":1719388313012,"results":"1185","hashOfConfig":"668"},{"size":450,"mtime":1719388313012,"results":"1186","hashOfConfig":"668"},{"size":450,"mtime":1719388313012,"results":"1187","hashOfConfig":"668"},{"size":449,"mtime":1719388313012,"results":"1188","hashOfConfig":"668"},{"size":450,"mtime":1719388313012,"results":"1189","hashOfConfig":"668"},{"size":450,"mtime":1719388313013,"results":"1190","hashOfConfig":"668"},{"size":450,"mtime":1719388313013,"results":"1191","hashOfConfig":"668"},{"size":450,"mtime":1719388313013,"results":"1192","hashOfConfig":"668"},{"size":450,"mtime":1719388313013,"results":"1193","hashOfConfig":"668"},{"size":450,"mtime":1719388313013,"results":"1194","hashOfConfig":"668"},{"size":450,"mtime":1719388313014,"results":"1195","hashOfConfig":"668"},{"size":450,"mtime":1719388313014,"results":"1196","hashOfConfig":"668"},{"size":450,"mtime":1719388313014,"results":"1197","hashOfConfig":"668"},{"size":450,"mtime":1719388313014,"results":"1198","hashOfConfig":"668"},{"size":449,"mtime":1719388313014,"results":"1199","hashOfConfig":"668"},{"size":450,"mtime":1719388313015,"results":"1200","hashOfConfig":"668"},{"size":450,"mtime":1719388313015,"results":"1201","hashOfConfig":"668"},{"size":450,"mtime":1719388313015,"results":"1202","hashOfConfig":"668"},{"size":450,"mtime":1719388313015,"results":"1203","hashOfConfig":"668"},{"size":450,"mtime":1719388313015,"results":"1204","hashOfConfig":"668"},{"size":450,"mtime":1719388313016,"results":"1205","hashOfConfig":"668"},{"size":450,"mtime":1719388313016,"results":"1206","hashOfConfig":"668"},{"size":450,"mtime":1719388313016,"results":"1207","hashOfConfig":"668"},{"size":450,"mtime":1719388313016,"results":"1208","hashOfConfig":"668"},{"size":450,"mtime":1719388313016,"results":"1209","hashOfConfig":"668"},{"size":449,"mtime":1719388313017,"results":"1210","hashOfConfig":"668"},{"size":450,"mtime":1719388313017,"results":"1211","hashOfConfig":"668"},{"size":450,"mtime":1719388313017,"results":"1212","hashOfConfig":"668"},{"size":450,"mtime":1719388313017,"results":"1213","hashOfConfig":"668"},{"size":450,"mtime":1719388313017,"results":"1214","hashOfConfig":"668"},{"size":450,"mtime":1719388313018,"results":"1215","hashOfConfig":"668"},{"size":450,"mtime":1719388313018,"results":"1216","hashOfConfig":"668"},{"size":450,"mtime":1719388313018,"results":"1217","hashOfConfig":"668"},{"size":450,"mtime":1719388313018,"results":"1218","hashOfConfig":"668"},{"size":450,"mtime":1719388313018,"results":"1219","hashOfConfig":"668"},{"size":450,"mtime":1719388313019,"results":"1220","hashOfConfig":"668"},{"size":449,"mtime":1719388313019,"results":"1221","hashOfConfig":"668"},{"size":450,"mtime":1719388313019,"results":"1222","hashOfConfig":"668"},{"size":450,"mtime":1719388313019,"results":"1223","hashOfConfig":"668"},{"size":450,"mtime":1719388313019,"results":"1224","hashOfConfig":"668"},{"size":450,"mtime":1719388313020,"results":"1225","hashOfConfig":"668"},{"size":450,"mtime":1719388313020,"results":"1226","hashOfConfig":"668"},{"size":450,"mtime":1719388313020,"results":"1227","hashOfConfig":"668"},{"size":450,"mtime":1719388313020,"results":"1228","hashOfConfig":"668"},{"size":450,"mtime":1719388313020,"results":"1229","hashOfConfig":"668"},{"size":450,"mtime":1719388313021,"results":"1230","hashOfConfig":"668"},{"size":450,"mtime":1719388313021,"results":"1231","hashOfConfig":"668"},{"size":169,"mtime":1719993571963,"results":"1232","hashOfConfig":"668"},{"size":169,"mtime":1719993563287,"results":"1233","hashOfConfig":"668"},{"size":161,"mtime":1719991620423,"results":"1234","hashOfConfig":"668"},{"size":7336,"mtime":1719388313022,"results":"1235","hashOfConfig":"668"},{"size":7336,"mtime":1719388313022,"results":"1236","hashOfConfig":"668"},{"size":7336,"mtime":1719388313023,"results":"1237","hashOfConfig":"668"},{"size":7326,"mtime":1719388313021,"results":"1238","hashOfConfig":"668"},{"size":7332,"mtime":1719388313022,"results":"1239","hashOfConfig":"668"},{"size":7344,"mtime":1719388313022,"results":"1240","hashOfConfig":"668"},{"size":8189,"mtime":1719388313023,"results":"1241","hashOfConfig":"668"},{"size":8181,"mtime":1719388313023,"results":"1242","hashOfConfig":"668"},{"size":542,"mtime":1719388313024,"results":"1243","hashOfConfig":"668"},{"size":259,"mtime":1719388313024,"results":"1244","hashOfConfig":"668"},{"size":261,"mtime":1719388313024,"results":"1245","hashOfConfig":"668"},{"size":269,"mtime":1719388313025,"results":"1246","hashOfConfig":"668"},{"size":269,"mtime":1719388313025,"results":"1247","hashOfConfig":"668"},{"size":542,"mtime":1719388313025,"results":"1248","hashOfConfig":"668"},{"size":538,"mtime":1719388313026,"results":"1249","hashOfConfig":"668"},{"size":579,"mtime":1719388313026,"results":"1250","hashOfConfig":"668"},{"size":255,"mtime":1719388313025,"results":"1251","hashOfConfig":"668"},{"size":268,"mtime":1719388313026,"results":"1252","hashOfConfig":"668"},{"size":268,"mtime":1719388313026,"results":"1253","hashOfConfig":"668"},{"size":927,"mtime":1719388313026,"results":"1254","hashOfConfig":"668"},{"size":14069,"mtime":1719388313027,"results":"1255","hashOfConfig":"668"},{"size":924,"mtime":1719826121504,"results":"1256","hashOfConfig":"668"},{"size":924,"mtime":1719826111217,"results":"1257","hashOfConfig":"668"},{"size":518,"mtime":1719388313028,"results":"1258","hashOfConfig":"668"},{"size":1040,"mtime":1719388313027,"results":"1259","hashOfConfig":"668"},{"size":3999,"mtime":1719388313028,"results":"1260","hashOfConfig":"668"},{"size":1069,"mtime":1719388313028,"results":"1261","hashOfConfig":"668"},{"size":255,"mtime":1719388313028,"results":"1262","hashOfConfig":"668"},{"size":5353,"mtime":1719388312936,"results":"1263","hashOfConfig":"668"},{"size":2009,"mtime":1719388312937,"results":"1264","hashOfConfig":"668"},{"size":428,"mtime":1719388313029,"results":"1265","hashOfConfig":"668"},{"size":426,"mtime":1719388313029,"results":"1266","hashOfConfig":"668"},{"size":2592,"mtime":1719388313029,"results":"1267","hashOfConfig":"668"},{"size":3858,"mtime":1719388313030,"results":"1268","hashOfConfig":"668"},{"size":4048,"mtime":1719388313030,"results":"1269","hashOfConfig":"668"},{"size":850,"mtime":1719388313030,"results":"1270","hashOfConfig":"668"},{"size":115,"mtime":1719388313030,"results":"1271","hashOfConfig":"668"},{"size":540,"mtime":1719388313031,"results":"1272","hashOfConfig":"668"},{"size":1941,"mtime":1719388313031,"results":"1273","hashOfConfig":"668"},{"size":401329,"mtime":1719388313033,"results":"1274","hashOfConfig":"668"},{"size":332370,"mtime":1719388313035,"results":"1275","hashOfConfig":"668"},{"size":1679735,"mtime":1719388313045,"results":"1276","hashOfConfig":"668"},{"size":168461,"mtime":1719388313046,"results":"1277","hashOfConfig":"668"},{"size":48,"mtime":1719388313046,"results":"1278","hashOfConfig":"668"},{"size":2176,"mtime":1719640022758,"results":"1279","hashOfConfig":"668"},{"size":6621,"mtime":1719999459148,"results":"1280","hashOfConfig":"668"},{"size":7243,"mtime":1720006902485,"results":"1281","hashOfConfig":"668"},{"size":2388,"mtime":1719993769900,"results":"1282","hashOfConfig":"668"},{"size":3726,"mtime":1719388313054,"results":"1283","hashOfConfig":"668"},{"size":3981,"mtime":1719388313054,"results":"1284","hashOfConfig":"668"},{"size":5553,"mtime":1719388313054,"results":"1285","hashOfConfig":"668"},{"size":4946,"mtime":1719388313054,"results":"1286","hashOfConfig":"668"},{"size":4090,"mtime":1719388313055,"results":"1287","hashOfConfig":"668"},{"size":3531,"mtime":1719388313055,"results":"1288","hashOfConfig":"668"},{"size":3440,"mtime":1719388313055,"results":"1289","hashOfConfig":"668"},{"size":2485,"mtime":1719388313056,"results":"1290","hashOfConfig":"668"},{"size":3815,"mtime":1719388313056,"results":"1291","hashOfConfig":"668"},{"size":4063,"mtime":1719388313056,"results":"1292","hashOfConfig":"668"},{"size":6530,"mtime":1719388313057,"results":"1293","hashOfConfig":"668"},{"size":3855,"mtime":1719388313057,"results":"1294","hashOfConfig":"668"},{"size":4193,"mtime":1719388313057,"results":"1295","hashOfConfig":"668"},{"size":2495,"mtime":1719388313058,"results":"1296","hashOfConfig":"668"},{"size":5668,"mtime":1719388313058,"results":"1297","hashOfConfig":"668"},{"size":4630,"mtime":1719388313058,"results":"1298","hashOfConfig":"668"},{"size":2172,"mtime":1719388313059,"results":"1299","hashOfConfig":"668"},{"size":3620,"mtime":1719388313059,"results":"1300","hashOfConfig":"668"},{"size":2518,"mtime":1719388313059,"results":"1301","hashOfConfig":"668"},{"size":2326,"mtime":1719388313060,"results":"1302","hashOfConfig":"668"},{"size":4313,"mtime":1719388313060,"results":"1303","hashOfConfig":"668"},{"size":2968,"mtime":1719388313060,"results":"1304","hashOfConfig":"668"},{"size":4138,"mtime":1719998332538,"results":"1305","hashOfConfig":"668"},{"size":481643,"mtime":1719998327418,"results":"1306","hashOfConfig":"668"},{"size":8698,"mtime":1719388313050,"results":"1307","hashOfConfig":"668"},{"size":64900,"mtime":1725859034900,"results":"1308","hashOfConfig":"668"},{"size":3261,"mtime":1719388313050,"results":"1309","hashOfConfig":"668"},{"size":1425,"mtime":1719388313050,"results":"1310","hashOfConfig":"668"},{"size":2737,"mtime":1719388313051,"results":"1311","hashOfConfig":"668"},{"size":15779,"mtime":1719751378762,"results":"1312","hashOfConfig":"668"},{"size":513,"mtime":1719388313051,"results":"1313","hashOfConfig":"668"},{"size":2850,"mtime":1719979927249,"results":"1314","hashOfConfig":"668"},{"size":16531,"mtime":1719923488462,"results":"1315","hashOfConfig":"668"},{"size":16963,"mtime":1719827603538,"results":"1316","hashOfConfig":"668"},{"size":19752,"mtime":1719827476589,"results":"1317","hashOfConfig":"668"},{"size":3948,"mtime":1719388313053,"results":"1318","hashOfConfig":"668"},{"size":3010,"mtime":1719560704896,"results":"1319","hashOfConfig":"668"},{"size":24745,"mtime":1719982053991,"results":"1320","hashOfConfig":"668"},{"size":1162,"mtime":1719388313061,"results":"1321","hashOfConfig":"668"},{"size":3836,"mtime":1719388313063,"results":"1322","hashOfConfig":"668"},{"size":3099,"mtime":1719388313064,"results":"1323","hashOfConfig":"668"},{"size":3189,"mtime":1719388313064,"results":"1324","hashOfConfig":"668"},{"size":3694,"mtime":1719388313064,"results":"1325","hashOfConfig":"668"},{"size":7730,"mtime":1719388313061,"results":"1326","hashOfConfig":"668"},{"size":7205,"mtime":1719388313061,"results":"1327","hashOfConfig":"668"},{"size":10626,"mtime":1719388313062,"results":"1328","hashOfConfig":"668"},{"size":9828,"mtime":1719388313062,"results":"1329","hashOfConfig":"668"},{"size":7367,"mtime":1719388313062,"results":"1330","hashOfConfig":"668"},{"size":8395,"mtime":1719388313063,"results":"1331","hashOfConfig":"668"},{"size":9497,"mtime":1719388313063,"results":"1332","hashOfConfig":"668"},{"size":1151,"mtime":1719388313065,"results":"1333","hashOfConfig":"668"},{"filePath":"1334","messages":"1335","suppressedMessages":"1336","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"pmtlon",{"filePath":"1337","messages":"1338","suppressedMessages":"1339","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1340","messages":"1341","suppressedMessages":"1342","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1343","messages":"1344","suppressedMessages":"1345","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1346","messages":"1347","suppressedMessages":"1348","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1349","messages":"1350","suppressedMessages":"1351","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1352","messages":"1353","suppressedMessages":"1354","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1355","messages":"1356","suppressedMessages":"1357","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1358","messages":"1359","suppressedMessages":"1360","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1361","messages":"1362","suppressedMessages":"1363","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1364","messages":"1365","suppressedMessages":"1366","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1367","messages":"1368","suppressedMessages":"1369","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1370","messages":"1371","suppressedMessages":"1372","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1373","messages":"1374","suppressedMessages":"1375","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1376","messages":"1377","suppressedMessages":"1378","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1379","messages":"1380","suppressedMessages":"1381","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1382","messages":"1383","suppressedMessages":"1384","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1385","messages":"1386","suppressedMessages":"1387","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1388","messages":"1389","suppressedMessages":"1390","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1391","messages":"1392","suppressedMessages":"1393","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1394","messages":"1395","suppressedMessages":"1396","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1397","messages":"1398","suppressedMessages":"1399","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1400","messages":"1401","suppressedMessages":"1402","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1403","messages":"1404","suppressedMessages":"1405","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1406","messages":"1407","suppressedMessages":"1408","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1409","messages":"1410","suppressedMessages":"1411","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1412","messages":"1413","suppressedMessages":"1414","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1415","messages":"1416","suppressedMessages":"1417","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1418","messages":"1419","suppressedMessages":"1420","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1421","messages":"1422","suppressedMessages":"1423","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1424","messages":"1425","suppressedMessages":"1426","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1427","messages":"1428","suppressedMessages":"1429","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1430","messages":"1431","suppressedMessages":"1432","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1433","messages":"1434","suppressedMessages":"1435","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1436","messages":"1437","suppressedMessages":"1438","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1439","messages":"1440","suppressedMessages":"1441","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1442","messages":"1443","suppressedMessages":"1444","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1445","messages":"1446","suppressedMessages":"1447","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1448","messages":"1449","suppressedMessages":"1450","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1451","messages":"1452","suppressedMessages":"1453","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1454","messages":"1455","suppressedMessages":"1456","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1457","messages":"1458","suppressedMessages":"1459","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1460","messages":"1461","suppressedMessages":"1462","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1463","messages":"1464","suppressedMessages":"1465","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1466","messages":"1467","suppressedMessages":"1468","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1469","messages":"1470","suppressedMessages":"1471","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1472","messages":"1473","suppressedMessages":"1474","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1475","messages":"1476","suppressedMessages":"1477","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1478","messages":"1479","suppressedMessages":"1480","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1481","messages":"1482","suppressedMessages":"1483","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1484","messages":"1485","suppressedMessages":"1486","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1487","messages":"1488","suppressedMessages":"1489","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1490","messages":"1491","suppressedMessages":"1492","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1493","messages":"1494","suppressedMessages":"1495","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1496","messages":"1497","suppressedMessages":"1498","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1499","messages":"1500","suppressedMessages":"1501","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1502","messages":"1503","suppressedMessages":"1504","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1505","messages":"1506","suppressedMessages":"1507","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1508","messages":"1509","suppressedMessages":"1510","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1511"},{"filePath":"1512","messages":"1513","suppressedMessages":"1514","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1515","messages":"1516","suppressedMessages":"1517","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1518","messages":"1519","suppressedMessages":"1520","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1521","messages":"1522","suppressedMessages":"1523","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1524","messages":"1525","suppressedMessages":"1526","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1527","messages":"1528","suppressedMessages":"1529","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1530","messages":"1531","suppressedMessages":"1532","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1533","messages":"1534","suppressedMessages":"1535","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1536","messages":"1537","suppressedMessages":"1538","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1539","messages":"1540","suppressedMessages":"1541","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1542","messages":"1543","suppressedMessages":"1544","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1545","messages":"1546","suppressedMessages":"1547","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1548","messages":"1549","suppressedMessages":"1550","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1551","messages":"1552","suppressedMessages":"1553","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1554","messages":"1555","suppressedMessages":"1556","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1557","messages":"1558","suppressedMessages":"1559","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1560","messages":"1561","suppressedMessages":"1562","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1563","messages":"1564","suppressedMessages":"1565","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1566","messages":"1567","suppressedMessages":"1568","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1569","messages":"1570","suppressedMessages":"1571","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1572","messages":"1573","suppressedMessages":"1574","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1575","messages":"1576","suppressedMessages":"1577","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1578","messages":"1579","suppressedMessages":"1580","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1581","messages":"1582","suppressedMessages":"1583","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1584","messages":"1585","suppressedMessages":"1586","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1587","messages":"1588","suppressedMessages":"1589","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1590","messages":"1591","suppressedMessages":"1592","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1593","messages":"1594","suppressedMessages":"1595","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1596","messages":"1597","suppressedMessages":"1598","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1599","messages":"1600","suppressedMessages":"1601","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1602","messages":"1603","suppressedMessages":"1604","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1605","messages":"1606","suppressedMessages":"1607","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1608","messages":"1609","suppressedMessages":"1610","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1611","messages":"1612","suppressedMessages":"1613","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1614","messages":"1615","suppressedMessages":"1616","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1617","messages":"1618","suppressedMessages":"1619","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1620","messages":"1621","suppressedMessages":"1622","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1623","messages":"1624","suppressedMessages":"1625","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1626","messages":"1627","suppressedMessages":"1628","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1629","messages":"1630","suppressedMessages":"1631","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1632","messages":"1633","suppressedMessages":"1634","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1635","messages":"1636","suppressedMessages":"1637","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1638","messages":"1639","suppressedMessages":"1640","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1641","messages":"1642","suppressedMessages":"1643","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1644","messages":"1645","suppressedMessages":"1646","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1647","messages":"1648","suppressedMessages":"1649","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1650","messages":"1651","suppressedMessages":"1652","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1653","messages":"1654","suppressedMessages":"1655","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1656","messages":"1657","suppressedMessages":"1658","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1659","messages":"1660","suppressedMessages":"1661","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1662","messages":"1663","suppressedMessages":"1664","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1665","messages":"1666","suppressedMessages":"1667","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1668","messages":"1669","suppressedMessages":"1670","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1671","messages":"1672","suppressedMessages":"1673","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1674","messages":"1675","suppressedMessages":"1676","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1677","messages":"1678","suppressedMessages":"1679","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1680","messages":"1681","suppressedMessages":"1682","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1683","messages":"1684","suppressedMessages":"1685","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1686","messages":"1687","suppressedMessages":"1688","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1689","messages":"1690","suppressedMessages":"1691","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1692","messages":"1693","suppressedMessages":"1694","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1695","messages":"1696","suppressedMessages":"1697","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1698","messages":"1699","suppressedMessages":"1700","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1701","messages":"1702","suppressedMessages":"1703","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1704","messages":"1705","suppressedMessages":"1706","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1707","messages":"1708","suppressedMessages":"1709","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1710","messages":"1711","suppressedMessages":"1712","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1713","messages":"1714","suppressedMessages":"1715","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1716","messages":"1717","suppressedMessages":"1718","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1719","messages":"1720","suppressedMessages":"1721","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1722","messages":"1723","suppressedMessages":"1724","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1725","messages":"1726","suppressedMessages":"1727","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1728","messages":"1729","suppressedMessages":"1730","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1731","messages":"1732","suppressedMessages":"1733","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1734","messages":"1735","suppressedMessages":"1736","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1737","messages":"1738","suppressedMessages":"1739","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1740","messages":"1741","suppressedMessages":"1742","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1743","messages":"1744","suppressedMessages":"1745","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1746","messages":"1747","suppressedMessages":"1748","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1749","messages":"1750","suppressedMessages":"1751","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1752","messages":"1753","suppressedMessages":"1754","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1755","messages":"1756","suppressedMessages":"1757","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1758","messages":"1759","suppressedMessages":"1760","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1761","messages":"1762","suppressedMessages":"1763","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1764","messages":"1765","suppressedMessages":"1766","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1767","messages":"1768","suppressedMessages":"1769","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1770","messages":"1771","suppressedMessages":"1772","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1773","messages":"1774","suppressedMessages":"1775","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1776","messages":"1777","suppressedMessages":"1778","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1779","messages":"1780","suppressedMessages":"1781","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1782","messages":"1783","suppressedMessages":"1784","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1785","messages":"1786","suppressedMessages":"1787","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1788","messages":"1789","suppressedMessages":"1790","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1791","messages":"1792","suppressedMessages":"1793","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1794","messages":"1795","suppressedMessages":"1796","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1797","messages":"1798","suppressedMessages":"1799","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1800"},{"filePath":"1801","messages":"1802","suppressedMessages":"1803","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1804","messages":"1805","suppressedMessages":"1806","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1807","messages":"1808","suppressedMessages":"1809","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1810","messages":"1811","suppressedMessages":"1812","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1813","messages":"1814","suppressedMessages":"1815","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1816","messages":"1817","suppressedMessages":"1818","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1819","messages":"1820","suppressedMessages":"1821","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1822","messages":"1823","suppressedMessages":"1824","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1825","messages":"1826","suppressedMessages":"1827","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1828","messages":"1829","suppressedMessages":"1830","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1831","messages":"1832","suppressedMessages":"1833","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1834","messages":"1835","suppressedMessages":"1836","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1837","messages":"1838","suppressedMessages":"1839","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1840","messages":"1841","suppressedMessages":"1842","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1843","messages":"1844","suppressedMessages":"1845","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1846","messages":"1847","suppressedMessages":"1848","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1849","messages":"1850","suppressedMessages":"1851","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1852","messages":"1853","suppressedMessages":"1854","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1855","messages":"1856","suppressedMessages":"1857","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1858","messages":"1859","suppressedMessages":"1860","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1861","messages":"1862","suppressedMessages":"1863","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1864","messages":"1865","suppressedMessages":"1866","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1867","messages":"1868","suppressedMessages":"1869","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1870","messages":"1871","suppressedMessages":"1872","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1873","messages":"1874","suppressedMessages":"1875","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1876","messages":"1877","suppressedMessages":"1878","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1879","messages":"1880","suppressedMessages":"1881","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1882","messages":"1883","suppressedMessages":"1884","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1885","messages":"1886","suppressedMessages":"1887","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1888","messages":"1889","suppressedMessages":"1890","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1891","messages":"1892","suppressedMessages":"1893","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1894","messages":"1895","suppressedMessages":"1896","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1897","messages":"1898","suppressedMessages":"1899","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1900","messages":"1901","suppressedMessages":"1902","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1903","messages":"1904","suppressedMessages":"1905","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1906","messages":"1907","suppressedMessages":"1908","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1909","messages":"1910","suppressedMessages":"1911","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1912","messages":"1913","suppressedMessages":"1914","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1915","messages":"1916","suppressedMessages":"1917","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1918","messages":"1919","suppressedMessages":"1920","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1921","messages":"1922","suppressedMessages":"1923","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1924","messages":"1925","suppressedMessages":"1926","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1927","messages":"1928","suppressedMessages":"1929","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1930","messages":"1931","suppressedMessages":"1932","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1933","messages":"1934","suppressedMessages":"1935","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1936","messages":"1937","suppressedMessages":"1938","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1939","messages":"1940","suppressedMessages":"1941","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1942","messages":"1943","suppressedMessages":"1944","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1945","messages":"1946","suppressedMessages":"1947","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1948","messages":"1949","suppressedMessages":"1950","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1951","messages":"1952","suppressedMessages":"1953","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1954","messages":"1955","suppressedMessages":"1956","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1957","messages":"1958","suppressedMessages":"1959","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1960","messages":"1961","suppressedMessages":"1962","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1963","messages":"1964","suppressedMessages":"1965","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1966","messages":"1967","suppressedMessages":"1968","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1969","messages":"1970","suppressedMessages":"1971","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1972","messages":"1973","suppressedMessages":"1974","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1975","messages":"1976","suppressedMessages":"1977","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1978","messages":"1979","suppressedMessages":"1980","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1981","messages":"1982","suppressedMessages":"1983","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1984","messages":"1985","suppressedMessages":"1986","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1987","messages":"1988","suppressedMessages":"1989","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1990","messages":"1991","suppressedMessages":"1992","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1993","messages":"1994","suppressedMessages":"1995","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1996","messages":"1997","suppressedMessages":"1998","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1999","messages":"2000","suppressedMessages":"2001","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2002","messages":"2003","suppressedMessages":"2004","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2005","messages":"2006","suppressedMessages":"2007","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2008","messages":"2009","suppressedMessages":"2010","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2011","messages":"2012","suppressedMessages":"2013","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2014","messages":"2015","suppressedMessages":"2016","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2017","messages":"2018","suppressedMessages":"2019","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2020","messages":"2021","suppressedMessages":"2022","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2023","messages":"2024","suppressedMessages":"2025","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2026","messages":"2027","suppressedMessages":"2028","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2029","messages":"2030","suppressedMessages":"2031","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2032","messages":"2033","suppressedMessages":"2034","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2035","messages":"2036","suppressedMessages":"2037","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2038","messages":"2039","suppressedMessages":"2040","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2041","messages":"2042","suppressedMessages":"2043","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2044","messages":"2045","suppressedMessages":"2046","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2047","messages":"2048","suppressedMessages":"2049","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2050","messages":"2051","suppressedMessages":"2052","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2053","messages":"2054","suppressedMessages":"2055","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2056","messages":"2057","suppressedMessages":"2058","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2059","messages":"2060","suppressedMessages":"2061","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2062","messages":"2063","suppressedMessages":"2064","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2065","messages":"2066","suppressedMessages":"2067","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2068","messages":"2069","suppressedMessages":"2070","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2071","messages":"2072","suppressedMessages":"2073","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2074","messages":"2075","suppressedMessages":"2076","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2077","messages":"2078","suppressedMessages":"2079","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2080","messages":"2081","suppressedMessages":"2082","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2083","messages":"2084","suppressedMessages":"2085","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2086","messages":"2087","suppressedMessages":"2088","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2089","messages":"2090","suppressedMessages":"2091","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2092","messages":"2093","suppressedMessages":"2094","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2095","messages":"2096","suppressedMessages":"2097","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2098","messages":"2099","suppressedMessages":"2100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2101","messages":"2102","suppressedMessages":"2103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2104","messages":"2105","suppressedMessages":"2106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2107","messages":"2108","suppressedMessages":"2109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2110","messages":"2111","suppressedMessages":"2112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2113","messages":"2114","suppressedMessages":"2115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2116","messages":"2117","suppressedMessages":"2118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2119","messages":"2120","suppressedMessages":"2121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2122","messages":"2123","suppressedMessages":"2124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2125","messages":"2126","suppressedMessages":"2127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2128","messages":"2129","suppressedMessages":"2130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2131","messages":"2132","suppressedMessages":"2133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2134","messages":"2135","suppressedMessages":"2136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2137","messages":"2138","suppressedMessages":"2139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2140","messages":"2141","suppressedMessages":"2142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2143","messages":"2144","suppressedMessages":"2145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2146","messages":"2147","suppressedMessages":"2148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2149","messages":"2150","suppressedMessages":"2151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2152","messages":"2153","suppressedMessages":"2154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2155","messages":"2156","suppressedMessages":"2157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2158","messages":"2159","suppressedMessages":"2160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2161","messages":"2162","suppressedMessages":"2163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2164","messages":"2165","suppressedMessages":"2166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2167","messages":"2168","suppressedMessages":"2169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2170","messages":"2171","suppressedMessages":"2172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2173","messages":"2174","suppressedMessages":"2175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2176","messages":"2177","suppressedMessages":"2178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2179","messages":"2180","suppressedMessages":"2181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2182","messages":"2183","suppressedMessages":"2184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2185","messages":"2186","suppressedMessages":"2187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2188","messages":"2189","suppressedMessages":"2190","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2191","messages":"2192","suppressedMessages":"2193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2194","messages":"2195","suppressedMessages":"2196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2197","messages":"2198","suppressedMessages":"2199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2200","messages":"2201","suppressedMessages":"2202","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2203","messages":"2204","suppressedMessages":"2205","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2206","messages":"2207","suppressedMessages":"2208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2209","messages":"2210","suppressedMessages":"2211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2212","messages":"2213","suppressedMessages":"2214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2215","messages":"2216","suppressedMessages":"2217","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2218","messages":"2219","suppressedMessages":"2220","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2221","messages":"2222","suppressedMessages":"2223","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2224","messages":"2225","suppressedMessages":"2226","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2227","messages":"2228","suppressedMessages":"2229","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2230","messages":"2231","suppressedMessages":"2232","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2233","messages":"2234","suppressedMessages":"2235","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2236","messages":"2237","suppressedMessages":"2238","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2239","messages":"2240","suppressedMessages":"2241","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2242","messages":"2243","suppressedMessages":"2244","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2245","messages":"2246","suppressedMessages":"2247","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2248","messages":"2249","suppressedMessages":"2250","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2251","messages":"2252","suppressedMessages":"2253","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2254","messages":"2255","suppressedMessages":"2256","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2257","messages":"2258","suppressedMessages":"2259","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2260","messages":"2261","suppressedMessages":"2262","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2263","messages":"2264","suppressedMessages":"2265","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2266","messages":"2267","suppressedMessages":"2268","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2269","messages":"2270","suppressedMessages":"2271","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2272","messages":"2273","suppressedMessages":"2274","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2275","messages":"2276","suppressedMessages":"2277","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2278","messages":"2279","suppressedMessages":"2280","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2281","messages":"2282","suppressedMessages":"2283","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2284","messages":"2285","suppressedMessages":"2286","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2287","messages":"2288","suppressedMessages":"2289","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2290","messages":"2291","suppressedMessages":"2292","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2293","messages":"2294","suppressedMessages":"2295","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2296","messages":"2297","suppressedMessages":"2298","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2299","messages":"2300","suppressedMessages":"2301","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2302","messages":"2303","suppressedMessages":"2304","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2305","messages":"2306","suppressedMessages":"2307","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2308","messages":"2309","suppressedMessages":"2310","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2311","messages":"2312","suppressedMessages":"2313","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2314","messages":"2315","suppressedMessages":"2316","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2317","messages":"2318","suppressedMessages":"2319","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2320","messages":"2321","suppressedMessages":"2322","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2323","messages":"2324","suppressedMessages":"2325","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2326","messages":"2327","suppressedMessages":"2328","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2329","messages":"2330","suppressedMessages":"2331","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2332","messages":"2333","suppressedMessages":"2334","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2335","messages":"2336","suppressedMessages":"2337","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2338","messages":"2339","suppressedMessages":"2340","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2341","messages":"2342","suppressedMessages":"2343","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2344","messages":"2345","suppressedMessages":"2346","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2347","messages":"2348","suppressedMessages":"2349","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2350","messages":"2351","suppressedMessages":"2352","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2353","messages":"2354","suppressedMessages":"2355","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2356","messages":"2357","suppressedMessages":"2358","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2359","messages":"2360","suppressedMessages":"2361","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2362","messages":"2363","suppressedMessages":"2364","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2365","messages":"2366","suppressedMessages":"2367","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2368","messages":"2369","suppressedMessages":"2370","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2371","messages":"2372","suppressedMessages":"2373","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2374","messages":"2375","suppressedMessages":"2376","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2377","messages":"2378","suppressedMessages":"2379","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2380","messages":"2381","suppressedMessages":"2382","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2383","messages":"2384","suppressedMessages":"2385","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2386","messages":"2387","suppressedMessages":"2388","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2389","messages":"2390","suppressedMessages":"2391","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2392","messages":"2393","suppressedMessages":"2394","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2395","messages":"2396","suppressedMessages":"2397","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2398","messages":"2399","suppressedMessages":"2400","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2401","messages":"2402","suppressedMessages":"2403","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2404","messages":"2405","suppressedMessages":"2406","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2407","messages":"2408","suppressedMessages":"2409","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2410","messages":"2411","suppressedMessages":"2412","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2413","messages":"2414","suppressedMessages":"2415","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2416","messages":"2417","suppressedMessages":"2418","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2419","messages":"2420","suppressedMessages":"2421","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2422","messages":"2423","suppressedMessages":"2424","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2425","messages":"2426","suppressedMessages":"2427","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2428","messages":"2429","suppressedMessages":"2430","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2431","messages":"2432","suppressedMessages":"2433","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2434","messages":"2435","suppressedMessages":"2436","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2437","messages":"2438","suppressedMessages":"2439","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2440","messages":"2441","suppressedMessages":"2442","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2443","messages":"2444","suppressedMessages":"2445","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2446","messages":"2447","suppressedMessages":"2448","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2449","messages":"2450","suppressedMessages":"2451","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2452","messages":"2453","suppressedMessages":"2454","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2455","messages":"2456","suppressedMessages":"2457","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2458","messages":"2459","suppressedMessages":"2460","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2461","messages":"2462","suppressedMessages":"2463","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2464","messages":"2465","suppressedMessages":"2466","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2467","messages":"2468","suppressedMessages":"2469","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2470","messages":"2471","suppressedMessages":"2472","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2473","messages":"2474","suppressedMessages":"2475","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2476","messages":"2477","suppressedMessages":"2478","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2479","messages":"2480","suppressedMessages":"2481","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2482","messages":"2483","suppressedMessages":"2484","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2485","messages":"2486","suppressedMessages":"2487","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2488","messages":"2489","suppressedMessages":"2490","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2491","messages":"2492","suppressedMessages":"2493","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2494","messages":"2495","suppressedMessages":"2496","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2497","messages":"2498","suppressedMessages":"2499","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2500","messages":"2501","suppressedMessages":"2502","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2503","messages":"2504","suppressedMessages":"2505","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2506","messages":"2507","suppressedMessages":"2508","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2509","messages":"2510","suppressedMessages":"2511","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2512","messages":"2513","suppressedMessages":"2514","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2515","messages":"2516","suppressedMessages":"2517","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2518","messages":"2519","suppressedMessages":"2520","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2521","messages":"2522","suppressedMessages":"2523","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2524","messages":"2525","suppressedMessages":"2526","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2527","messages":"2528","suppressedMessages":"2529","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2530","messages":"2531","suppressedMessages":"2532","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2533","messages":"2534","suppressedMessages":"2535","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2536","messages":"2537","suppressedMessages":"2538","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2539","messages":"2540","suppressedMessages":"2541","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2542","messages":"2543","suppressedMessages":"2544","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2545","messages":"2546","suppressedMessages":"2547","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2548","messages":"2549","suppressedMessages":"2550","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2551","messages":"2552","suppressedMessages":"2553","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2554","messages":"2555","suppressedMessages":"2556","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2557","messages":"2558","suppressedMessages":"2559","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2560","messages":"2561","suppressedMessages":"2562","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2563","messages":"2564","suppressedMessages":"2565","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2566","messages":"2567","suppressedMessages":"2568","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2569","messages":"2570","suppressedMessages":"2571","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2572","messages":"2573","suppressedMessages":"2574","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2575","messages":"2576","suppressedMessages":"2577","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2578","messages":"2579","suppressedMessages":"2580","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2581","messages":"2582","suppressedMessages":"2583","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2584","messages":"2585","suppressedMessages":"2586","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2587","messages":"2588","suppressedMessages":"2589","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2590","messages":"2591","suppressedMessages":"2592","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2593","messages":"2594","suppressedMessages":"2595","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2596","messages":"2597","suppressedMessages":"2598","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2599","messages":"2600","suppressedMessages":"2601","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2602","messages":"2603","suppressedMessages":"2604","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2605","messages":"2606","suppressedMessages":"2607","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2608","messages":"2609","suppressedMessages":"2610","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2611","messages":"2612","suppressedMessages":"2613","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2614","messages":"2615","suppressedMessages":"2616","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2617","messages":"2618","suppressedMessages":"2619","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2620","messages":"2621","suppressedMessages":"2622","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2623","messages":"2624","suppressedMessages":"2625","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2626","messages":"2627","suppressedMessages":"2628","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2629","messages":"2630","suppressedMessages":"2631","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2632","messages":"2633","suppressedMessages":"2634","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2635","messages":"2636","suppressedMessages":"2637","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2638","messages":"2639","suppressedMessages":"2640","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2641","messages":"2642","suppressedMessages":"2643","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2644","messages":"2645","suppressedMessages":"2646","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2647","messages":"2648","suppressedMessages":"2649","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2650","messages":"2651","suppressedMessages":"2652","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2653","messages":"2654","suppressedMessages":"2655","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2656","messages":"2657","suppressedMessages":"2658","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2659","messages":"2660","suppressedMessages":"2661","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2662","messages":"2663","suppressedMessages":"2664","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2665","messages":"2666","suppressedMessages":"2667","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2668","messages":"2669","suppressedMessages":"2670","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2671","messages":"2672","suppressedMessages":"2673","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2674","messages":"2675","suppressedMessages":"2676","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2677","messages":"2678","suppressedMessages":"2679","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2680","messages":"2681","suppressedMessages":"2682","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2683","messages":"2684","suppressedMessages":"2685","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2686","messages":"2687","suppressedMessages":"2688","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2689","messages":"2690","suppressedMessages":"2691","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2692","messages":"2693","suppressedMessages":"2694","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2695","messages":"2696","suppressedMessages":"2697","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2698","messages":"2699","suppressedMessages":"2700","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2701","messages":"2702","suppressedMessages":"2703","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2704","messages":"2705","suppressedMessages":"2706","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2707","messages":"2708","suppressedMessages":"2709","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2710","messages":"2711","suppressedMessages":"2712","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2713","messages":"2714","suppressedMessages":"2715","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2716","messages":"2717","suppressedMessages":"2718","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2719","messages":"2720","suppressedMessages":"2721","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2722","messages":"2723","suppressedMessages":"2724","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2725","messages":"2726","suppressedMessages":"2727","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2728","messages":"2729","suppressedMessages":"2730","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2731","messages":"2732","suppressedMessages":"2733","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2734","messages":"2735","suppressedMessages":"2736","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2737","messages":"2738","suppressedMessages":"2739","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2740","messages":"2741","suppressedMessages":"2742","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2743","messages":"2744","suppressedMessages":"2745","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2746","messages":"2747","suppressedMessages":"2748","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2749","messages":"2750","suppressedMessages":"2751","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2752","messages":"2753","suppressedMessages":"2754","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2755","messages":"2756","suppressedMessages":"2757","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2758","messages":"2759","suppressedMessages":"2760","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2761","messages":"2762","suppressedMessages":"2763","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2764","messages":"2765","suppressedMessages":"2766","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2767","messages":"2768","suppressedMessages":"2769","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2770","messages":"2771","suppressedMessages":"2772","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2773","messages":"2774","suppressedMessages":"2775","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2776","messages":"2777","suppressedMessages":"2778","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2779","messages":"2780","suppressedMessages":"2781","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2782","messages":"2783","suppressedMessages":"2784","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2785","messages":"2786","suppressedMessages":"2787","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2788","messages":"2789","suppressedMessages":"2790","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2791","messages":"2792","suppressedMessages":"2793","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2794","messages":"2795","suppressedMessages":"2796","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2797","messages":"2798","suppressedMessages":"2799","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2800","messages":"2801","suppressedMessages":"2802","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2803","messages":"2804","suppressedMessages":"2805","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2806","messages":"2807","suppressedMessages":"2808","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2809","messages":"2810","suppressedMessages":"2811","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2812","messages":"2813","suppressedMessages":"2814","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2815","messages":"2816","suppressedMessages":"2817","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2818","messages":"2819","suppressedMessages":"2820","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2821","messages":"2822","suppressedMessages":"2823","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2824","messages":"2825","suppressedMessages":"2826","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2827","messages":"2828","suppressedMessages":"2829","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2830","messages":"2831","suppressedMessages":"2832","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2833","messages":"2834","suppressedMessages":"2835","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2836","messages":"2837","suppressedMessages":"2838","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2839","messages":"2840","suppressedMessages":"2841","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2842","messages":"2843","suppressedMessages":"2844","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2845","messages":"2846","suppressedMessages":"2847","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2848","messages":"2849","suppressedMessages":"2850","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2851","messages":"2852","suppressedMessages":"2853","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2854","messages":"2855","suppressedMessages":"2856","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2857","messages":"2858","suppressedMessages":"2859","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2860","messages":"2861","suppressedMessages":"2862","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2863","messages":"2864","suppressedMessages":"2865","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2866","messages":"2867","suppressedMessages":"2868","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2869","messages":"2870","suppressedMessages":"2871","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2872","messages":"2873","suppressedMessages":"2874","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2875","messages":"2876","suppressedMessages":"2877","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2878","messages":"2879","suppressedMessages":"2880","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2881","messages":"2882","suppressedMessages":"2883","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2884","messages":"2885","suppressedMessages":"2886","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2887","messages":"2888","suppressedMessages":"2889","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2890","messages":"2891","suppressedMessages":"2892","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2893","messages":"2894","suppressedMessages":"2895","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2896","messages":"2897","suppressedMessages":"2898","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2899","messages":"2900","suppressedMessages":"2901","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2902","messages":"2903","suppressedMessages":"2904","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2905","messages":"2906","suppressedMessages":"2907","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2908","messages":"2909","suppressedMessages":"2910","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2911","messages":"2912","suppressedMessages":"2913","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2914","messages":"2915","suppressedMessages":"2916","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2917","messages":"2918","suppressedMessages":"2919","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2920","messages":"2921","suppressedMessages":"2922","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2923","messages":"2924","suppressedMessages":"2925","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2926","messages":"2927","suppressedMessages":"2928","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2929","messages":"2930","suppressedMessages":"2931","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2932","messages":"2933","suppressedMessages":"2934","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2935","messages":"2936","suppressedMessages":"2937","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2938","messages":"2939","suppressedMessages":"2940","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2941","messages":"2942","suppressedMessages":"2943","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2944","messages":"2945","suppressedMessages":"2946","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2947","messages":"2948","suppressedMessages":"2949","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2950","messages":"2951","suppressedMessages":"2952","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2953","messages":"2954","suppressedMessages":"2955","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2956","messages":"2957","suppressedMessages":"2958","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2959","messages":"2960","suppressedMessages":"2961","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2962","messages":"2963","suppressedMessages":"2964","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2965","messages":"2966","suppressedMessages":"2967","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2968","messages":"2969","suppressedMessages":"2970","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2971","messages":"2972","suppressedMessages":"2973","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2974","messages":"2975","suppressedMessages":"2976","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2977","messages":"2978","suppressedMessages":"2979","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2980","messages":"2981","suppressedMessages":"2982","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2983","messages":"2984","suppressedMessages":"2985","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2986","messages":"2987","suppressedMessages":"2988","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2989","messages":"2990","suppressedMessages":"2991","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2992","messages":"2993","suppressedMessages":"2994","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2995","messages":"2996","suppressedMessages":"2997","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2998","messages":"2999","suppressedMessages":"3000","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3001","messages":"3002","suppressedMessages":"3003","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3004","messages":"3005","suppressedMessages":"3006","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3007","messages":"3008","suppressedMessages":"3009","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3010","messages":"3011","suppressedMessages":"3012","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3013","messages":"3014","suppressedMessages":"3015","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3016","messages":"3017","suppressedMessages":"3018","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3019","messages":"3020","suppressedMessages":"3021","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3022","messages":"3023","suppressedMessages":"3024","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3025","messages":"3026","suppressedMessages":"3027","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3028","messages":"3029","suppressedMessages":"3030","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3031","messages":"3032","suppressedMessages":"3033","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3034","messages":"3035","suppressedMessages":"3036","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3037","messages":"3038","suppressedMessages":"3039","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3040"},{"filePath":"3041","messages":"3042","suppressedMessages":"3043","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3044"},{"filePath":"3045","messages":"3046","suppressedMessages":"3047","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3040"},{"filePath":"3048","messages":"3049","suppressedMessages":"3050","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3051"},{"filePath":"3052","messages":"3053","suppressedMessages":"3054","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3055"},{"filePath":"3056","messages":"3057","suppressedMessages":"3058","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3059"},{"filePath":"3060","messages":"3061","suppressedMessages":"3062","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3063"},{"filePath":"3064","messages":"3065","suppressedMessages":"3066","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3067"},{"filePath":"3068","messages":"3069","suppressedMessages":"3070","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3071","messages":"3072","suppressedMessages":"3073","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3074","messages":"3075","suppressedMessages":"3076","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3077","messages":"3078","suppressedMessages":"3079","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3080","messages":"3081","suppressedMessages":"3082","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3083","messages":"3084","suppressedMessages":"3085","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3086","messages":"3087","suppressedMessages":"3088","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3089","messages":"3090","suppressedMessages":"3091","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3092","messages":"3093","suppressedMessages":"3094","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3095","messages":"3096","suppressedMessages":"3097","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3098","messages":"3099","suppressedMessages":"3100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3101","messages":"3102","suppressedMessages":"3103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3104","messages":"3105","suppressedMessages":"3106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3107","messages":"3108","suppressedMessages":"3109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3110","messages":"3111","suppressedMessages":"3112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3113","messages":"3114","suppressedMessages":"3115","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3116"},{"filePath":"3117","messages":"3118","suppressedMessages":"3119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3120","messages":"3121","suppressedMessages":"3122","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3123"},{"filePath":"3124","messages":"3125","suppressedMessages":"3126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3127","messages":"3128","suppressedMessages":"3129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3130","messages":"3131","suppressedMessages":"3132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3133","messages":"3134","suppressedMessages":"3135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3136","messages":"3137","suppressedMessages":"3138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3139","messages":"3140","suppressedMessages":"3141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3142","messages":"3143","suppressedMessages":"3144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3145","messages":"3146","suppressedMessages":"3147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3148","messages":"3149","suppressedMessages":"3150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3151","messages":"3152","suppressedMessages":"3153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3154","messages":"3155","suppressedMessages":"3156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3157","messages":"3158","suppressedMessages":"3159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3160","messages":"3161","suppressedMessages":"3162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3163","messages":"3164","suppressedMessages":"3165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3166","messages":"3167","suppressedMessages":"3168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3169","messages":"3170","suppressedMessages":"3171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3172","messages":"3173","suppressedMessages":"3174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3175","messages":"3176","suppressedMessages":"3177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3178","messages":"3179","suppressedMessages":"3180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3181","messages":"3182","suppressedMessages":"3183","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3184"},{"filePath":"3185","messages":"3186","suppressedMessages":"3187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3188","messages":"3189","suppressedMessages":"3190","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3191","messages":"3192","suppressedMessages":"3193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3194","messages":"3195","suppressedMessages":"3196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3197","messages":"3198","suppressedMessages":"3199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3200","messages":"3201","suppressedMessages":"3202","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3203","messages":"3204","suppressedMessages":"3205","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3206","messages":"3207","suppressedMessages":"3208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3209","messages":"3210","suppressedMessages":"3211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3212","messages":"3213","suppressedMessages":"3214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3215","messages":"3216","suppressedMessages":"3217","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3218","messages":"3219","suppressedMessages":"3220","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3221","messages":"3222","suppressedMessages":"3223","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3224","messages":"3225","suppressedMessages":"3226","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3227","messages":"3228","suppressedMessages":"3229","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3230","messages":"3231","suppressedMessages":"3232","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3233","messages":"3234","suppressedMessages":"3235","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3236","messages":"3237","suppressedMessages":"3238","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3239","messages":"3240","suppressedMessages":"3241","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3242","messages":"3243","suppressedMessages":"3244","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3245","messages":"3246","suppressedMessages":"3247","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3248","messages":"3249","suppressedMessages":"3250","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3251","messages":"3252","suppressedMessages":"3253","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3254","messages":"3255","suppressedMessages":"3256","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3257","messages":"3258","suppressedMessages":"3259","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3260","messages":"3261","suppressedMessages":"3262","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3263"},{"filePath":"3264","messages":"3265","suppressedMessages":"3266","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3267"},{"filePath":"3268","messages":"3269","suppressedMessages":"3270","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"3271","messages":"3272","suppressedMessages":"3273","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3274","messages":"3275","suppressedMessages":"3276","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3277","messages":"3278","suppressedMessages":"3279","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3280"},{"filePath":"3281","messages":"3282","suppressedMessages":"3283","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3284","messages":"3285","suppressedMessages":"3286","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3287","messages":"3288","suppressedMessages":"3289","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3290"},{"filePath":"3291","messages":"3292","suppressedMessages":"3293","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3294"},{"filePath":"3295","messages":"3296","suppressedMessages":"3297","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3298"},{"filePath":"3299","messages":"3300","suppressedMessages":"3301","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3302"},{"filePath":"3303","messages":"3304","suppressedMessages":"3305","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3306","messages":"3307","suppressedMessages":"3308","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3309","messages":"3310","suppressedMessages":"3311","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3312"},{"filePath":"3313","messages":"3314","suppressedMessages":"3315","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3316","messages":"3317","suppressedMessages":"3318","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3319","messages":"3320","suppressedMessages":"3321","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3322","messages":"3323","suppressedMessages":"3324","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3325","messages":"3326","suppressedMessages":"3327","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3328","messages":"3329","suppressedMessages":"3330","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3331","messages":"3332","suppressedMessages":"3333","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3334","messages":"3335","suppressedMessages":"3336","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3337","messages":"3338","suppressedMessages":"3339","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3340","messages":"3341","suppressedMessages":"3342","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3343","messages":"3344","suppressedMessages":"3345","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3346","messages":"3347","suppressedMessages":"3348","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3349","messages":"3350","suppressedMessages":"3351","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\auth\\AclGuard.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\auth\\AuthGuard.tsx",[],["3352"],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\auth\\GuestGuard.tsx",[],["3353"],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\card-snippet\\index.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\card-snippet\\types.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\card-statistics\\card-stats-horizontal\\index.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\card-statistics\\card-stats-vertical\\index.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\card-statistics\\card-stats-with-image\\index.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\card-statistics\\types.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\custom-checkbox\\basic\\index.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\custom-checkbox\\icons\\index.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\custom-checkbox\\image\\index.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\custom-checkbox\\types.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\custom-radio\\basic\\index.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\custom-radio\\icons\\index.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\custom-radio\\image\\index.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\custom-radio\\types.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\customizer\\index.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\icon\\index.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\mui\\avatar\\index.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\mui\\avatar\\types.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\mui\\badge\\index.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\mui\\badge\\types.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\mui\\chip\\index.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\mui\\chip\\types.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\mui\\timeline-dot\\index.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\mui\\timeline-dot\\types.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\option-menu\\index.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\option-menu\\types.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\page-header\\index.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\page-header\\types.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\plan-details\\types.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\react-apexcharts\\index.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\react-draft-wysiwyg\\index.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\repeater\\index.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\repeater\\types.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\scroll-to-top\\index.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\sidebar\\index.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\sidebar\\type.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\spinner\\index.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\components\\window-wrapper\\index.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\context\\settingsContext.tsx",[],["3354","3355"],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\hooks\\useBgColor.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\hooks\\useClipboard.tsx",[],["3356"],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\hooks\\useSettings.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\layouts\\BlankLayout.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\layouts\\BlankLayoutWithAppBar.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\layouts\\components\\blank-layout-with-appBar\\index.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\layouts\\components\\horizontal\\app-bar-content\\index.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\layouts\\components\\horizontal\\navigation\\HorizontalNavGroup.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\layouts\\components\\horizontal\\navigation\\HorizontalNavItems.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\layouts\\components\\horizontal\\navigation\\HorizontalNavLink.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\layouts\\components\\horizontal\\navigation\\index.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\layouts\\components\\shared-components\\footer\\FooterContent.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\layouts\\components\\shared-components\\footer\\index.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\layouts\\components\\shared-components\\ModeToggler.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\layouts\\components\\shared-components\\NotificationDropdown.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\layouts\\components\\shared-components\\ShortcutsDropdown.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\layouts\\components\\shared-components\\UserDropdown.tsx",["3357","3358"],[],"// ** React Imports\r\nimport { useState, useEffect, SyntheticEvent, Fragment } from 'react'\r\n\r\n// ** Next Import\r\nimport { useRouter } from 'next/router'\r\n\r\n// ** MUI Imports\r\nimport Box from '@mui/material/Box'\r\nimport Menu from '@mui/material/Menu'\r\nimport Badge from '@mui/material/Badge'\r\nimport Avatar from '@mui/material/Avatar'\r\nimport Divider from '@mui/material/Divider'\r\nimport MenuItem from '@mui/material/MenuItem'\r\nimport { styled } from '@mui/material/styles'\r\nimport Typography from '@mui/material/Typography'\r\n\r\n// ** Icon Imports\r\nimport Icon from 'src/@core/components/icon'\r\n\r\n// ** Context\r\nimport { useAuth } from 'src/hooks/useAuth'\r\n\r\n// ** Config\r\nimport authConfig from 'src/configs/auth'\r\nimport axios from 'axios'\r\n\r\n// ** Type Imports\r\nimport { Settings } from 'src/@core/context/settingsContext'\r\n\r\ninterface Props {\r\n  settings: Settings\r\n}\r\n\r\n// ** Styled Components\r\nconst BadgeContentSpan = styled('span')(({ theme }) => ({\r\n  width: 8,\r\n  height: 8,\r\n  borderRadius: '50%',\r\n  backgroundColor: theme.palette.success.main,\r\n  boxShadow: `0 0 0 2px ${theme.palette.background.paper}`\r\n}))\r\n\r\nconst UserDropdown = (props: Props) => {\r\n  // ** Props\r\n  const { settings } = props\r\n\r\n  // ** States\r\n  const [anchorEl, setAnchorEl] = useState<Element | null>(null)\r\n  const [isLogout, setIsLogout] = useState<boolean>(false)\r\n\r\n  // ** Hooks\r\n  const router = useRouter()\r\n  const auth = useAuth()\r\n  const logout = auth.logout\r\n  const refresh = auth.refresh\r\n  const user:any = auth.user\r\n\r\n  // ** Vars\r\n  const { direction } = settings\r\n\r\n  useEffect(() => {\r\n    const refreshUserToken = async () => {\r\n      try {\r\n        if (user) {\r\n          refresh(user)\r\n        }\r\n      } \r\n      catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    };\r\n    \r\n    const intervalId = setInterval(refreshUserToken, 30000);\r\n\r\n    return () => clearInterval(intervalId);\r\n  }, []); \r\n\r\n  const handleDropdownOpen = (event: SyntheticEvent) => {\r\n    setAnchorEl(event.currentTarget)\r\n  }\r\n\r\n  const handleDropdownClose = (url?: string) => {\r\n    if(url=='/apps/200' && user.type==\"Student\")  {\r\n      url = '/apps/203'\r\n    }\r\n    if(url=='/apps/201' && user.type==\"Student\")  {\r\n      url = '/apps/202'\r\n    }    \r\n    if (url) {\r\n      router.push(url)\r\n    }\r\n    setAnchorEl(null)\r\n  }\r\n\r\n  const styles = {\r\n    py: 2,\r\n    px: 4,\r\n    width: '100%',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    color: 'text.primary',\r\n    textDecoration: 'none',\r\n    '& svg': {\r\n      mr: 2,\r\n      fontSize: '1.375rem',\r\n      color: 'text.primary'\r\n    }\r\n  }\r\n\r\n  const handleLogout = () => {\r\n    setIsLogout(true)\r\n    logout()\r\n    handleDropdownClose()\r\n  }\r\n\r\n  const storedToken = window.localStorage.getItem(authConfig.storageTokenKeyName)!\r\n  useEffect(() => {\r\n    if(isLogout) {\r\n      axios\r\n      .get(authConfig.logoutEndpoint, { headers: { Authorization: storedToken} })\r\n      .then()\r\n    }\r\n  }, [isLogout])\r\n\r\n  return (\r\n    <Fragment>\r\n      <Badge\r\n        overlap='circular'\r\n        onClick={handleDropdownOpen}\r\n        sx={{ ml: 2, cursor: 'pointer' }}\r\n        badgeContent={<BadgeContentSpan />}\r\n        anchorOrigin={{\r\n          vertical: 'bottom',\r\n          horizontal: 'right'\r\n        }}\r\n      >\r\n        <Avatar\r\n          alt={user.USER_NAME}\r\n          onClick={handleDropdownOpen}\r\n          sx={{ width: 40, height: 40 }}\r\n          src={authConfig.backEndApiHost + user.avatar}\r\n        />\r\n      </Badge>\r\n      {authConfig.themeName==\"厦门技师\"?\r\n        <Menu\r\n          anchorEl={anchorEl}\r\n          open={Boolean(anchorEl)}\r\n          onClose={() => handleDropdownClose()}\r\n          sx={{ '& .MuiMenu-paper': { width: 230, mt: 4 } }}\r\n          anchorOrigin={{ vertical: 'bottom', horizontal: direction === 'ltr' ? 'right' : 'left' }}\r\n          transformOrigin={{ vertical: 'top', horizontal: direction === 'ltr' ? 'right' : 'left' }}\r\n        >\r\n          <Box sx={{ pt: 2, pb: 3, px: 4 }}>\r\n            <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n              <Badge\r\n                overlap='circular'\r\n                badgeContent={<BadgeContentSpan />}\r\n                anchorOrigin={{\r\n                  vertical: 'bottom',\r\n                  horizontal: 'right'\r\n                }}\r\n              >\r\n                <Avatar alt={user.USER_NAME} src={authConfig.backEndApiHost + user.avatar} sx={{ width: '2.5rem', height: '2.5rem' }} />\r\n              </Badge>\r\n              <Box sx={{ display: 'flex', ml: 3, alignItems: 'flex-start', flexDirection: 'column' }}>\r\n                <Typography sx={{ fontWeight: 600 }}>{user.USER_NAME}</Typography>\r\n                <Typography variant='body2' sx={{ fontSize: '0.8rem', color: 'text.disabled' }}>\r\n                {user.role}\r\n                </Typography>\r\n              </Box>\r\n            </Box>\r\n          </Box>\r\n\r\n          <Divider sx={{ mt: '0 !important' }} />\r\n          \r\n          <MenuItem\r\n            onClick={handleLogout}\r\n            sx={{ py: 2, '& svg': { mr: 2, fontSize: '1.375rem', color: 'text.primary' } }}\r\n          >\r\n            <Icon icon='mdi:logout-variant' />\r\n            退出\r\n          </MenuItem>\r\n\r\n        </Menu>\r\n        :\r\n        <Menu\r\n          anchorEl={anchorEl}\r\n          open={Boolean(anchorEl)}\r\n          onClose={() => handleDropdownClose()}\r\n          sx={{ '& .MuiMenu-paper': { width: 230, mt: 4 } }}\r\n          anchorOrigin={{ vertical: 'bottom', horizontal: direction === 'ltr' ? 'right' : 'left' }}\r\n          transformOrigin={{ vertical: 'top', horizontal: direction === 'ltr' ? 'right' : 'left' }}\r\n        >\r\n          <Box sx={{ pt: 2, pb: 3, px: 4 }}>\r\n            <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n              <Badge\r\n                overlap='circular'\r\n                badgeContent={<BadgeContentSpan />}\r\n                anchorOrigin={{\r\n                  vertical: 'bottom',\r\n                  horizontal: 'right'\r\n                }}\r\n              >\r\n                <Avatar alt={user.USER_NAME} src={authConfig.backEndApiHost + user.avatar} sx={{ width: '2.5rem', height: '2.5rem' }} />\r\n              </Badge>\r\n              <Box sx={{ display: 'flex', ml: 3, alignItems: 'flex-start', flexDirection: 'column' }}>\r\n                <Typography sx={{ fontWeight: 600 }}>{user.USER_NAME}</Typography>\r\n                <Typography variant='body2' sx={{ fontSize: '0.8rem', color: 'text.disabled' }}>\r\n                {user.role}\r\n                </Typography>\r\n              </Box>\r\n            </Box>\r\n          </Box>\r\n\r\n          <Divider sx={{ mt: '0 !important' }} />\r\n          \r\n          <MenuItem sx={{ p: 0 }} onClick={() => handleDropdownClose('/user/password')}>\r\n            <Box sx={styles}>\r\n              <Icon icon='mdi:security' />\r\n              修改密码\r\n            </Box>\r\n          </MenuItem>\r\n          <Divider />\r\n          <MenuItem sx={{ p: 0 }} onClick={() => handleDropdownClose('/apps/200')}>\r\n            <Box sx={styles}>\r\n              <Icon icon='mdi:database-plus' />\r\n              操作日志\r\n            </Box>\r\n          </MenuItem>\r\n          <Divider />\r\n          <MenuItem sx={{ p: 0 }} onClick={() => handleDropdownClose('/apps/201')}>\r\n            <Box sx={styles}>\r\n              <Icon icon='mdi:tumblr-reblog' />\r\n              登录日志\r\n            </Box>\r\n          </MenuItem>\r\n          \r\n          <Divider />\r\n\r\n          <MenuItem\r\n            onClick={handleLogout}\r\n            sx={{ py: 2, '& svg': { mr: 2, fontSize: '1.375rem', color: 'text.primary' } }}\r\n          >\r\n            <Icon icon='mdi:logout-variant' />\r\n            退出\r\n          </MenuItem>\r\n          \r\n        </Menu>\r\n      }\r\n      \r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default UserDropdown\r\n","D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\layouts\\components\\vertical\\appBar\\index.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\layouts\\components\\vertical\\navigation\\Drawer.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\layouts\\components\\vertical\\navigation\\index.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\layouts\\components\\vertical\\navigation\\VerticalNavGroup.tsx",[],["3359","3360","3361"],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\layouts\\components\\vertical\\navigation\\VerticalNavHeader.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\layouts\\components\\vertical\\navigation\\VerticalNavItems.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\layouts\\components\\vertical\\navigation\\VerticalNavLink.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\layouts\\components\\vertical\\navigation\\VerticalNavSectionTitle.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\layouts\\Layout.tsx",[],["3362"],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\layouts\\types.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\layouts\\utils.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\layouts\\VerticalLayout.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\styles\\libs\\fullcalendar\\index.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\styles\\libs\\keen-slider\\index.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\styles\\libs\\react-apexcharts\\index.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\styles\\libs\\react-cleave\\index.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\styles\\libs\\react-credit-cards\\index.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\styles\\libs\\react-datepicker\\index.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\styles\\libs\\react-draft-wysiwyg\\index.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\styles\\libs\\react-dropzone\\index.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\styles\\libs\\react-hot-toast\\index.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\styles\\libs\\recharts\\index.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\styles\\mui\\stepper.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\breakpoints\\index.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\globalStyles.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\accordion.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\alerts.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\autocomplete.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\avatars.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\backdrop.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\button.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\card.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\chip.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\dataGrid.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\dialog.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\divider.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\index.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\input.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\link.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\list.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\menu.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\pagination.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\paper.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\popover.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\rating.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\select.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\snackbar.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\switches.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\table.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\tabs.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\timeline.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\toggleButton.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\tooltip.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\overrides\\typography.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\palette\\index.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\shadows\\index.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\spacing\\index.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\ThemeComponent.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\ThemeOptions.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\types.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\theme\\typography\\index.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\utils\\create-emotion-cache.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\utils\\format.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\utils\\get-daterange.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\utils\\get-initials.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\utils\\hex-to-rgba.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\utils\\is-float.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\utils\\rgba-to-hex.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@core\\utils\\types.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\@fake-db\\types.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\configs\\acl.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\configs\\auth.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\configs\\firebase.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\configs\\functions.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\configs\\themeConfig.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\context\\AuthContext.tsx",[],["3363"],"D:\\MYXINLI\\SchoolMentalHealth\\src\\context\\FirebaseContext.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\context\\types.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\hooks\\useAuth.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\hooks\\useFirebaseAuth.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\iconify-bundle\\bundle-icons-react.d.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\iconify-bundle\\bundle-icons-react.js",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\iconify-bundle\\bundle-icons-react.ts",[],["3364","3365","3366"],"D:\\MYXINLI\\SchoolMentalHealth\\src\\iconify-bundle\\icons-bundle-react.js",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\layouts\\components\\acl\\Can.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\layouts\\components\\acl\\CanViewNavGroup.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\layouts\\components\\acl\\CanViewNavLink.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\layouts\\components\\acl\\CanViewNavSectionTitle.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\layouts\\components\\Autocomplete.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\layouts\\components\\Direction.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\layouts\\components\\horizontal\\AppBarContent.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\layouts\\components\\horizontal\\ServerSideNavItems.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\layouts\\components\\Translations.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\layouts\\components\\UserIcon.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\layouts\\components\\vertical\\AppBarContent.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\layouts\\components\\vertical\\ServerSideNavItems.tsx",["3367"],[],"// ** React Imports\r\nimport { useEffect, useState } from 'react'\r\n\r\n// ** Axios Import\r\nimport axios from 'axios'\r\n\r\n\r\n// ** Config\r\nimport authConfig from 'src/configs/auth'\r\nimport { useRouter } from 'next/router'\r\n\r\n// ** Type Import\r\nimport { VerticalNavItemsType } from 'src/@core/layouts/types'\r\nimport { DecryptDataAES256GCM } from 'src/configs/functions'\r\n\r\nconst ServerSideNavItems = () => {\r\n  // ** State\r\n  const [menuItems, setMenuItems] = useState<VerticalNavItemsType>([])\r\n  const backEndApi = authConfig.indexMenuspath\r\n  const router = useRouter()\r\n\r\n  useEffect(() => {\r\n    const storedToken = window.localStorage.getItem(authConfig.storageTokenKeyName)!\r\n    axios.get(authConfig.backEndApiHost + backEndApi, { headers: { Authorization: storedToken } }).then(res => {\r\n\r\n      \r\n      let dataJson: any = null\r\n      const data = res.data\r\n      if(data && data.isEncrypted == \"1\" && data.data)  {\r\n          const i = data.data.slice(0, 32);\r\n          const t = data.data.slice(-32);\r\n          const e = data.data.slice(32, -32);\r\n          const k = authConfig.k;\r\n          const DecryptDataAES256GCMData = DecryptDataAES256GCM(e, i, t, k)\r\n          try{\r\n              dataJson = JSON.parse(DecryptDataAES256GCMData)\r\n          }\r\n          catch(Error: any) {\r\n              console.log(\"DecryptDataAES256GCMData view_default Error\", Error)\r\n  \r\n              dataJson = data\r\n          }\r\n      }\r\n      else {\r\n\r\n          dataJson = data\r\n      }\r\n      \r\n      const menuArray = dataJson\r\n      if (menuArray && menuArray.status && menuArray.status == \"ERROR\" && router.pathname != '/login') {\r\n        localStorage.removeItem('userData')\r\n        localStorage.removeItem('refreshToken')\r\n        localStorage.removeItem(authConfig.storageTokenKeyName)\r\n        localStorage.removeItem('GO_SYSTEM')\r\n        console.log(\"menuArray ERROR\", menuArray, router)\r\n        router.push('/login')\r\n      }\r\n      if(menuArray) {\r\n        setMenuItems(menuArray)\r\n      }\r\n    })\r\n  }, [])\r\n\r\n  return { menuItems }\r\n}\r\n\r\nexport default ServerSideNavItems\r\n","D:\\MYXINLI\\SchoolMentalHealth\\src\\layouts\\UserLayout.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\layouts\\UserThemeOptions.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\navigation\\horizontal\\index.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\navigation\\vertical\\index.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\401.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\404.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\500.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\acl\\index.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\ai\\keysetting.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\1.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\10.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\100.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\101.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\102.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\103.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\104.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\105.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\106.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\107.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\108.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\109.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\11.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\110.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\111.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\112.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\113.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\114.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\115.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\116.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\117.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\118.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\119.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\12.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\120.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\121.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\122.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\123.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\124.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\125.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\126.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\127.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\128.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\129.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\13.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\130.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\131.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\132.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\133.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\134.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\135.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\136.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\137.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\138.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\139.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\14.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\140.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\141.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\142.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\143.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\144.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\145.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\146.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\147.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\148.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\149.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\15.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\150.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\151.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\152.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\153.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\154.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\155.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\156.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\157.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\158.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\159.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\16.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\160.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\161.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\162.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\163.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\164.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\165.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\166.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\167.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\168.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\169.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\17.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\170.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\171.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\172.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\173.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\174.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\175.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\176.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\177.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\178.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\179.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\18.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\180.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\181.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\182.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\183.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\184.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\185.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\186.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\187.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\188.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\189.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\19.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\190.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\191.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\192.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\193.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\194.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\195.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\196.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\197.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\198.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\199.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\2.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\20.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\200.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\201.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\202.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\203.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\204.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\205.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\206.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\207.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\208.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\209.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\21.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\210.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\211.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\212.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\213.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\214.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\215.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\216.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\217.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\218.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\219.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\22.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\220.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\221.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\222.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\223.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\224.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\225.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\226.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\227.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\228.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\229.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\23.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\230.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\231.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\232.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\233.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\234.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\235.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\236.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\237.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\238.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\239.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\24.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\240.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\241.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\242.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\243.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\244.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\245.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\246.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\247.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\248.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\249.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\25.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\250.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\251.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\252.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\253.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\254.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\255.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\256.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\257.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\258.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\259.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\26.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\260.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\261.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\262.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\263.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\264.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\265.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\266.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\267.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\268.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\269.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\27.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\270.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\271.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\272.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\273.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\274.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\275.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\276.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\277.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\278.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\279.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\28.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\280.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\281.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\282.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\283.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\284.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\285.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\286.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\287.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\288.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\289.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\29.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\290.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\291.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\292.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\293.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\294.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\295.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\296.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\297.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\298.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\299.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\3.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\30.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\300.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\301.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\302.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\303.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\304.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\305.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\306.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\307.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\308.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\309.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\31.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\310.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\311.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\312.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\313.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\314.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\315.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\316.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\317.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\318.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\319.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\32.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\320.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\321.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\322.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\323.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\324.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\325.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\326.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\327.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\328.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\329.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\33.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\330.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\331.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\332.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\333.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\334.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\335.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\336.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\337.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\338.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\339.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\34.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\340.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\341.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\342.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\343.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\344.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\345.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\346.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\347.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\348.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\349.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\35.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\350.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\351.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\352.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\353.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\354.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\355.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\356.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\357.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\358.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\359.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\36.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\360.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\361.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\362.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\363.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\364.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\365.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\366.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\367.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\368.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\369.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\37.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\370.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\371.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\372.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\373.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\374.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\375.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\376.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\377.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\378.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\379.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\38.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\380.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\381.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\382.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\383.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\384.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\385.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\386.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\387.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\388.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\389.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\39.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\390.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\391.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\392.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\393.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\394.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\395.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\396.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\397.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\398.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\399.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\4.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\40.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\400.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\41.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\42.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\43.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\44.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\45.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\46.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\47.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\48.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\49.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\5.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\50.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\51.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\52.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\53.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\54.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\55.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\56.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\57.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\58.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\59.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\6.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\60.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\61.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\62.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\63.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\64.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\65.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\66.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\67.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\68.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\69.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\7.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\70.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\71.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\72.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\73.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\74.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\75.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\76.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\77.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\78.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\79.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\8.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\80.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\81.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\82.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\83.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\84.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\85.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\86.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\87.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\88.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\89.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\9.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\90.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\91.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\92.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\93.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\94.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\95.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\96.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\97.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\98.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\apps\\99.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\ceping\\detail\\index.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\ceping\\detail\\[id].tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\ceping\\index.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\dashboards\\analytics.tsx",["3368"],[],"// ** React Imports\r\nimport { useState, useEffect } from 'react'\r\n\r\n// ** MUI Imports\r\nimport Grid from '@mui/material/Grid'\r\nimport CircularProgress from '@mui/material/CircularProgress'\r\nimport Typography from '@mui/material/Typography'\r\nimport Box from '@mui/material/Box'\r\n\r\n// ** Styled Component Import\r\nimport ApexChartWrapper from 'src/@core/styles/libs/react-apexcharts'\r\n\r\n// ** Demo Components Imports\r\nimport ApexLineChart from 'src/views/charts/apex-charts/ApexLineChart'\r\nimport ApexDonutChart from 'src/views/charts/apex-charts/ApexDonutChart'\r\nimport ApexRadialBarChart from 'src/views/charts/apex-charts/ApexRadialBarChart'\r\n\r\nimport AnalyticsTrophy from 'src/views/dashboards/analytics/AnalyticsTrophy'\r\nimport AnalyticsSalesByCountries from 'src/views/dashboards/analytics/AnalyticsSalesByCountries'\r\nimport AnalyticsDepositWithdraw from 'src/views/dashboards/analytics/AnalyticsDepositWithdraw'\r\nimport AnalyticsTransactionsCard from 'src/views/dashboards/analytics/AnalyticsTransactionsCard'\r\n\r\nimport AnalyticsWeeklyOverview from 'src/views/dashboards/analytics/AnalyticsWeeklyOverview'\r\nimport AnalyticsPerformance from 'src/views/dashboards/analytics/AnalyticsPerformance'\r\n\r\n\r\n\r\nimport axios from 'axios'\r\n\r\n// ** Config\r\nimport authConfig from 'src/configs/auth'\r\nimport { useAuth } from 'src/hooks/useAuth'\r\n\r\n\r\nconst AnalyticsDashboard = () => {\r\n\r\n  const [isLoading, setIsLoading] = useState<boolean>(true)\r\n  const dataDefault:{[key:string]:any} = {}\r\n  const [dashboardData, setDashboardData] = useState(dataDefault)\r\n  const [className, setClassName] = useState<string>(\"\")\r\n  const [optionsMenuItem, setOptionsMenuItem] = useState<string>(\"\")\r\n  const auth = useAuth()\r\n\r\n  const toggleSetClassName = (classNameTemp: string) => {\r\n    setClassName(classNameTemp)\r\n  }\r\n  \r\n  const handleOptionsMenuItemClick = (Item: string) => {\r\n    setOptionsMenuItem(Item)\r\n  }\r\n\r\n  //console.log(\"auth\",auth)\r\n\r\n  useEffect(() => {\r\n    if (auth.user && auth.user.type==\"Student\") {\r\n      const backEndApi = \"charts/dashboard_deyu_geren_student.php\"\r\n      axios.get(authConfig.backEndApiHost + backEndApi, { headers: { Authorization: storedToken }, params: { className, optionsMenuItem } })\r\n      .then(res => {\r\n          setDashboardData(res.data.charts);\r\n          setIsLoading(false)\r\n          setClassName(res.data.defaultValue)\r\n      })\r\n    }\r\n    else if (auth.user && auth.user.type==\"User\") {\r\n      const backEndApi = \"charts/dashboard_deyu_geren_banji.php\"\r\n      axios.get(authConfig.backEndApiHost + backEndApi, { headers: { Authorization: storedToken }, params: { className, optionsMenuItem } })\r\n      .then(res => {\r\n          setDashboardData(res.data.charts);\r\n          setIsLoading(false)\r\n          setClassName(res.data.defaultValue)\r\n      })\r\n    }    \r\n  }, [className, auth, optionsMenuItem])\r\n\r\n  const storedToken = window.localStorage.getItem(authConfig.storageTokenKeyName)!\r\n\r\n  console.log(\"dashboardData\",dashboardData)\r\n\r\n  return (\r\n    <ApexChartWrapper>\r\n      {isLoading ? (\r\n                    <Grid item xs={12} sm={12} container justifyContent=\"space-around\">\r\n                        <Box sx={{ mt: 6, mb: 6, display: 'flex', alignItems: 'center', flexDirection: 'column' }}>\r\n                            <CircularProgress />\r\n                            <Typography>加载中...</Typography>\r\n                        </Box>\r\n                    </Grid>\r\n                ) : (\r\n                  <Grid container spacing={6}>\r\n                    {dashboardData && dashboardData.map( (item: any, index: number)=> {\r\n                      if(item.type==\"AnalyticsTrophy\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <AnalyticsTrophy data={item} toggleSetClassName={toggleSetClassName} className={className} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"AnalyticsTransactionsCard\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <AnalyticsTransactionsCard data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"AnalyticsSalesByCountries\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <AnalyticsSalesByCountries data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"AnalyticsDepositWithdraw\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <AnalyticsDepositWithdraw data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"AnalyticsWeeklyOverview\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <AnalyticsWeeklyOverview data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"ApexLineChart\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <ApexLineChart data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"ApexDonutChart\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <ApexDonutChart data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"ApexRadialBarChart\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <ApexRadialBarChart data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"AnalyticsPerformance\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <AnalyticsPerformance data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else  {\r\n                        console.log(\"Unknown Chart Type\")\r\n                      }\r\n\r\n                    })}\r\n                    \r\n                  </Grid>\r\n                )}\r\n      \r\n    </ApexChartWrapper>\r\n  )\r\n}\r\n\r\nexport default AnalyticsDashboard\r\n","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\dashboards\\analyticsclass.tsx",["3369"],[],"// ** React Imports\r\nimport { useState, useEffect } from 'react'\r\n\r\n// ** MUI Imports\r\nimport Grid from '@mui/material/Grid'\r\nimport CircularProgress from '@mui/material/CircularProgress'\r\nimport Typography from '@mui/material/Typography'\r\nimport Box from '@mui/material/Box'\r\n\r\n// ** Styled Component Import\r\nimport ApexChartWrapper from 'src/@core/styles/libs/react-apexcharts'\r\n\r\n// ** Demo Components Imports\r\nimport ApexLineChart from 'src/views/charts/apex-charts/ApexLineChart'\r\nimport ApexDonutChart from 'src/views/charts/apex-charts/ApexDonutChart'\r\nimport ApexRadialBarChart from 'src/views/charts/apex-charts/ApexRadialBarChart'\r\n\r\nimport AnalyticsTrophy from 'src/views/dashboards/analytics/AnalyticsTrophy'\r\nimport AnalyticsSalesByCountries from 'src/views/dashboards/analytics/AnalyticsSalesByCountries'\r\nimport AnalyticsDepositWithdraw from 'src/views/dashboards/analytics/AnalyticsDepositWithdraw'\r\nimport AnalyticsTransactionsCard from 'src/views/dashboards/analytics/AnalyticsTransactionsCard'\r\n\r\nimport AnalyticsWeeklyOverview from 'src/views/dashboards/analytics/AnalyticsWeeklyOverview'\r\nimport AnalyticsPerformance from 'src/views/dashboards/analytics/AnalyticsPerformance'\r\n\r\n\r\n\r\nimport axios from 'axios'\r\n\r\n// ** Config\r\nimport authConfig from 'src/configs/auth'\r\nimport { useAuth } from 'src/hooks/useAuth'\r\n\r\n\r\nconst AnalyticsDashboard = () => {\r\n\r\n  const [isLoading, setIsLoading] = useState<boolean>(true)\r\n  const dataDefault:{[key:string]:any} = {}\r\n  const [dashboardData, setDashboardData] = useState(dataDefault)\r\n  const [className, setClassName] = useState<string>(\"\")\r\n  const [optionsMenuItem, setOptionsMenuItem] = useState<string>(\"\")\r\n  const auth = useAuth()\r\n\r\n  const toggleSetClassName = (classNameTemp: string) => {\r\n    setClassName(classNameTemp)\r\n  }\r\n  \r\n  const handleOptionsMenuItemClick = (Item: string) => {\r\n    setOptionsMenuItem(Item)\r\n  }\r\n\r\n  //console.log(\"auth\",auth)\r\n\r\n  useEffect(() => {\r\n    if (auth.user && auth.user.type==\"Student\") {\r\n      const backEndApi = \"charts/dashboard_deyu_banji_student.php\"\r\n      axios.get(authConfig.backEndApiHost + backEndApi, { headers: { Authorization: storedToken }, params: { className, optionsMenuItem } })\r\n      .then(res => {\r\n          setDashboardData(res.data.charts);\r\n          setIsLoading(false)\r\n          setClassName(res.data.defaultValue)\r\n      })\r\n    }\r\n    else if (auth.user && auth.user.type==\"User\") {\r\n      const backEndApi = \"charts/dashboard_deyu_banji_banji.php\"\r\n      axios.get(authConfig.backEndApiHost + backEndApi, { headers: { Authorization: storedToken }, params: { className, optionsMenuItem } })\r\n      .then(res => {\r\n          setDashboardData(res.data.charts);\r\n          setIsLoading(false)\r\n          setClassName(res.data.defaultValue)\r\n      })\r\n    }    \r\n  }, [className, auth, optionsMenuItem])\r\n\r\n  const storedToken = window.localStorage.getItem(authConfig.storageTokenKeyName)!\r\n\r\n  console.log(\"dashboardData\",dashboardData)\r\n\r\n  return (\r\n    <ApexChartWrapper>\r\n      {isLoading ? (\r\n                    <Grid item xs={12} sm={12} container justifyContent=\"space-around\">\r\n                        <Box sx={{ mt: 6, mb: 6, display: 'flex', alignItems: 'center', flexDirection: 'column' }}>\r\n                            <CircularProgress />\r\n                            <Typography>加载中...</Typography>\r\n                        </Box>\r\n                    </Grid>\r\n                ) : (\r\n                  <Grid container spacing={6}>\r\n                    {dashboardData && dashboardData.map( (item: any, index: number)=> {\r\n                      if(item.type==\"AnalyticsTrophy\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <AnalyticsTrophy data={item} toggleSetClassName={toggleSetClassName} className={className} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"AnalyticsTransactionsCard\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <AnalyticsTransactionsCard data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"AnalyticsSalesByCountries\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <AnalyticsSalesByCountries data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"AnalyticsDepositWithdraw\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <AnalyticsDepositWithdraw data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"AnalyticsWeeklyOverview\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <AnalyticsWeeklyOverview data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"ApexLineChart\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <ApexLineChart data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"ApexDonutChart\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <ApexDonutChart data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"ApexRadialBarChart\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <ApexRadialBarChart data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"AnalyticsPerformance\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <AnalyticsPerformance data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else  {\r\n                        console.log(\"Unknown Chart Type\")\r\n                      }\r\n\r\n                    })}\r\n                    \r\n                  </Grid>\r\n                )}\r\n      \r\n    </ApexChartWrapper>\r\n  )\r\n}\r\n\r\nexport default AnalyticsDashboard\r\n","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\dashboards\\analyticsstudent.tsx",["3370"],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\dashboards\\StatisticsClassbyClass.tsx",["3371"],[],"// ** React Imports\r\nimport { useState, useEffect } from 'react'\r\n\r\n// ** MUI Imports\r\nimport Grid from '@mui/material/Grid'\r\nimport CircularProgress from '@mui/material/CircularProgress'\r\nimport Typography from '@mui/material/Typography'\r\nimport Box from '@mui/material/Box'\r\n\r\n// ** Styled Component Import\r\nimport ApexChartWrapper from 'src/@core/styles/libs/react-apexcharts'\r\n\r\n// ** Demo Components Imports\r\nimport ApexLineChart from 'src/views/charts/apex-charts/ApexLineChart'\r\nimport ApexDonutChart from 'src/views/charts/apex-charts/ApexDonutChart'\r\nimport ApexRadialBarChart from 'src/views/charts/apex-charts/ApexRadialBarChart'\r\n\r\nimport AnalyticsTrophy from 'src/views/dashboards/analytics/AnalyticsTrophy'\r\nimport AnalyticsSalesByCountries from 'src/views/dashboards/analytics/AnalyticsSalesByCountries'\r\nimport AnalyticsDepositWithdraw from 'src/views/dashboards/analytics/AnalyticsDepositWithdraw'\r\nimport AnalyticsTransactionsCard from 'src/views/dashboards/analytics/AnalyticsTransactionsCard'\r\n\r\nimport AnalyticsWeeklyOverview from 'src/views/dashboards/analytics/AnalyticsWeeklyOverview'\r\nimport AnalyticsPerformance from 'src/views/dashboards/analytics/AnalyticsPerformance'\r\n\r\n\r\n\r\nimport axios from 'axios'\r\n\r\n// ** Config\r\nimport authConfig from 'src/configs/auth'\r\nimport { useAuth } from 'src/hooks/useAuth'\r\n\r\n\r\nconst AnalyticsDashboard = () => {\r\n\r\n  const [isLoading, setIsLoading] = useState<boolean>(true)\r\n  const dataDefault:{[key:string]:any} = {}\r\n  const [dashboardData, setDashboardData] = useState(dataDefault)\r\n  const [className, setClassName] = useState<string>(\"\")\r\n  const [optionsMenuItem, setOptionsMenuItem] = useState<string>(\"\")\r\n  const auth = useAuth()\r\n\r\n  const toggleSetClassName = (classNameTemp: string) => {\r\n    setClassName(classNameTemp)\r\n  }\r\n  \r\n  const handleOptionsMenuItemClick = (Item: string) => {\r\n    setOptionsMenuItem(Item)\r\n  }\r\n\r\n  //console.log(\"auth\",auth)\r\n\r\n  useEffect(() => {\r\n    if (auth.user && auth.user.type==\"Student\") {\r\n      const backEndApi = \"charts/StatisticsClassbyClass.php\"\r\n      axios.get(authConfig.backEndApiHost + backEndApi, { headers: { Authorization: storedToken }, params: { className, optionsMenuItem } })\r\n      .then(res => {\r\n          setDashboardData(res.data.charts);\r\n          setIsLoading(false)\r\n          setClassName(res.data.defaultValue)\r\n      })\r\n    }\r\n    else if (auth.user && auth.user.type==\"User\") {\r\n      const backEndApi = \"charts/StatisticsClassbyClass.php\"\r\n      axios.get(authConfig.backEndApiHost + backEndApi, { headers: { Authorization: storedToken }, params: { className, optionsMenuItem } })\r\n      .then(res => {\r\n          setDashboardData(res.data.charts);\r\n          setIsLoading(false)\r\n          setClassName(res.data.defaultValue)\r\n      })\r\n    }    \r\n  }, [className, auth, optionsMenuItem])\r\n\r\n  const storedToken = window.localStorage.getItem(authConfig.storageTokenKeyName)!\r\n\r\n  console.log(\"dashboardData\",dashboardData)\r\n\r\n  return (\r\n    <ApexChartWrapper>\r\n      {isLoading ? (\r\n                    <Grid item xs={12} sm={12} container justifyContent=\"space-around\">\r\n                        <Box sx={{ mt: 6, mb: 6, display: 'flex', alignItems: 'center', flexDirection: 'column' }}>\r\n                            <CircularProgress />\r\n                            <Typography>加载中...</Typography>\r\n                        </Box>\r\n                    </Grid>\r\n                ) : (\r\n                  <Grid container spacing={6}>\r\n                    {dashboardData && dashboardData.map( (item: any, index: number)=> {\r\n                      if(item.type==\"AnalyticsTrophy\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <AnalyticsTrophy data={item} toggleSetClassName={toggleSetClassName} className={className} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"AnalyticsTransactionsCard\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <AnalyticsTransactionsCard data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"AnalyticsSalesByCountries\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <AnalyticsSalesByCountries data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"AnalyticsDepositWithdraw\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <AnalyticsDepositWithdraw data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"AnalyticsWeeklyOverview\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <AnalyticsWeeklyOverview data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"ApexLineChart\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <ApexLineChart data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"ApexDonutChart\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <ApexDonutChart data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"ApexRadialBarChart\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <ApexRadialBarChart data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"AnalyticsPerformance\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <AnalyticsPerformance data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else  {\r\n                        console.log(\"Unknown Chart Type\")\r\n                      }\r\n\r\n                    })}\r\n                    \r\n                  </Grid>\r\n                )}\r\n      \r\n    </ApexChartWrapper>\r\n  )\r\n}\r\n\r\nexport default AnalyticsDashboard\r\n","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\dashboards\\StatisticsStudentsbyClass.tsx",["3372"],[],"// ** React Imports\r\nimport { useState, useEffect } from 'react'\r\n\r\n// ** MUI Imports\r\nimport Grid from '@mui/material/Grid'\r\nimport CircularProgress from '@mui/material/CircularProgress'\r\nimport Typography from '@mui/material/Typography'\r\nimport Box from '@mui/material/Box'\r\n\r\n// ** Styled Component Import\r\nimport ApexChartWrapper from 'src/@core/styles/libs/react-apexcharts'\r\n\r\n// ** Demo Components Imports\r\nimport ApexLineChart from 'src/views/charts/apex-charts/ApexLineChart'\r\nimport ApexDonutChart from 'src/views/charts/apex-charts/ApexDonutChart'\r\nimport ApexRadialBarChart from 'src/views/charts/apex-charts/ApexRadialBarChart'\r\n\r\nimport AnalyticsTrophy from 'src/views/dashboards/analytics/AnalyticsTrophy'\r\nimport AnalyticsSalesByCountries from 'src/views/dashboards/analytics/AnalyticsSalesByCountries'\r\nimport AnalyticsDepositWithdraw from 'src/views/dashboards/analytics/AnalyticsDepositWithdraw'\r\nimport AnalyticsTransactionsCard from 'src/views/dashboards/analytics/AnalyticsTransactionsCard'\r\n\r\nimport AnalyticsWeeklyOverview from 'src/views/dashboards/analytics/AnalyticsWeeklyOverview'\r\nimport AnalyticsPerformance from 'src/views/dashboards/analytics/AnalyticsPerformance'\r\n\r\n\r\n\r\nimport axios from 'axios'\r\n\r\n// ** Config\r\nimport authConfig from 'src/configs/auth'\r\nimport { useAuth } from 'src/hooks/useAuth'\r\n\r\n\r\nconst AnalyticsDashboard = () => {\r\n\r\n  const [isLoading, setIsLoading] = useState<boolean>(true)\r\n  const dataDefault:{[key:string]:any} = {}\r\n  const [dashboardData, setDashboardData] = useState(dataDefault)\r\n  const [className, setClassName] = useState<string>(\"\")\r\n  const [optionsMenuItem, setOptionsMenuItem] = useState<string>(\"\")\r\n  const auth = useAuth()\r\n\r\n  const toggleSetClassName = (classNameTemp: string) => {\r\n    setClassName(classNameTemp)\r\n  }\r\n  \r\n  const handleOptionsMenuItemClick = (Item: string) => {\r\n    setOptionsMenuItem(Item)\r\n  }\r\n\r\n  //console.log(\"auth\",auth)\r\n\r\n  useEffect(() => {\r\n    if (auth.user && auth.user.type==\"Student\") {\r\n      const backEndApi = \"charts/StatisticsStudentsbyClass.php\"\r\n      axios.get(authConfig.backEndApiHost + backEndApi, { headers: { Authorization: storedToken }, params: { className, optionsMenuItem } })\r\n      .then(res => {\r\n          setDashboardData(res.data.charts);\r\n          setIsLoading(false)\r\n          setClassName(res.data.defaultValue)\r\n      })\r\n    }\r\n    else if (auth.user && auth.user.type==\"User\") {\r\n      const backEndApi = \"charts/StatisticsStudentsbyClass.php\"\r\n      axios.get(authConfig.backEndApiHost + backEndApi, { headers: { Authorization: storedToken }, params: { className, optionsMenuItem } })\r\n      .then(res => {\r\n          setDashboardData(res.data.charts);\r\n          setIsLoading(false)\r\n          setClassName(res.data.defaultValue)\r\n      })\r\n    }    \r\n  }, [className, auth, optionsMenuItem])\r\n\r\n  const storedToken = window.localStorage.getItem(authConfig.storageTokenKeyName)!\r\n\r\n  console.log(\"dashboardData\",dashboardData)\r\n\r\n  return (\r\n    <ApexChartWrapper>\r\n      {isLoading ? (\r\n                    <Grid item xs={12} sm={12} container justifyContent=\"space-around\">\r\n                        <Box sx={{ mt: 6, mb: 6, display: 'flex', alignItems: 'center', flexDirection: 'column' }}>\r\n                            <CircularProgress />\r\n                            <Typography>加载中...</Typography>\r\n                        </Box>\r\n                    </Grid>\r\n                ) : (\r\n                  <Grid container spacing={6}>\r\n                    {dashboardData && dashboardData.map( (item: any, index: number)=> {\r\n                      if(item.type==\"AnalyticsTrophy\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <AnalyticsTrophy data={item} toggleSetClassName={toggleSetClassName} className={className} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"AnalyticsTransactionsCard\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <AnalyticsTransactionsCard data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"AnalyticsSalesByCountries\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <AnalyticsSalesByCountries data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"AnalyticsDepositWithdraw\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <AnalyticsDepositWithdraw data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"AnalyticsWeeklyOverview\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <AnalyticsWeeklyOverview data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"ApexLineChart\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <ApexLineChart data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"ApexDonutChart\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <ApexDonutChart data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"ApexRadialBarChart\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <ApexRadialBarChart data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"AnalyticsPerformance\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <AnalyticsPerformance data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else  {\r\n                        console.log(\"Unknown Chart Type\")\r\n                      }\r\n\r\n                    })}\r\n                    \r\n                  </Grid>\r\n                )}\r\n      \r\n    </ApexChartWrapper>\r\n  )\r\n}\r\n\r\nexport default AnalyticsDashboard\r\n","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\dashboards\\StatisticsStudentsbyIndividual.tsx",["3373"],[],"// ** React Imports\r\nimport { useState, useEffect } from 'react'\r\n\r\n// ** MUI Imports\r\nimport Grid from '@mui/material/Grid'\r\nimport CircularProgress from '@mui/material/CircularProgress'\r\nimport Typography from '@mui/material/Typography'\r\nimport Box from '@mui/material/Box'\r\n\r\n// ** Styled Component Import\r\nimport ApexChartWrapper from 'src/@core/styles/libs/react-apexcharts'\r\n\r\n// ** Demo Components Imports\r\nimport ApexLineChart from 'src/views/charts/apex-charts/ApexLineChart'\r\nimport ApexDonutChart from 'src/views/charts/apex-charts/ApexDonutChart'\r\nimport ApexRadialBarChart from 'src/views/charts/apex-charts/ApexRadialBarChart'\r\n\r\nimport AnalyticsTrophy from 'src/views/dashboards/analytics/AnalyticsTrophy'\r\nimport AnalyticsSalesByCountries from 'src/views/dashboards/analytics/AnalyticsSalesByCountries'\r\nimport AnalyticsDepositWithdraw from 'src/views/dashboards/analytics/AnalyticsDepositWithdraw'\r\nimport AnalyticsTransactionsCard from 'src/views/dashboards/analytics/AnalyticsTransactionsCard'\r\n\r\nimport AnalyticsWeeklyOverview from 'src/views/dashboards/analytics/AnalyticsWeeklyOverview'\r\nimport AnalyticsPerformance from 'src/views/dashboards/analytics/AnalyticsPerformance'\r\n\r\n\r\n\r\nimport axios from 'axios'\r\n\r\n// ** Config\r\nimport authConfig from 'src/configs/auth'\r\nimport { useAuth } from 'src/hooks/useAuth'\r\n\r\n\r\nconst AnalyticsDashboard = () => {\r\n\r\n  const [isLoading, setIsLoading] = useState<boolean>(true)\r\n  const dataDefault:{[key:string]:any} = {}\r\n  const [dashboardData, setDashboardData] = useState(dataDefault)\r\n  const [className, setClassName] = useState<string>(\"\")\r\n  const [optionsMenuItem, setOptionsMenuItem] = useState<string>(\"\")\r\n  const auth = useAuth()\r\n\r\n  const toggleSetClassName = (studentCodeTemp: string) => {\r\n    setClassName(studentCodeTemp)\r\n  }\r\n  \r\n  const handleOptionsMenuItemClick = (Item: string) => {\r\n    setOptionsMenuItem(Item)\r\n  }\r\n\r\n  //console.log(\"auth\",auth)\r\n\r\n  useEffect(() => {\r\n    if (auth.user && auth.user.type==\"Student\") {\r\n      const backEndApi = \"charts/StatisticsStudentsbyIndividual.php\"\r\n      axios.get(authConfig.backEndApiHost + backEndApi, { headers: { Authorization: storedToken }, params: { className, optionsMenuItem } })\r\n      .then(res => {\r\n          setDashboardData(res.data.charts);\r\n          setIsLoading(false)\r\n          setClassName(res.data.defaultValue)\r\n      })\r\n    }\r\n    else if (auth.user && auth.user.type==\"User\") {\r\n      const backEndApi = \"charts/StatisticsStudentsbyIndividual.php\"\r\n      axios.get(authConfig.backEndApiHost + backEndApi, { headers: { Authorization: storedToken }, params: { className, optionsMenuItem } })\r\n      .then(res => {\r\n          setDashboardData(res.data.charts);\r\n          setIsLoading(false)\r\n          setClassName(res.data.defaultValue)\r\n      })\r\n    }    \r\n  }, [className, auth, optionsMenuItem])\r\n\r\n  const storedToken = window.localStorage.getItem(authConfig.storageTokenKeyName)!\r\n\r\n  console.log(\"dashboardData\",dashboardData)\r\n\r\n  return (\r\n    <ApexChartWrapper>\r\n      {isLoading ? (\r\n                    <Grid item xs={12} sm={12} container justifyContent=\"space-around\">\r\n                        <Box sx={{ mt: 6, mb: 6, display: 'flex', alignItems: 'center', flexDirection: 'column' }}>\r\n                            <CircularProgress />\r\n                            <Typography>加载中...</Typography>\r\n                        </Box>\r\n                    </Grid>\r\n                ) : (\r\n                  <Grid container spacing={6}>\r\n                    {dashboardData && dashboardData.map( (item: any, index: number)=> {\r\n                      if(item.type==\"AnalyticsTrophy\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                          <AnalyticsTrophy data={item} toggleSetClassName={toggleSetClassName} className={className} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"AnalyticsTransactionsCard\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <AnalyticsTransactionsCard data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"AnalyticsSalesByCountries\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <AnalyticsSalesByCountries data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"AnalyticsDepositWithdraw\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <AnalyticsDepositWithdraw data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"AnalyticsWeeklyOverview\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <AnalyticsWeeklyOverview data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"ApexLineChart\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <ApexLineChart data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"ApexDonutChart\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <ApexDonutChart data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"ApexRadialBarChart\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <ApexRadialBarChart data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"AnalyticsPerformance\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <AnalyticsPerformance data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else  {\r\n                        console.log(\"Unknown Chart Type\")\r\n                      }\r\n\r\n                    })}\r\n                    \r\n                  </Grid>\r\n                )}\r\n      \r\n    </ApexChartWrapper>\r\n  )\r\n}\r\n\r\nexport default AnalyticsDashboard\r\n","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\dashboards\\xmjs_gongkaike.tsx",["3374"],[],"// ** React Imports\r\nimport { useState, useEffect } from 'react'\r\n\r\n// ** MUI Imports\r\nimport Grid from '@mui/material/Grid'\r\nimport CircularProgress from '@mui/material/CircularProgress'\r\nimport Typography from '@mui/material/Typography'\r\nimport Box from '@mui/material/Box'\r\n\r\n// ** Styled Component Import\r\nimport ApexChartWrapper from 'src/@core/styles/libs/react-apexcharts'\r\n\r\n// ** Demo Components Imports\r\nimport ApexLineChart from 'src/views/charts/apex-charts/ApexLineChart'\r\nimport ApexDonutChart from 'src/views/charts/apex-charts/ApexDonutChart'\r\nimport ApexRadialBarChart from 'src/views/charts/apex-charts/ApexRadialBarChart'\r\n\r\nimport AnalyticsTrophy from 'src/views/dashboards/analytics/AnalyticsTrophy'\r\nimport AnalyticsSalesByCountries from 'src/views/dashboards/analytics/AnalyticsSalesByCountries'\r\nimport AnalyticsDepositWithdraw from 'src/views/dashboards/analytics/AnalyticsDepositWithdraw'\r\nimport AnalyticsTransactionsCard from 'src/views/dashboards/analytics/AnalyticsTransactionsCard'\r\nimport AnalyticsTransactionsCardMenuIcon from 'src/views/dashboards/analytics/AnalyticsTransactionsCardMenuIcon'\r\n\r\nimport AnalyticsWeeklyOverview from 'src/views/dashboards/analytics/AnalyticsWeeklyOverview'\r\nimport AnalyticsPerformance from 'src/views/dashboards/analytics/AnalyticsPerformance'\r\n\r\nimport axios from 'axios'\r\n\r\n// ** Config\r\nimport authConfig from 'src/configs/auth'\r\nimport { useAuth } from 'src/hooks/useAuth'\r\nimport { useRouter } from 'next/router'\r\n\r\n\r\nconst AnalyticsDashboard = () => {\r\n\r\n  const [isLoading, setIsLoading] = useState<boolean>(true)\r\n  const dataDefault:{[key:string]:any} = {}\r\n  const [dashboardData, setDashboardData] = useState(dataDefault)\r\n  const [className, setClassName] = useState<string>(\"\")\r\n  const [optionsMenuItem, setOptionsMenuItem] = useState<string>(\"\")\r\n  const auth = useAuth()\r\n  const router = useRouter()\r\n\r\n  const toggleSetClassName = (classNameTemp: string) => {\r\n    setClassName(classNameTemp)\r\n  }\r\n  \r\n  const handleOptionsMenuItemClick = (Item: string) => {\r\n    setOptionsMenuItem(Item)\r\n  }\r\n\r\n  //console.log(\"auth\",auth)\r\n\r\n  useEffect(() => {\r\n    if (auth.user && auth.user.type==\"Student\") {\r\n      const backEndApi = \"charts/dashboard_xmjs_gongkaike_student.php\"\r\n      axios.get(authConfig.backEndApiHost + backEndApi, { headers: { Authorization: storedToken }, params: { className, optionsMenuItem } })\r\n      .then(res => {\r\n          setDashboardData(res.data);\r\n          setIsLoading(false)\r\n          setClassName(\"\")\r\n          if(res.data && res.data[0] && res.data[0]['data'] && res.data[0]['data'].length == 1) {\r\n            router.push(res.data[0]['data'][0]['url'])\r\n          }\r\n      })\r\n    }\r\n    else if (auth.user && auth.user.type==\"User\") {\r\n      const backEndApi = \"charts/dashboard_xmjs_gongkaike.php\"\r\n      axios.get(authConfig.backEndApiHost + backEndApi, { headers: { Authorization: storedToken }, params: { className, optionsMenuItem } })\r\n      .then(res => {\r\n          setDashboardData(res.data);\r\n          setIsLoading(false)\r\n          setClassName(\"\")\r\n          if(res.data && res.data[0] && res.data[0]['data'] && res.data[0]['data'].length == 1) {\r\n            router.push(res.data[0]['data'][0]['url'])\r\n          }\r\n      })\r\n    }    \r\n  }, [className, auth, optionsMenuItem])\r\n\r\n  const storedToken = window.localStorage.getItem(authConfig.storageTokenKeyName)!\r\n\r\n  console.log(\"dashboardData\",dashboardData)\r\n\r\n  return (\r\n    <ApexChartWrapper>\r\n      {isLoading ? (\r\n                    <Grid item xs={12} sm={12} container justifyContent=\"space-around\">\r\n                        <Box sx={{ mt: 6, mb: 6, display: 'flex', alignItems: 'center', flexDirection: 'column' }}>\r\n                            <CircularProgress />\r\n                            <Typography>加载中...</Typography>\r\n                        </Box>\r\n                    </Grid>\r\n                ) : (\r\n                  <Grid container spacing={6}>\r\n                    {dashboardData && dashboardData.map( (item: any, index: number)=> {\r\n                      if(item.type==\"AnalyticsTrophy\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <AnalyticsTrophy data={item} toggleSetClassName={toggleSetClassName} className={className} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"AnalyticsTransactionsCard\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <AnalyticsTransactionsCard data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"MenuIcon\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <AnalyticsTransactionsCardMenuIcon data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"AnalyticsSalesByCountries\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <AnalyticsSalesByCountries data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"AnalyticsDepositWithdraw\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <AnalyticsDepositWithdraw data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"AnalyticsWeeklyOverview\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <AnalyticsWeeklyOverview data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"ApexLineChart\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <ApexLineChart data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"ApexDonutChart\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <ApexDonutChart data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"ApexRadialBarChart\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <ApexRadialBarChart data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"AnalyticsPerformance\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <AnalyticsPerformance data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else  {\r\n                        console.log(\"Unknown Chart Type\")\r\n                      }\r\n\r\n                    })}\r\n                    \r\n                  </Grid>\r\n                )}\r\n      \r\n    </ApexChartWrapper>\r\n  )\r\n}\r\n\r\nexport default AnalyticsDashboard\r\n","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\dashboards\\xmjs_wygl.tsx",["3375"],[],"// ** React Imports\r\nimport { useState, useEffect } from 'react'\r\n\r\n// ** MUI Imports\r\nimport Grid from '@mui/material/Grid'\r\nimport CircularProgress from '@mui/material/CircularProgress'\r\nimport Typography from '@mui/material/Typography'\r\nimport Box from '@mui/material/Box'\r\n\r\n// ** Styled Component Import\r\nimport ApexChartWrapper from 'src/@core/styles/libs/react-apexcharts'\r\n\r\n// ** Demo Components Imports\r\nimport ApexLineChart from 'src/views/charts/apex-charts/ApexLineChart'\r\nimport ApexDonutChart from 'src/views/charts/apex-charts/ApexDonutChart'\r\nimport ApexRadialBarChart from 'src/views/charts/apex-charts/ApexRadialBarChart'\r\n\r\nimport AnalyticsTrophy from 'src/views/dashboards/analytics/AnalyticsTrophy'\r\nimport AnalyticsSalesByCountries from 'src/views/dashboards/analytics/AnalyticsSalesByCountries'\r\nimport AnalyticsDepositWithdraw from 'src/views/dashboards/analytics/AnalyticsDepositWithdraw'\r\nimport AnalyticsTransactionsCard from 'src/views/dashboards/analytics/AnalyticsTransactionsCard'\r\nimport AnalyticsTransactionsCardMenuIcon from 'src/views/dashboards/analytics/AnalyticsTransactionsCardMenuIcon'\r\n\r\nimport AnalyticsWeeklyOverview from 'src/views/dashboards/analytics/AnalyticsWeeklyOverview'\r\nimport AnalyticsPerformance from 'src/views/dashboards/analytics/AnalyticsPerformance'\r\n\r\nimport axios from 'axios'\r\n\r\n// ** Config\r\nimport authConfig from 'src/configs/auth'\r\nimport { useAuth } from 'src/hooks/useAuth'\r\nimport { useRouter } from 'next/router'\r\n\r\n\r\n\r\nconst AnalyticsDashboard = () => {\r\n\r\n  const [isLoading, setIsLoading] = useState<boolean>(true)\r\n  const dataDefault:{[key:string]:any} = {}\r\n  const [dashboardData, setDashboardData] = useState(dataDefault)\r\n  const [className, setClassName] = useState<string>(\"\")\r\n  const [optionsMenuItem, setOptionsMenuItem] = useState<string>(\"\")\r\n  const auth = useAuth()\r\n  const router = useRouter()\r\n\r\n  const toggleSetClassName = (classNameTemp: string) => {\r\n    setClassName(classNameTemp)\r\n  }\r\n  \r\n  const handleOptionsMenuItemClick = (Item: string) => {\r\n    setOptionsMenuItem(Item)\r\n  }\r\n\r\n  //console.log(\"auth\",auth)\r\n\r\n  useEffect(() => {\r\n    if (auth.user && auth.user.type==\"Student\") {\r\n      const backEndApi = \"charts/dashboard_xmjs_wygl_student.php\"\r\n      axios.get(authConfig.backEndApiHost + backEndApi, { headers: { Authorization: storedToken }, params: { className, optionsMenuItem } })\r\n      .then(res => {\r\n          setDashboardData(res.data);\r\n          setIsLoading(false)\r\n          setClassName(\"\")\r\n          if(res.data && res.data[0] && res.data[0]['data'] && res.data[0]['data'].length == 1) {\r\n            router.push(res.data[0]['data'][0]['url'])\r\n          }\r\n      })\r\n    }\r\n    else if (auth.user && auth.user.type==\"User\") {\r\n      const backEndApi = \"charts/dashboard_xmjs_wygl.php\"\r\n      axios.get(authConfig.backEndApiHost + backEndApi, { headers: { Authorization: storedToken }, params: { className, optionsMenuItem } })\r\n      .then(res => {\r\n          setDashboardData(res.data);\r\n          setIsLoading(false)\r\n          setClassName(\"\")\r\n          if(res.data && res.data[0] && res.data[0]['data'] && res.data[0]['data'].length == 1) {\r\n            router.push(res.data[0]['data'][0]['url'])\r\n          }\r\n      })\r\n    }    \r\n  }, [className, auth, optionsMenuItem])\r\n\r\n  const storedToken = window.localStorage.getItem(authConfig.storageTokenKeyName)!\r\n\r\n  console.log(\"dashboardData\",dashboardData)\r\n\r\n  return (\r\n    <ApexChartWrapper>\r\n      {isLoading ? (\r\n                    <Grid item xs={12} sm={12} container justifyContent=\"space-around\">\r\n                        <Box sx={{ mt: 6, mb: 6, display: 'flex', alignItems: 'center', flexDirection: 'column' }}>\r\n                            <CircularProgress />\r\n                            <Typography>加载中...</Typography>\r\n                        </Box>\r\n                    </Grid>\r\n                ) : (\r\n                  <Grid container spacing={6}>\r\n                    {dashboardData && dashboardData.map( (item: any, index: number)=> {\r\n                      if(item.type==\"AnalyticsTrophy\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <AnalyticsTrophy data={item} toggleSetClassName={toggleSetClassName} className={className} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"AnalyticsTransactionsCard\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <AnalyticsTransactionsCard data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"MenuIcon\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <AnalyticsTransactionsCardMenuIcon data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"AnalyticsSalesByCountries\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <AnalyticsSalesByCountries data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"AnalyticsDepositWithdraw\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <AnalyticsDepositWithdraw data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"AnalyticsWeeklyOverview\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <AnalyticsWeeklyOverview data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"ApexLineChart\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <ApexLineChart data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"ApexDonutChart\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <ApexDonutChart data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"ApexRadialBarChart\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <ApexRadialBarChart data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else if(item.type==\"AnalyticsPerformance\") {\r\n                        return (\r\n                          <Grid item xs={12} md={item.grid} key={index}>\r\n                            <AnalyticsPerformance data={item} handleOptionsMenuItemClick={handleOptionsMenuItemClick} />\r\n                          </Grid>\r\n                        )\r\n                      }\r\n                      else  {\r\n                        console.log(\"Unknown Chart Type\")\r\n                      }\r\n\r\n                    })}\r\n                    \r\n                  </Grid>\r\n                )}\r\n      \r\n    </ApexChartWrapper>\r\n  )\r\n}\r\n\r\nexport default AnalyticsDashboard\r\n","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\form\\configsetting.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\form\\datacode.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\form\\datacollection.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\form\\formdict.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\form\\formfieldshowtype.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\form\\formname\\dataformfield.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\form\\formname\\formfield.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\form\\formname\\formflow.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\form\\formname.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\form\\menuone.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\form\\menutwo.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\index.tsx",[],["3376"],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\login\\index.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\print\\middleschool\\index.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\print\\middleschool\\[id].tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\tab\\index.tsx",["3377"],[],"// ** Next Import\r\nimport { useEffect, Fragment } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport Spinner from 'src/@core/components/spinner'\r\n\r\nconst TabIndex = () => {\r\n  const router = useRouter()\r\n  const _GET = router.query\r\n  const tab = String(_GET.tab)\r\n  useEffect(() => {\r\n    if(tab && tab != undefined) {\r\n        router.push('/tab/' + tab)\r\n    }\r\n  }, [tab]) \r\n  \r\n  return (\r\n    <Fragment>\r\n        <Spinner sx={{ height: '100%' }} />\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default TabIndex\r\n","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\tab\\TabContent.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\tab\\TabHeader.tsx",["3378"],[],"// ** React Imports\r\nimport { useState, useEffect, SyntheticEvent } from 'react'\r\n\r\n// ** Next Import\r\nimport { useRouter } from 'next/router'\r\n\r\n// ** MUI Imports\r\nimport Tab from '@mui/material/Tab'\r\nimport Box from '@mui/material/Box'\r\nimport Grid from '@mui/material/Grid'\r\nimport TabPanel from '@mui/lab/TabPanel'\r\nimport TabContext from '@mui/lab/TabContext'\r\nimport Typography from '@mui/material/Typography'\r\nimport { styled, Theme } from '@mui/material/styles'\r\nimport useMediaQuery from '@mui/material/useMediaQuery'\r\nimport MuiTabList, { TabListProps } from '@mui/lab/TabList'\r\nimport CircularProgress from '@mui/material/CircularProgress'\r\n\r\n// ** Icon Imports\r\nimport Icon from 'src/@core/components/icon'\r\n\r\n// ** Demo Tabs Imports\r\nimport TabContent from './TabContent'\r\n\r\nconst TabList = styled(MuiTabList)<TabListProps>(({ theme }) => ({\r\n  '& .MuiTabs-indicator': {\r\n    display: 'none'\r\n  },\r\n  '& .Mui-selected': {\r\n    backgroundColor: theme.palette.primary.main,\r\n    color: `${theme.palette.common.white} !important`\r\n  },\r\n  '& .MuiTab-root': {\r\n    minWidth: 65,\r\n    minHeight: 40,\r\n    paddingTop: theme.spacing(2),\r\n    paddingBottom: theme.spacing(2),\r\n    borderRadius: theme.shape.borderRadius,\r\n    [theme.breakpoints.up('md')]: {\r\n      minWidth: 130\r\n    }\r\n  }\r\n}))\r\n\r\nconst TabHeader = ({ tab, allTabs }: { tab: string; allTabs: {[key:string]:any} }) => {\r\n  // ** State\r\n  const [activeTab, setActiveTab] = useState<string>(tab)\r\n  const [isLoading, setIsLoading] = useState<boolean>(false)\r\n\r\n  // ** Hooks\r\n  const router = useRouter()\r\n  const hideText = useMediaQuery((theme: Theme) => theme.breakpoints.down('md'))\r\n\r\n  const handleChange = (event: SyntheticEvent, value: string) => {\r\n    setIsLoading(true)\r\n    router.push(`./${value.toLowerCase()}`).then(() => setIsLoading(false))\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (tab && tab !== activeTab) {\r\n      setActiveTab(tab)\r\n    }\r\n  }, [tab])\r\n\r\n  const TabGroupValue = allTabs[activeTab]['group']\r\n  const LoadingValue = allTabs[activeTab]['Loading']\r\n\r\n  return (\r\n    <Grid container spacing={6}>\r\n      <Grid item xs={12}>\r\n        <TabContext value={activeTab}>\r\n          <Grid container spacing={6}>\r\n            <Grid item xs={12}>\r\n              <TabList\r\n                variant='scrollable'\r\n                scrollButtons='auto'\r\n                onChange={handleChange}\r\n                aria-label='customized tabs example'\r\n              >\r\n                {Object.entries(allTabs).map(([TabValue, Item]) => {\r\n                  if (TabGroupValue == Item['group']) {\r\n                    return (\r\n                      <Tab\r\n                        key={TabValue}\r\n                        value={Item.value}\r\n                        label={\r\n                          < Box sx={{ display: 'flex', alignItems: 'center', ...(!hideText && { '& svg': { mr: 2 } }) }}>\r\n                            <Icon icon={`mdi-${Item.icon}`} />\r\n                            {!hideText && Item.label}\r\n                          </Box>\r\n                        }\r\n                      />\r\n                    )\r\n                  }\r\n                })\r\n                }\r\n              </TabList>\r\n            </Grid>\r\n            <Grid item xs={12} sx={{ pt: (theme: any) => `${theme.spacing(4)} !important` }}>\r\n              {isLoading || (activeTab!=tab) ? (\r\n                <Box sx={{ mt: 6, display: 'flex', alignItems: 'center', flexDirection: 'column' }}>\r\n                  <CircularProgress sx={{ mb: 4 }} />\r\n                  <Typography>{LoadingValue}</Typography>\r\n                </Box>\r\n              ) : (\r\n                <TabPanel sx={{ p: 0 }} value={activeTab}>\r\n                  <TabContent backEndApi={allTabs[activeTab]['backEndApi']} action={allTabs[activeTab]['action']} id={allTabs[activeTab]['id']} />\r\n                </TabPanel>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n        </TabContext>\r\n      </Grid >\r\n    </Grid >\r\n  )\r\n}\r\n\r\nexport default TabHeader\r\n","D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\tab\\[tab].tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\user\\password.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\_app.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\pages\\_document.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\store\\index.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\store.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\types\\apps\\calendarTypes.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\types\\apps\\chatTypes.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\types\\apps\\emailTypes.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\types\\apps\\invoiceTypes.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\types\\apps\\permissionTypes.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\types\\apps\\userTypes.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\types\\forms\\AddOrEditTableLanguage.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\types\\forms\\chinacity.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\types\\forms\\chinacityshort.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\types\\forms\\fixedasset.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\types\\forms\\mdi.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\types\\forms\\reactDatepickerTypes.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\ai\\KeySetting.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\ceping\\App.tsx",["3379","3380"],[],"// ** React Imports\r\nimport { Fragment, useEffect, useState, useCallback } from 'react'\r\n\r\nimport AppModel from 'src/views/ceping/AppModel'\r\n\r\n// ** Axios Imports\r\nimport axios from 'axios'\r\nimport authConfig from 'src/configs/auth'\r\nimport AddOrEditTable from 'src/views/Enginee/AddOrEditTable'\r\nimport ViewTable from 'src/views/Enginee/ViewTable'\r\nimport { DecryptDataAES256GCM } from 'src/configs/functions'\r\nimport { useAuth } from 'src/hooks/useAuth'\r\n\r\nconst AllApp = () => {\r\n\r\n  const [pageid, setPageid] = useState<number>(0)\r\n  const [show, setShow] = useState<boolean>(false)\r\n  const [loadingAllData, setLoadingAllData] = useState<boolean>(false)\r\n  const [app, setApp] = useState<any[]>([])\r\n  const [loading, setLoading] = useState<boolean>(true)\r\n  const [loadingText, setLoadingText] = useState<string>('Loading')\r\n  const [appId, setAppId] = useState<string>('')\r\n  const [store, setStore] = useState<any>({})\r\n  const [forceUpdate, setForceUpdate] = useState(0)\r\n  const [addEditActionName, setAddEditActionName] = useState<string>('')\r\n  const [addEditActionId, setAddEditActionId] = useState<string>('')\r\n  const [editViewCounter, setEditViewCounter] = useState<number>(1)\r\n  const [externalId, setExternalId] = useState<number>(0)\r\n  const [addEditActionOpen, setAddEditActionOpen] = useState<boolean>(false)\r\n  const [viewActionOpen, setViewActionOpen] = useState<boolean>(false)\r\n  const [backEndApi, setBackEndApi] = useState<string>(\"/apps/apps_378.php\")\r\n  const [addEditViewShowInWindow, setAddEditViewShowInWindow] = useState<boolean>(false)\r\n  const [CSRF_TOKEN, setCSRF_TOKEN] = useState<string>('')\r\n\r\n  const auth = useAuth()\r\n\r\n  useEffect(() => {\r\n\r\n    if (auth && auth.user && auth.user.type && auth.user.type == \"User\") {\r\n      setBackEndApi(\"/apps/apps_378.php\")\r\n    }\r\n\r\n    if (auth && auth.user && auth.user.type && auth.user.type == \"Student\") {\r\n      setBackEndApi(\"/apps/apps_385.php\")\r\n    }\r\n    getAppsPage()\r\n\r\n    setCSRF_TOKEN('')\r\n    setAddEditViewShowInWindow(false)\r\n    setExternalId(0)\r\n\r\n  }, [])\r\n\r\n  const toggleViewTableDrawer = () => {\r\n    setAddEditActionName('view_default')\r\n    setViewActionOpen(!viewActionOpen)\r\n  }\r\n\r\n  const toggleEditTableDrawer = () => {\r\n    setAddEditActionName('edit_default')\r\n    setAddEditActionOpen(!addEditActionOpen)\r\n  }\r\n\r\n  const addUserHandleFilter = useCallback(() => {\r\n    setAddEditActionId('')\r\n    setEditViewCounter(0)\r\n  }, [])\r\n\r\n  const handleIsLoadingTipChange = () => {\r\n    console.log(\"forceUpdate\", forceUpdate)\r\n  }\r\n\r\n  const toggleImagesPreviewListDrawer = () => {\r\n    console.log(\"forceUpdate\", forceUpdate)\r\n  }\r\n\r\n  const getAppsPage = async function () {\r\n    const storedToken = window.localStorage.getItem(authConfig.storageTokenKeyName)!\r\n    \r\n    if(loadingAllData == false && storedToken)  {\r\n      setLoading(true)\r\n      const response = await axios.get(authConfig.backEndApiHost + backEndApi, {\r\n        headers: {\r\n          Authorization: storedToken\r\n        },\r\n        params: {}\r\n      }).then(res => {\r\n        const data = res.data\r\n        if(data && data.isEncrypted == \"1\" && data.data)  {\r\n          const i = data.data.slice(0, 32);\r\n          const t = data.data.slice(-32);\r\n          const e = data.data.slice(32, -32);\r\n          const k = authConfig.k;\r\n          const DecryptDataAES256GCMData = DecryptDataAES256GCM(e, i, t, k)\r\n          try{\r\n            const ResJson = JSON.parse(DecryptDataAES256GCMData)\r\n            \r\n            return ResJson\r\n          }\r\n          catch(Error: any) {\r\n            console.log(\"DecryptDataAES256GCMData Error\", Error)\r\n  \r\n            return []\r\n          }\r\n        }\r\n        else {\r\n  \r\n          return data\r\n        }\r\n      })\r\n\r\n      console.log(\"loadingAllData response\", response)\r\n\r\n      setLoadingAllData(true)\r\n      setStore(response)\r\n      setApp(response.init_default.data)\r\n      setAppId(\"\")\r\n      \r\n      const timer = setTimeout(() => {\r\n        setLoading(false);\r\n      }, 500);  \r\n\r\n      return () => {\r\n        clearTimeout(timer);\r\n      };\r\n\r\n    }\r\n    else {\r\n      setLoading(true)\r\n      setLoadingText('Finished')\r\n      const timer2 = setTimeout(() => {\r\n        setLoading(false);\r\n      }, 500);\r\n\r\n      return () => {\r\n        clearTimeout(timer2);\r\n      };\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    const handleScroll = () => {\r\n      if (window.innerHeight + document.documentElement.scrollTop !== document.documentElement.offsetHeight) return;\r\n      setPageid(pageid + 1)\r\n      getAppsPage();\r\n    };\r\n\r\n    window.addEventListener('scroll', handleScroll);\r\n\r\n    return () => {\r\n      window.removeEventListener('scroll', handleScroll);\r\n    };\r\n  }, [app]); \r\n\r\n  return (\r\n    <Fragment>\r\n\r\n      <AppModel app={app} loading={loading} loadingText={loadingText} appId={appId} setAppId={setAppId} show={show} setShow={setShow} setAddEditActionId={setAddEditActionId} setViewActionOpen={setViewActionOpen} setEditViewCounter={setEditViewCounter} viewActionOpen={viewActionOpen} setAddEditActionName={setAddEditActionName} setAddEditActionOpen={setAddEditActionOpen}/>\r\n\r\n      {store && store[addEditActionName] && store[addEditActionName]['defaultValues'] && addEditActionName == 'edit_default' && addEditActionId!='' ? <AddOrEditTable externalId={Number(externalId)} id={addEditActionId} action={addEditActionName} addEditStructInfo={store[addEditActionName]} open={addEditActionOpen} toggleAddTableDrawer={toggleEditTableDrawer} addUserHandleFilter={addUserHandleFilter} backEndApi={backEndApi} editViewCounter={editViewCounter + 1} IsGetStructureFromEditDefault={0} addEditViewShowInWindow={addEditViewShowInWindow}  CSRF_TOKEN={CSRF_TOKEN} dataGridLanguageCode={store.init_default.dataGridLanguageCode} dialogMaxWidth={store.init_default.dialogMaxWidth} toggleImagesPreviewListDrawer={toggleImagesPreviewListDrawer} handleIsLoadingTipChange={handleIsLoadingTipChange} setForceUpdate={setForceUpdate}/> : ''}\r\n\r\n      {store && store.view_default && store.view_default.defaultValues && addEditActionName.indexOf(\"view_default\") != -1 && addEditActionId!='' ? <ViewTable externalId={Number(externalId)} id={addEditActionId} action={addEditActionName} pageJsonInfor={store[addEditActionName]} open={viewActionOpen} toggleViewTableDrawer={toggleViewTableDrawer} backEndApi={backEndApi} editViewCounter={editViewCounter + 1} addEditViewShowInWindow={addEditViewShowInWindow} CSRF_TOKEN={CSRF_TOKEN} toggleImagesPreviewListDrawer={toggleImagesPreviewListDrawer} dialogMaxWidth={store.init_default.dialogMaxWidth} /> : ''}\r\n\r\n    </Fragment>\r\n  )\r\n}\r\n\r\n\r\nexport default AllApp\r\n","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\ceping\\AppModel.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\ceping\\Detail.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\charts\\apex-charts\\ApexAreaChart.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\charts\\apex-charts\\ApexBarChart.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\charts\\apex-charts\\ApexCandlestickChart.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\charts\\apex-charts\\ApexColumnChart.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\charts\\apex-charts\\ApexDonutChart.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\charts\\apex-charts\\ApexHeatmapChart.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\charts\\apex-charts\\ApexLineChart.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\charts\\apex-charts\\ApexRadarChart.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\charts\\apex-charts\\ApexRadialBarChart.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\charts\\apex-charts\\ApexScatterChart.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\dashboards\\analytics\\AnalyticsDepositWithdraw.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\dashboards\\analytics\\AnalyticsPerformance.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\dashboards\\analytics\\AnalyticsSalesByCountries.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\dashboards\\analytics\\AnalyticsSessions.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\dashboards\\analytics\\AnalyticsTable.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\dashboards\\analytics\\AnalyticsTotalEarning.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\dashboards\\analytics\\AnalyticsTotalProfit.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\dashboards\\analytics\\AnalyticsTransactionsCard.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\dashboards\\analytics\\AnalyticsTransactionsCardMenuIcon.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\dashboards\\analytics\\AnalyticsTrophy.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\dashboards\\analytics\\AnalyticsWeeklyOverview.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\dashboards\\analytics\\ButtonGroupSplit.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\Enginee\\AddOrEditTable.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\Enginee\\AddOrEditTableCore.tsx",["3381","3382","3383"],[],"// ** React Imports\r\nimport { useState, useEffect, MouseEvent, ChangeEvent, Fragment, SyntheticEvent, forwardRef, ReactElement, Ref, FocusEvent } from 'react'\r\nimport { ElementType,MouseEventHandler } from 'react'\r\n\r\n// ** MUI Imports\r\nimport Select from '@mui/material/Select'\r\nimport Switch from '@mui/material/Switch'\r\nimport Button, { ButtonProps } from '@mui/material/Button'\r\nimport MenuItem from '@mui/material/MenuItem'\r\nimport { styled } from '@mui/material/styles'\r\nimport TextField from '@mui/material/TextField'\r\nimport IconButton from '@mui/material/IconButton'\r\nimport HelpIcon from '@mui/icons-material/Help'\r\nimport InputLabel from '@mui/material/InputLabel'\r\nimport Typography from '@mui/material/Typography'\r\nimport List from '@mui/material/List'\r\nimport ListItem from '@mui/material/ListItem'\r\nimport Box, { BoxProps } from '@mui/material/Box'\r\nimport Collapse from '@mui/material/Collapse'\r\nimport FormControl from '@mui/material/FormControl'\r\nimport FormLabel from '@mui/material/FormLabel'\r\nimport Radio from '@mui/material/Radio'\r\nimport RadioGroup from '@mui/material/RadioGroup'\r\nimport OutlinedInput from '@mui/material/OutlinedInput'\r\nimport FormHelperText from '@mui/material/FormHelperText'\r\nimport InputAdornment from '@mui/material/InputAdornment'\r\nimport CircularProgress from '@mui/material/CircularProgress'\r\nimport FormControlLabel from '@mui/material/FormControlLabel'\r\nimport Autocomplete from '@mui/material/Autocomplete'\r\nimport Checkbox from '@mui/material/Checkbox'\r\nimport FormGroup from '@mui/material/FormGroup'\r\nimport Slider from '@mui/material/Slider'\r\nimport Divider from '@mui/material/Divider';\r\nimport Card from '@mui/material/Card'\r\nimport CardHeader from '@mui/material/CardHeader'\r\nimport CardContent, { CardContentProps } from '@mui/material/CardContent'\r\nimport Tooltip from \"@mui/material/Tooltip\"\r\nimport TableContainer from '@mui/material/TableContainer'\r\nimport Link from \"@mui/material/Link\"\r\nimport Table from '@mui/material/Table'\r\nimport TableRow from '@mui/material/TableRow'\r\nimport TableBody from '@mui/material/TableBody'\r\nimport TableCell from '@mui/material/TableCell'\r\nimport TableHead from '@mui/material/TableHead'\r\nimport TabContext from '@mui/lab/TabContext'\r\nimport TabPanel from '@mui/lab/TabPanel'\r\nimport Dialog from '@mui/material/Dialog'\r\nimport DialogContent from '@mui/material/DialogContent'\r\nimport { useRouter } from 'next/router'\r\nimport Fade, { FadeProps } from '@mui/material/Fade'\r\nimport { DecryptDataAES256GCM } from 'src/configs/functions'\r\n\r\n//import Tab from '@mui/material/Tab'\r\n//import TabList from '@mui/lab/TabList'\r\n\r\n// ** Custom Component Imports\r\nimport Repeater from 'src/@core/components/repeater'\r\n\r\n// ** Config\r\nimport authConfig from 'src/configs/auth'\r\n\r\n// ** Third Party Imports\r\nimport * as yup from 'yup'\r\nimport { yupResolver } from '@hookform/resolvers/yup'\r\nimport { useForm, Controller } from 'react-hook-form'\r\n\r\n//import { fr } from 'yup-locales';\r\nimport { setLocale } from 'yup';\r\nimport AddOrEditTableLanguage from 'src/types/forms/AddOrEditTableLanguage';\r\n\r\nimport axios from 'axios'\r\n\r\nimport Mousetrap from 'mousetrap'\r\n\r\n// ** Icon Imports\r\nimport Icon from 'src/@core/components/icon'\r\nimport Grid, { GridProps } from '@mui/material/Grid'\r\n\r\n// Date Locale\r\nimport DatePicker from 'react-datepicker'\r\n\r\n// ** Date Style Imports\r\nimport DatePickerWrapper from 'src/@core/styles/libs/react-datepicker'\r\n\r\n// ** Third Party Imports\r\nimport { convertFromHTML, ContentState, EditorState } from 'draft-js'\r\nimport { convertToHTML } from 'draft-convert';\r\nimport toast from 'react-hot-toast'\r\n\r\n// ** Component Import\r\nimport ReactDraftWysiwyg from 'src/@core/components/react-draft-wysiwyg'\r\nimport { EditorWrapper } from 'src/@core/styles/libs/react-draft-wysiwyg'\r\n\r\nimport DropzoneWrapper from 'src/@core/styles/libs/react-dropzone'\r\nimport { useDropzone } from 'react-dropzone'\r\n\r\n// ** Styles\r\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css'\r\n\r\nimport chinacity from 'src/types/forms/chinacity';\r\nimport chinacityshort from 'src/types/forms/chinacityshort';\r\nimport mdi from 'src/types/forms/mdi';\r\n\r\nimport {isMobile} from 'src/configs/functions'\r\n\r\n// ** Tab Content Imports\r\nimport IndexJumpDialogWindow from 'src/views/Enginee/IndexJumpDialogWindow'\r\n\r\nconst RepeatingContent = styled(Grid)<GridProps>(({ theme }) => ({\r\n    paddingRight: 0,\r\n    display: 'flex',\r\n    position: 'relative',\r\n    borderRadius: theme.shape.borderRadius,\r\n    border: `1px solid ${theme.palette.divider}`,\r\n    '& .col-title': {\r\n      top: '-1.5rem',\r\n      position: 'absolute'\r\n    },\r\n    [theme.breakpoints.down('lg')]: {\r\n      '& .col-title': {\r\n        top: '0',\r\n        position: 'relative'\r\n      }\r\n    }\r\n}))\r\n\r\nconst RepeaterWrapper = styled(CardContent)<CardContentProps>(({ theme }) => ({\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(2),\r\n    '& .repeater-wrapper + .repeater-wrapper': {\r\n        marginTop: theme.spacing(2)\r\n    }\r\n}))\r\n\r\nconst ChildTableRowAction = styled(Box)<BoxProps>(({ theme }) => ({\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'flex-start',\r\n    padding: theme.spacing(2, 1),\r\n    borderLeft: `1px solid ${theme.palette.divider}`\r\n}))\r\n\r\nconst Transition = forwardRef(function Transition(\r\n    props: FadeProps & { children?: ReactElement<any, any> },\r\n    ref: Ref<unknown>\r\n  ) {\r\n    return <Fade ref={ref} {...props} />\r\n  })\r\n\r\ninterface AddOrEditTableType {\r\n    externalId: number\r\n    id: number | string\r\n    action: string\r\n    addEditStructInfo: any\r\n    open: boolean\r\n    toggleAddTableDrawer: () => void\r\n    addUserHandleFilter: (mobileEditPageIdEnableValue: boolean) => void\r\n    backEndApi: string\r\n    editViewCounter: number\r\n    IsGetStructureFromEditDefault: number\r\n    AddtionalParams: {[key:string]:any}\r\n    CSRF_TOKEN: string\r\n    dataGridLanguageCode: string\r\n    toggleImagesPreviewListDrawer: (imagesPreviewList: string[], imagetype: string[]) => void\r\n    handleIsLoadingTipChange: (status: boolean, showText: string) => void\r\n    setForceUpdate: (value: any) => void\r\n}\r\n\r\nconst AddOrEditTableCore = (props: AddOrEditTableType) => {\r\n    // ** Props\r\n    const { externalId, id, action, addEditStructInfo, toggleAddTableDrawer, addUserHandleFilter, backEndApi, editViewCounter, IsGetStructureFromEditDefault, AddtionalParams, CSRF_TOKEN, dataGridLanguageCode, toggleImagesPreviewListDrawer, handleIsLoadingTipChange, setForceUpdate } = props\r\n    \r\n    const i18n: any = {language: 'zh'}\r\n\r\n    const isMobileData = isMobile()\r\n\r\n    useEffect(() => {\r\n        if(dataGridLanguageCode==\"zhCN\") {\r\n            setLocale(AddOrEditTableLanguage);\r\n        }\r\n    })\r\n\r\n    const router = useRouter();\r\n    \r\n    // ** Hooks\r\n    const addFilesOrDatesDefault:{[key:string]:any} = {}\r\n    const [defaultValuesNew, setDefaultValuesNew] = useState(addFilesOrDatesDefault)\r\n    const [fieldArrayShow, setFieldArrayShow] = useState(addFilesOrDatesDefault)\r\n    const [avatorShowArea, setAvatorShowArea] = useState(addFilesOrDatesDefault)\r\n    const [allFiles, setAllFiles] = useState(addFilesOrDatesDefault);\r\n    const [allDates, setAllDates] = useState(addFilesOrDatesDefault);\r\n    const [isLoading, setIsLoading] = useState<boolean>(true)\r\n    const [isSubmitLoading, setIsSubmitLoading] = useState<boolean>(false)\r\n    const [autoCompleteMulti, setAutoCompleteMulti] = useState(addFilesOrDatesDefault)\r\n    const addEditorDefault:{[key:string]:EditorState} = {}\r\n    const [allEditorValues, setAllEditorValues] = useState(addEditorDefault)\r\n    const [allFields, setAllFields] = useState(addEditStructInfo.allFields)\r\n    const [addEditStructInfo2, setAaddEditStructInfo2] = useState(addEditStructInfo)\r\n    const [uploadFilesReadonly, setUploadFilesReadonly] = useState<File[] | FileUrl[]>([])\r\n    const [childItemCounter, setChildItemCounter] = useState<number>(1)\r\n    const [deleteChildTableItemArray, setDeleteChildTableItemArray] = useState<number[]>([])\r\n    const [jumpWindowIsShow, setJumpWindowIsShow] = useState(addFilesOrDatesDefault)\r\n    const [childTableData, setChildTableData] = useState(addFilesOrDatesDefault)\r\n    const [readonlyIdArray, setReadonlyIdArray] = useState<number[]>([])\r\n    const [uploadFiles, setUploadFiles] = useState<File[] | FileUrl[]>([])\r\n    const [uploadFiles2, setUploadFiles2] = useState<File[] | FileUrl[]>([])\r\n    const [uploadImages, setUploadImages] = useState<File[] | FileUrl[]>([])\r\n    const [uploadImages2, setUploadImages2] = useState<File[] | FileUrl[]>([])\r\n    const [uploadFileFieldName, setUploadFileFieldName] = useState<string>(\"\")\r\n    const [uploadFile2FieldName, setUploadFile2FieldName] = useState<string>(\"\")\r\n    const [uploadImageFieldName, setUploadImageFieldName] = useState<string>(\"\")\r\n    const [uploadImage2FieldName, setUploadImage2FieldName] = useState<string>(\"\")\r\n    const [loopModelDataStorage, setLoopModelDataStorage] = useState(addFilesOrDatesDefault)\r\n\r\n    const [activeTab, setActiveTab] = useState<string>('detailsTab')\r\n\r\n    const storedToken = window.localStorage.getItem(authConfig.storageTokenKeyName)!\r\n\r\n    ///console.log(\"AddtionalParams======================================\",action)\r\n\r\n    const [fieldIdValue, setFieldIdValue] = useState<number>(0)\r\n    const [singleModelCounter, setSingleModelCounter] = useState<number>(0)\r\n\r\n    useEffect(() => {\r\n        if (action.indexOf(\"edit_default\") != -1 && editViewCounter > 0) {\r\n            \r\n            //setIsLoading(true)\r\n            const params = { action, id, editViewCounter, IsGetStructureFromEditDefault, externalId }\r\n            \r\n            //for (const Item in AddtionalParams) {\r\n            //    params[Item] = AddtionalParams[Item]\r\n            //}\r\n            axios\r\n                .get(authConfig.backEndApiHost + backEndApi, { headers: { Authorization: storedToken+\"::::\"+CSRF_TOKEN }, params: params })\r\n                .then(res => {\r\n                    let dataJson: any = null\r\n                    const data = res.data\r\n                    if(data && data.isEncrypted == \"1\" && data.data)  {\r\n                        const i = data.data.slice(0, 32);\r\n                        const t = data.data.slice(-32);\r\n                        const e = data.data.slice(32, -32);\r\n                        const k = authConfig.k;\r\n                        const DecryptDataAES256GCMData = DecryptDataAES256GCM(e, i, t, k)\r\n                        try{\r\n                            dataJson = JSON.parse(DecryptDataAES256GCMData)\r\n                        }\r\n                        catch(Error: any) {\r\n                            console.log(\"DecryptDataAES256GCMData view_default Error\", Error)\r\n                \r\n                            dataJson = data\r\n                        }\r\n                    }\r\n                    else {\r\n\r\n                        dataJson = data\r\n                    }\r\n                    if (dataJson.status == \"OK\") {\r\n                        \r\n                        const defaultValuesNewTemp:{[key:string]:any} = { ...dataJson.data }\r\n                        \r\n                        //Show the field when the value is match the condition\r\n                        //This field will control other fields show or not\r\n                        if (dataJson.EnableFields) {\r\n                            const fieldArrayShowTemp:{[key:string]:boolean} = {}\r\n                            for (const fieldItem of dataJson.EnableFields) {\r\n                                fieldArrayShowTemp[fieldItem] = true\r\n                            }\r\n                            setFieldArrayShow(fieldArrayShowTemp)\r\n                        }\r\n                        if (dataJson.data)              {\r\n                            const allEditorValuesTemp = { ...allEditorValues }\r\n                            const autoCompleteMultiTemp:{[key:string]:any} = {}\r\n                            const allFieldsMode = addEditStructInfo2.allFieldsMode;\r\n                            const allFieldsTemp:{[key:string]:any} = JSON.parse(JSON.stringify(addEditStructInfo2.allFields))\r\n                            allFieldsMode && allFieldsMode.map((allFieldsModeItem: any) => {\r\n                                allFields && allFields[allFieldsModeItem.value] && allFields[allFieldsModeItem.value].map((FieldArray: any, FieldArray_index: number) => {\r\n                                    if (FieldArray.type == \"autocompletemulti\") {\r\n                                        autoCompleteMultiTemp[FieldArray.name] = dataJson.data[FieldArray.name]\r\n                                    }\r\n                                    if (FieldArray.type == \"editor\" && dataJson.data[FieldArray.name]) {\r\n                                        allEditorValuesTemp[FieldArray.name] = EditorState.createWithContent(ContentState.createFromBlockArray(convertFromHTML(dataJson.data[FieldArray.name]).contentBlocks, convertFromHTML(dataJson.data[FieldArray.name]).entityMap,))\r\n                                    }\r\n                                    if (FieldArray.type == \"UserRoleMenuDetail\") {\r\n                                        const UserRoleSelect = dataJson.data[FieldArray.name].split(',')\r\n                                        setUserRoleMenuDetail(FieldArray.MenuTwoArray)\r\n                                        setMenuTwoCount(FieldArray.MenuTwoCount)\r\n                                        const TempSelectedCheckbox:{[key:string]:any[]} = {}\r\n                                        Object.keys(FieldArray.MenuTwoCount).map((MenuTwoName:string)=>{\r\n                                            TempSelectedCheckbox[MenuTwoName] = []\r\n                                        })\r\n                                        Object.keys(FieldArray.MenuTwoArray).map((MenuOneName: string) => {\r\n                                            const MenuTwoArray = FieldArray.MenuTwoArray[MenuOneName]\r\n                                            Object.keys(MenuTwoArray).map((MenuTwoName: string) => {\r\n                                                MenuTwoArray[MenuTwoName] && MenuTwoArray[MenuTwoName].map((MenuThreeRecord: any) => {\r\n                                                    if(UserRoleSelect.includes(MenuThreeRecord.id)) {\r\n                                                        TempSelectedCheckbox[MenuThreeRecord.MenuOneName].push(MenuThreeRecord.id)\r\n                                                    }\r\n                                                })\r\n                                            })\r\n                                        })\r\n                                        setSelectedCheckbox(TempSelectedCheckbox)\r\n                                        setSelectedMenuOneNameForSubmit(FieldArray.name)                                        \r\n                                    }\r\n                                    if (FieldArray.type == \"images\") {\r\n                                        setUploadImageFieldName(FieldArray.name)\r\n                                        if(dataJson.data[FieldArray.name] && dataJson.data[FieldArray.name].length>0) {\r\n                                            setUploadImages(dataJson.data[FieldArray.name])\r\n                                        }\r\n                                    }\r\n                                    if (FieldArray.type == \"files\" || FieldArray.type == \"file\" || FieldArray.type == \"xlsx\") {\r\n                                        setUploadFileFieldName(FieldArray.name)\r\n                                        if(dataJson.data[FieldArray.name] && dataJson.data[FieldArray.name].length>0) {\r\n                                            setUploadFiles(dataJson.data[FieldArray.name])\r\n                                        }\r\n                                    }\r\n                                    if (FieldArray.type == \"images2\") {\r\n                                        setUploadImage2FieldName(FieldArray.name)\r\n                                        if(dataJson.data[FieldArray.name] && dataJson.data[FieldArray.name].length>0) {\r\n                                            setUploadImages2(dataJson.data[FieldArray.name])\r\n                                        }\r\n                                    }\r\n                                    if (FieldArray.type == \"files2\") {\r\n                                        setUploadFile2FieldName(FieldArray.name)\r\n                                        if(dataJson.data[FieldArray.name] && dataJson.data[FieldArray.name].length>0) {\r\n                                            setUploadFiles2(dataJson.data[FieldArray.name])\r\n                                        }\r\n                                    }\r\n                                    if (FieldArray.type == \"readonlyimages\" || FieldArray.type == \"readonlyfiles\" || FieldArray.type == \"readonlyfile\" || FieldArray.type == \"readonlyxlsx\") {\r\n                                        setUploadFileFieldName(FieldArray.name)\r\n                                        if(dataJson.data[FieldArray.name] && dataJson.data[FieldArray.name].length>0) {\r\n                                            setUploadFilesReadonly(dataJson.data[FieldArray.name])\r\n                                        }\r\n                                    }\r\n                                    if (FieldArray.type == \"ProvinceAndCityOneLine\" && dataJson.data[FieldArray.name]) {\r\n                                        const all3Value = dataJson.data[FieldArray.name].split('-')\r\n                                        defaultValuesNewTemp[FieldArray.所在省] = all3Value[0] || ''\r\n                                        defaultValuesNewTemp[FieldArray.所在市] = all3Value[1] || ''\r\n                                        defaultValuesNewTemp[FieldArray.所在区县] = all3Value[2] || ''\r\n                                    }\r\n                                    \r\n                                    //处理身份证件类型为非居民身份证时,需要自动修改身份证件号的类型为input                       \r\n                                    if(action!=\"edit_default_1\" && action!=\"edit_default_2\" && FieldArray.name.includes(\"身份证件类型\") && dataJson.data[FieldArray.name]!=\"居民身份证\") {\r\n                                        allFieldsTemp[allFieldsModeItem.value][FieldArray_index+1]['type'] = \"input\"\r\n                                        allFieldsTemp[allFieldsModeItem.value][FieldArray_index+1]['rules']['format'] = \"\"\r\n                                    }\r\n                                    \r\n                                })\r\n                            })\r\n                            setAllFields(allFieldsTemp)\r\n                            setAllEditorValues(allEditorValuesTemp)\r\n                            setAutoCompleteMulti(autoCompleteMultiTemp)\r\n                            if(dataJson.forceuse) {\r\n                                setAaddEditStructInfo2(dataJson.edit_default)\r\n                                setAllFields(dataJson.edit_default.allFields)\r\n                            }\r\n                            if(dataJson.childtable && dataJson.childtable.ChildItemCounter) {\r\n                                setChildItemCounter(dataJson.childtable.ChildItemCounter)\r\n                            }\r\n                            if(dataJson.childtable && dataJson.childtable.readonlyIdArray) {\r\n                                setReadonlyIdArray(dataJson.childtable.readonlyIdArray)\r\n                            }\r\n                            if(dataJson.childtable && dataJson.childtable.deleteChildTableItemArray) {\r\n                                setDeleteChildTableItemArray(dataJson.childtable.deleteChildTableItemArray)\r\n                            }\r\n                            if(dataJson.childtable) {\r\n                                setChildTableData(dataJson.childtable)\r\n                            }\r\n\r\n                        }\r\n                        \r\n                        setDefaultValuesNew(defaultValuesNewTemp)\r\n                        \r\n                        //end for condition\r\n                    }\r\n                    setIsLoading(false)\r\n                })\r\n                .catch(() => {\r\n                    setIsLoading(false)\r\n                    console.log(\"axios.get editUrl return ******************************************\")\r\n                })\r\n        }\r\n        else if (action == \"add_default\" || action == \"import_default\") {\r\n            setDefaultValuesNew(addEditStructInfo2.defaultValues)\r\n            setIsLoading(false)\r\n            const allFieldsMode = addEditStructInfo2.allFieldsMode;\r\n            allFieldsMode && allFieldsMode.map((allFieldsModeItem: any) => {\r\n                allFields && allFields[allFieldsModeItem.value] && allFields[allFieldsModeItem.value].map((FieldArray: any) => {\r\n                    if (FieldArray.type == \"UserRoleMenuDetail\") {\r\n                        setUserRoleMenuDetail(FieldArray.MenuTwoArray)\r\n                        setMenuTwoCount(FieldArray.MenuTwoCount)\r\n                        const TempSelectedCheckbox:{[key:string]:any[]} = {}\r\n                        Object.keys(FieldArray.MenuTwoCount).map((MenuTwoName:string)=>{\r\n                            TempSelectedCheckbox[MenuTwoName] = []\r\n                        })\r\n                        setSelectedCheckbox(TempSelectedCheckbox)\r\n                        setSelectedMenuOneNameForSubmit(FieldArray.name)\r\n                    }\r\n                    if (FieldArray.type == \"images\") {\r\n                        setUploadImageFieldName(FieldArray.name)\r\n                    }\r\n                    if (FieldArray.type == \"files\") {\r\n                        setUploadFileFieldName(FieldArray.name)\r\n                    }\r\n                    if (FieldArray.type == \"images2\") {\r\n                        setUploadImage2FieldName(FieldArray.name)\r\n                    }\r\n                    if (FieldArray.type == \"files2\") {\r\n                        setUploadFile2FieldName(FieldArray.name)\r\n                    }\r\n                    if (FieldArray.type == \"file\") {\r\n                        setUploadFileFieldName(FieldArray.name)\r\n                    }\r\n                    if (FieldArray.type == \"xlsx\") {\r\n                        setUploadFileFieldName(FieldArray.name)\r\n                    }\r\n                })\r\n            })\r\n        }\r\n    }, [id, editViewCounter, IsGetStructureFromEditDefault]) //Need refresh data every time.\r\n\r\n    const allFieldsMode = addEditStructInfo2.allFieldsMode;\r\n    const titletext: string = addEditStructInfo2.titletext;\r\n    const defaultValues:{ [key:string]:any } = addEditStructInfo2.defaultValues;\r\n    const componentsize = addEditStructInfo2.componentsize;\r\n\r\n    //console.log(\"addEditStructInfo2\",addEditStructInfo2)\r\n    //console.log(\"allFieldsMode\",allFieldsMode)\r\n    //console.log(\"defaultValues\",defaultValues)\r\n    //console.log(\"defaultValuesNew\",defaultValuesNew)\r\n    //console.log(\"allFields\",allFields)\r\n    \r\n    const chinaIdCardCheck = (value:string|undefined) => {\r\n        if(value==undefined)  {\r\n\r\n            return false;\r\n        }\r\n        const reg = /(^\\d{18}$)|(^\\d{17}(\\d|X|x)$)/;\r\n        if (!reg.test(value)) {\r\n            \r\n            return false;\r\n        }\r\n        const wi = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2];\r\n        const ai = value.substring(0, 17);\r\n        let sum = 0;\r\n        for (let i = 0; i < 17; i++) {\r\n            sum += parseInt(ai.charAt(i)) * wi[i];\r\n        }\r\n        const y = sum % 11;\r\n        const valCode = [\"1\", \"0\", \"X\", \"9\", \"8\", \"7\", \"6\", \"5\", \"4\", \"3\", \"2\"][y];\r\n        if (valCode != value.charAt(17).toUpperCase()) {\r\n            \r\n            return false;\r\n        }\r\n        \r\n        return true;\r\n    }\r\n\r\n    let FieldShowStatus = 0\r\n    if(addEditStructInfo2 && addEditStructInfo2.model == null) {\r\n        FieldShowStatus = 2\r\n    }\r\n    if(addEditStructInfo2 && addEditStructInfo2.model == \"Form\") {\r\n        FieldShowStatus = 2\r\n    }\r\n    if(addEditStructInfo2 && addEditStructInfo2.model == \"Loop\") {\r\n        FieldShowStatus = 1\r\n    }\r\n    \r\n    //Yup check\r\n    const yupCheckMap:{[key:string]:any} = {}\r\n    {\r\n        allFieldsMode && allFieldsMode.map((allFieldsModeItem: any) => {\r\n            allFields && allFields[allFieldsModeItem.value] && allFields[allFieldsModeItem.value].map((FieldArray: any, FieldIndex: number) => {\r\n                if((FieldShowStatus == 1 && fieldIdValue == FieldIndex) || (FieldShowStatus == 2))   {\r\n                    if (FieldArray.type == \"input\" && FieldArray.rules) {\r\n                        let yupCheck = yup.string().trim().label(FieldArray.label)\r\n                        FieldArray.rules.required ? yupCheck = yupCheck.required() : '';\r\n                        FieldArray.rules.min > 0 ? yupCheck = yupCheck.min(FieldArray.rules.min) : '';\r\n                        FieldArray.rules.max > 0 ? yupCheck = yupCheck.max(FieldArray.rules.max) : '';\r\n                        FieldArray.rules.format == 'onlylowerletter' ? yupCheck = yupCheck.matches(/^[a-z_-]+$/, FieldArray.rules.invalidtext) : '';\r\n                        FieldArray.rules.format == 'onlyupperletter' ? yupCheck = yupCheck.matches(/^[A-Z_-]+$/, FieldArray.rules.invalidtext) : '';\r\n                        FieldArray.rules.format == 'onlyletterandnumber' ? yupCheck = yupCheck.matches(/^[a-zA-Z0-9_-]+$/, FieldArray.rules.invalidtext) : '';\r\n                        FieldArray.rules.format == 'onlynumber' ? yupCheck = yupCheck.matches(/^[0-9]+$/, FieldArray.rules.invalidtext) : '';\r\n                        FieldArray.rules.format == 'passwordstrong' ? yupCheck = yupCheck.matches(/^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)(?=.*[@$!%*#?&]).{8,}$/, FieldArray.rules.invalidtext) : '';\r\n                        FieldArray.rules.format == 'passwordmiddle' ? yupCheck = yupCheck.matches(/^(?![a-zA-z]+$)(?!\\d+$)(?![!@#$%^&*]+$)[a-zA-Z\\d!@#$%^&*]+$/, FieldArray.rules.invalidtext) : '';\r\n                        FieldArray.rules.format == 'passwordweak' ? yupCheck = yupCheck.matches(/^(?=.*[a-zA-Z])(?=.*\\d).+$/, FieldArray.rules.invalidtext) : '';\r\n                        FieldArray.rules.format == 'chinaidcard' ? yupCheck = yupCheck.test('custom-test', FieldArray.rules.invalidtext, chinaIdCardCheck) : '';\r\n                        FieldArray.rules.format == 'bankcard' ? yupCheck = yupCheck.matches(/^([1-9]{1})(\\d{15}|\\d{18})$/, FieldArray.rules.invalidtext) : '';\r\n                        FieldArray.rules.format == 'chinamobile' ? yupCheck = yupCheck.matches(/^((\\+|00)86)?1[3-9]\\d{9}$/, FieldArray.rules.invalidtext) : '';\r\n                        FieldArray.rules.format == 'chinapassport' ? yupCheck = yupCheck.matches(/(^[EeKkGgDdSsPpHh]\\d{8}$)|(^(([Ee][a-fA-F])|([DdSsPp][Ee])|([Kk][Jj])|([Mm][Aa])|(1[45]))\\d{7}$)/, FieldArray.rules.invalidtext) : '';\r\n                        FieldArray.rules.format == 'url' ? yupCheck = yupCheck.matches(/^((https?|http):\\/\\/)?([\\da-z.-]+)\\.([a-z.]{2,6})(\\/\\w\\.-]*)*\\/?/, FieldArray.rules.invalidtext) : '';\r\n                        FieldArray.rules.format == 'chinese' ? yupCheck = yupCheck.matches(/^(?:[\\u3400-\\u4DB5\\u4E00-\\u9FEA\\uFA0E\\uFA0F\\uFA11\\uFA13\\uFA14\\uFA1F\\uFA21\\uFA23\\uFA24\\uFA27-\\uFA29]|[\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0])+$/, FieldArray.rules.invalidtext) : '';\r\n                        FieldArray.rules.format == 'username' ? yupCheck = yupCheck.matches(/^[a-zA-Z0-9_-]{4,16}$/, FieldArray.rules.invalidtext) : '';\r\n                        FieldArray.rules.format == 'chinatelphone' ? yupCheck = yupCheck.matches(/\\d{3}-\\d{8}|\\d{4}-\\d{7}/, FieldArray.rules.invalidtext) : '';\r\n                        yupCheckMap[FieldArray.name] = yupCheck\r\n                    }\r\n                    else if (FieldArray.type == \"email\" && FieldArray.rules && FieldArray.rules.required) {\r\n                        yupCheckMap[FieldArray.name] = yup.string().email().required().label(FieldArray.label)\r\n                    }\r\n                    else if ( (FieldArray.type == \"textarea\" || FieldArray.type == \"autocomplete\" || FieldArray.type == \"tablefilter\" || FieldArray.type == \"tablefiltercolor\" || FieldArray.type == \"radiogroup\") && FieldArray.rules && FieldArray.rules.required) {\r\n                        yupCheckMap[FieldArray.name] = yup.string().required().label(FieldArray.label).nullable()\r\n                    }\r\n                    else if ((FieldArray.type == \"date\" || FieldArray.type == \"date1\" || FieldArray.type == \"date2\" || FieldArray.type == \"datetime\" || FieldArray.type == \"month\" || FieldArray.type == \"year\" || FieldArray.type == \"monthrange\" || FieldArray.type == \"yearrange\" || FieldArray.type == \"quarter\") && FieldArray.rules && FieldArray.rules.required) {\r\n                        let yupCheck = yup.string().trim().label(FieldArray.label)\r\n                        FieldArray.rules.required ? yupCheck = yupCheck.required() : '';                    \r\n                        yupCheckMap[FieldArray.name] = yupCheck\r\n                    }\r\n                    else if (FieldArray.type == \"avatar\" && FieldArray.rules && FieldArray.rules.required)  {\r\n                        //yupCheckMap[FieldArray.name] = yup.string().required().label(FieldArray.label)\r\n                    }\r\n                    else if (FieldArray.type == \"file\" && FieldArray.rules && FieldArray.rules.required)    {\r\n                        //yupCheckMap[FieldArray.name] = yup.string().required().label(FieldArray.label)\r\n                    }\r\n                    else if (FieldArray.type == \"files\" && FieldArray.rules && FieldArray.rules.required && uploadFileFieldName!=undefined && uploadFileFieldName!=\"\" && uploadFiles!=undefined && uploadFiles.length==0)    {\r\n                        yupCheckMap[FieldArray.name] = yup.string().required().label(FieldArray.label)\r\n                    }\r\n                    else if (FieldArray.type == \"files2\" && FieldArray.rules && FieldArray.rules.required && uploadFile2FieldName!=undefined && uploadFile2FieldName!=\"\" && uploadFiles2!=undefined && uploadFiles2.length==0)    {\r\n                        yupCheckMap[FieldArray.name] = yup.string().required().label(FieldArray.label)\r\n                    }\r\n                    else if (FieldArray.type == \"images\" && FieldArray.rules && FieldArray.rules.required && uploadImageFieldName!=undefined && uploadImageFieldName!=\"\" && uploadImages!=undefined && uploadImages.length==0)    {\r\n                        yupCheckMap[FieldArray.name] = yup.string().required().label(FieldArray.label)\r\n                    }\r\n                    else if (FieldArray.type == \"images2\" && FieldArray.rules && FieldArray.rules.required && uploadImage2FieldName!=undefined && uploadImage2FieldName!=\"\" && uploadImages2!=undefined && uploadImages2.length==0)    {\r\n                        yupCheckMap[FieldArray.name] = yup.string().required().label(FieldArray.label)\r\n                    }\r\n                    else if (FieldArray.type == \"xlsx\" && FieldArray.rules && FieldArray.rules.required)    {\r\n                        //yupCheckMap[FieldArray.name] = yup.array().of(yup.string().required('Array elements cannot be empty')).label(FieldArray.label)\r\n                    }\r\n                    else if (FieldArray.type == \"password\" && FieldArray.rules && FieldArray.rules.required)  {\r\n                        yupCheckMap[FieldArray.name] = yup.string().required().label(FieldArray.label)\r\n                    }\r\n                    else if (FieldArray.type == \"comfirmpassword\" && FieldArray.rules && FieldArray.rules.required)  {\r\n                        yupCheckMap[FieldArray.name] = yup.string().required().min(6).matches(/^(?=.*[a-zA-Z])(?=.*\\d).+$/, FieldArray.rules.invalidtext).label(FieldArray.label)\r\n                    }\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    const yupCheckMapSchema = yup.object().shape(yupCheckMap)\r\n\r\n    // ** Hooks\r\n    const {\r\n        reset,\r\n        control,\r\n        setValue,\r\n        handleSubmit,\r\n        formState: { errors }\r\n    } = useForm({\r\n        defaultValues,\r\n        mode: 'onChange',\r\n        resolver: yupResolver(yupCheckMapSchema)\r\n    })\r\n\r\n    const onSubmit = (data: {[key:string]:any}) => {\r\n        const toastId = toast.loading(addEditStructInfo2.submitloading)\r\n        setIsSubmitLoading(true)\r\n        handleIsLoadingTipChange(true, addEditStructInfo2.ImportLoading)\r\n        const storedToken = window.localStorage.getItem(authConfig.storageTokenKeyName)!\r\n        if (!storedToken) {\r\n            toggleAddTableDrawer()\r\n            reset()\r\n            \r\n            return\r\n        }\r\n        \r\n        console.log(\"data\", data)\r\n        console.log(\"loopModelDataStorage\", loopModelDataStorage)\r\n        \r\n        //upload file \r\n        const formData = new FormData();\r\n\r\n        const dataMap = new Map(Object.entries({...data, ...loopModelDataStorage}));\r\n        for (const [key, value] of dataMap.entries()) {\r\n            formData.append(key, value=='请选择'?'':value);\r\n        }\r\n        const allFilesMap = new Map(Object.entries(allFiles));\r\n        for (const [key, value] of allFilesMap.entries()) {\r\n            formData.append(key, value?value:'');\r\n        }\r\n        const allDatesMap = new Map(Object.entries(allDates));\r\n        for (const [key, value] of allDatesMap.entries()) {\r\n            formData.append(key, value?value:'');\r\n        }\r\n        const autoCompleteMultiMap = new Map(Object.entries(autoCompleteMulti));\r\n        for (const [key, value] of autoCompleteMultiMap.entries()) {\r\n            formData.append(key, value?value:'');\r\n        }\r\n        const allEditorValuesMap = new Map(Object.entries(allEditorValues));\r\n        for (const [key, value] of allEditorValuesMap.entries()) {\r\n            formData.append(key, convertToHTML(value.getCurrentContent()));\r\n        }\r\n        for (const Item in AddtionalParams) {\r\n            formData.append(Item, AddtionalParams[Item]);\r\n        }\r\n        if(selectedMenuOneNameForSubmit!=undefined && selectedMenuOneNameForSubmit!=\"\") {\r\n            const selectedCheckboxResult:string[] = []\r\n            Object.keys(selectedCheckbox).map((selectedCheckboxOne:string)=>{\r\n                selectedCheckbox[selectedCheckboxOne].map((selectedCheckboxElement:string)=>{\r\n                    selectedCheckboxResult.push(selectedCheckboxElement)\r\n                })\r\n            })\r\n            formData.append(selectedMenuOneNameForSubmit, selectedCheckboxResult.join(','));\r\n            console.log(\"formData\",formData)\r\n        }\r\n        if(uploadFileFieldName!=undefined && uploadFileFieldName!=\"\" && uploadFiles!=undefined && uploadFiles.length>0) {\r\n            uploadFiles.forEach((file: File | FileUrl) =>     {\r\n                console.log(\"file\", file)\r\n                if(file && (file.type==\"image\" || file.type==\"file\" || file.type==\"Word\" || file.type==\"Excel\" || file.type==\"PowerPoint\" || file.type==\"pdf\") )  {\r\n                    //Exist Files\r\n                    formData.append(`${uploadFileFieldName}_OriginalFieldValue[]`, file.name);\r\n                }\r\n                else {\r\n                    //New Files\r\n                    formData.append(`${uploadFileFieldName}[]`, file);\r\n                }\r\n            });\r\n        }\r\n        if(uploadFile2FieldName!=undefined && uploadFile2FieldName!=\"\" && uploadFiles2!=undefined && uploadFiles2.length>0) {\r\n            uploadFiles2.forEach((file: File | FileUrl) =>     {\r\n                console.log(\"file\", file)\r\n                if(file && (file.type==\"image\" || file.type==\"file\" || file.type==\"Word\" || file.type==\"Excel\" || file.type==\"PowerPoint\" || file.type==\"pdf\") )  {\r\n                    //Exist Files\r\n                    formData.append(`${uploadFile2FieldName}_OriginalFieldValue[]`, file.name);\r\n                }\r\n                else {\r\n                    //New Files\r\n                    formData.append(`${uploadFile2FieldName}[]`, file);\r\n                }\r\n            });\r\n        }\r\n        if(uploadImageFieldName!=undefined && uploadImageFieldName!=\"\" && uploadImages!=undefined && uploadImages.length>0) {\r\n            uploadImages.forEach((file: File | FileUrl) =>     {\r\n                console.log(\"file\", file)\r\n                if(file && (file.type==\"image\" || file.type==\"file\" || file.type==\"Word\" || file.type==\"Excel\" || file.type==\"PowerPoint\" || file.type==\"pdf\") )  {\r\n                    //Exist Files\r\n                    formData.append(`${uploadImageFieldName}_OriginalFieldValue[]`, file.name);\r\n                }\r\n                else {\r\n                    //New Files\r\n                    formData.append(`${uploadImageFieldName}[]`, file);\r\n                }\r\n            });\r\n        }\r\n        if(uploadImage2FieldName!=undefined && uploadImage2FieldName!=\"\" && uploadImages2!=undefined && uploadImages2.length>0) {\r\n            uploadImages2.forEach((file: File | FileUrl) =>     {\r\n                console.log(\"file\", file)\r\n                if(file && (file.type==\"image\" || file.type==\"file\" || file.type==\"Word\" || file.type==\"Excel\" || file.type==\"PowerPoint\" || file.type==\"pdf\") )  {\r\n                    //Exist Files\r\n                    formData.append(`${uploadImage2FieldName}_OriginalFieldValue[]`, file.name);\r\n                }\r\n                else {\r\n                    //New Files\r\n                    formData.append(`${uploadImage2FieldName}[]`, file);\r\n                }\r\n            });\r\n        }\r\n        formData.append('ChildItemCounter', String(childItemCounter));\r\n        formData.append('deleteChildTableItemArray', deleteChildTableItemArray.join(','));\r\n        formData.append('readonlyIdArray', readonlyIdArray.join(','));\r\n\r\n        const postUrl = authConfig.backEndApiHost + backEndApi + \"?action=\" + action + \"_data&id=\" + id + \"&externalId=\" + externalId\r\n        fetch(\r\n            postUrl,\r\n            {\r\n                headers: { Authorization: storedToken+\"::::\"+CSRF_TOKEN },\r\n                method: 'POST',\r\n                body: formData,\r\n            }\r\n        )\r\n            .then((response: any) => response.json())\r\n            .then((result: any) => {\r\n                let dataJson: any = null\r\n                const data: any = result\r\n                if(data && data.isEncrypted == \"1\" && data.data)  {\r\n                    const i = data.data.slice(0, 32);\r\n                    const t = data.data.slice(-32);\r\n                    const e = data.data.slice(32, -32);\r\n                    const k = authConfig.k;\r\n                    const DecryptDataAES256GCMData = DecryptDataAES256GCM(e, i, t, k)\r\n                    try{\r\n                        dataJson = JSON.parse(DecryptDataAES256GCMData)\r\n                    }\r\n                    catch(Error: any) {\r\n                        console.log(\"DecryptDataAES256GCMData view_default Error\", Error)\r\n            \r\n                        dataJson = data\r\n                    }\r\n                }\r\n                else {\r\n\r\n                    dataJson = data\r\n                }\r\n                console.log('Success:', dataJson);\r\n                if (dataJson && dataJson.status == \"OK\") {\r\n                    toast.success(dataJson.msg)\r\n                    \r\n                    // clear avatar and files\r\n                    setAvatorShowArea({})\r\n                    setAllFiles({})\r\n                    setAllDates({})\r\n                    setForceUpdate(Math.random())\r\n                    console.log(\"Math.random()\", Math.random())\r\n\r\n                    //setDefaultValuesNew({})\r\n                    toggleAddTableDrawer()\r\n                    reset()\r\n                    addUserHandleFilter(action == 'edit_default' ? true : false);\r\n                }\r\n                else if (dataJson && dataJson.status == \"ERROR\") {\r\n                    toast.error(dataJson.msg)\r\n                    \r\n                    // clear avatar and files\r\n                    setAvatorShowArea({})\r\n                    setAllFiles({})\r\n                    setAllDates({})\r\n                    setForceUpdate(Math.random())\r\n                    console.log(\"Math.random()\", Math.random())\r\n\r\n                    //setDefaultValuesNew({})\r\n                    toggleAddTableDrawer()\r\n                    reset()\r\n                    addUserHandleFilter(action == 'edit_default' ? true : false);\r\n                }\r\n                else {\r\n                    toast.error(dataJson.msg)\r\n                }\r\n                toast.dismiss(toastId);\r\n                setIsSubmitLoading(false)\r\n                handleIsLoadingTipChange(false, addEditStructInfo2.ImportLoading)\r\n\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error:', error);\r\n                setIsSubmitLoading(false)\r\n                handleIsLoadingTipChange(false, addEditStructInfo2.ImportLoading)\r\n\r\n                // clear avatar and files\r\n                setAvatorShowArea({})\r\n                setAllFiles({})\r\n                setAllDates({})\r\n\r\n                //setDefaultValuesNew({})\r\n                toggleAddTableDrawer()\r\n                reset()\r\n            });\r\n            \r\n    }\r\n\r\n    useEffect(() => {        \r\n        Mousetrap.bind(['alt+s', 'command+s', 'command+enter'], () => {handleSubmit(onSubmit)();});\r\n        Mousetrap.bind(['alt+c', 'command+c'], handleClose);        \r\n        \r\n        return () => {\r\n            Mousetrap.unbind(['alt+s', 'command+s', 'command+enter']);\r\n            Mousetrap.unbind(['alt+c', 'command+c']);\r\n        }\r\n    });\r\n\r\n    const handleClose = () => {\r\n        setAvatorShowArea({})\r\n        setAllFiles({})\r\n        setAllDates({})\r\n        \r\n        //setDefaultValuesNew({})\r\n        toggleAddTableDrawer()\r\n        reset()\r\n    }\r\n\r\n    const handleDialogWindowClose = () => {\r\n        setJumpWindowIsShow({})\r\n        setActiveTab('detailsTab')\r\n    }\r\n\r\n    const handleDialogWindowCloseWithParam = (field: string, value: string, fieldCode: string, valueCode: string) => {\r\n        const defaultValuesNewTemp:{[key:string]:any} = { ...defaultValuesNew }\r\n        defaultValuesNewTemp[field] = value\r\n        defaultValuesNewTemp[fieldCode] = valueCode\r\n        setDefaultValuesNew(defaultValuesNewTemp)\r\n        setJumpWindowIsShow({})\r\n        setActiveTab('detailsTab')\r\n        console.log(\"defaultValuesNewTemp\", defaultValuesNewTemp)\r\n    }\r\n\r\n    const handleAvatorChange = (e: ChangeEvent) => {\r\n        const reader = new FileReader()\r\n        const { files } = e.target as HTMLInputElement\r\n        if (files && files.length !== 0) {\r\n            reader.onloadend = () => {\r\n                const avatorShowAreaTemp:{[key:string]:any} = { ...avatorShowArea }\r\n                avatorShowAreaTemp[(e.target as HTMLInputElement).name] = reader.result as string\r\n                setAvatorShowArea(avatorShowAreaTemp)\r\n                const allFilesTemp:{[key:string]:any} = { ...allFiles }\r\n                allFilesTemp[(e.target as HTMLInputElement).name] = files[0]\r\n                setAllFiles(allFilesTemp)\r\n            };\r\n            reader.readAsDataURL(files[0]);\r\n        }\r\n    }\r\n\r\n    const handleAvatorReset: MouseEventHandler<HTMLButtonElement> = (e) => {\r\n        const avatorShowAreaTemp:{[key:string]:any} = { ...avatorShowArea }\r\n        avatorShowAreaTemp[(e.target as HTMLInputElement).name] = '/images/avatars/1.png'\r\n        setAvatorShowArea(avatorShowAreaTemp)\r\n        const allFilesTemp:{[key:string]:any} = { ...allFiles }\r\n        allFilesTemp[(e.target as HTMLInputElement).name] = undefined\r\n        setAllFiles(allFilesTemp)\r\n        const defaultValuesNewTemp:{[key:string]:any} = { ...defaultValuesNew }\r\n        defaultValuesNewTemp[(e.target as HTMLInputElement).name] = \"\"\r\n        setDefaultValuesNew(defaultValuesNewTemp)\r\n    }\r\n\r\n    const ImgStyled = styled('img')(({ theme }) => ({\r\n        width: 110,\r\n        height: 110,\r\n        borderRadius: 4,\r\n        marginRight: theme.spacing(5)\r\n    }))\r\n\r\n    const ImgStyled68 = styled('img')(({ theme }) => ({\r\n        width: 68,\r\n        borderRadius: 4,\r\n        marginRight: theme.spacing(1)\r\n    }))\r\n\r\n    const CustomLink = styled(Link)({\r\n        textDecoration: \"none\",\r\n        color: \"inherit\",\r\n    })\r\n\r\n    const ButtonStyled = styled(Button)<ButtonProps & { component?: ElementType; htmlFor?: string }>(({ theme }) => ({\r\n        [theme.breakpoints.down('sm')]: {\r\n            width: '100%',\r\n            textAlign: 'center'\r\n        }\r\n    }))\r\n\r\n    const ResetButtonStyled = styled(Button)<ButtonProps>(({ theme }) => ({\r\n        marginLeft: theme.spacing(4),\r\n        [theme.breakpoints.down('sm')]: {\r\n            width: '100%',\r\n            marginLeft: 0,\r\n            textAlign: 'center',\r\n            marginTop: theme.spacing(4)\r\n        }\r\n    }))\r\n\r\n    interface State {\r\n        password: string\r\n        password2: string\r\n        showPassword: boolean\r\n        showPassword2: boolean\r\n    }\r\n    const [state, setState] = useState<State>({\r\n        password: '',\r\n        password2: '',\r\n        showPassword: false,\r\n        showPassword2: false\r\n    })\r\n    \r\n    // Handle Password\r\n    const handleClickShowPassword = () => {\r\n        setState({ ...state, showPassword: !state.showPassword })\r\n    }\r\n    const handleMouseDownPassword = (event: MouseEvent<HTMLButtonElement>) => {\r\n        event.preventDefault()\r\n    }\r\n    \r\n    // Handle Confirm Password\r\n    const handleClickShowConfirmPassword = () => {\r\n        setState({ ...state, showPassword2: !state.showPassword2 })\r\n    }\r\n    const handleMouseDownConfirmPassword = (event: MouseEvent<HTMLButtonElement>) => {\r\n        event.preventDefault()\r\n    }\r\n    \r\n    \r\n    const RoleMenuElementPermission = (id: string, MenuOneName: string) => {\r\n        const arr:{[key:string]:any[]} = selectedCheckbox\r\n        if (selectedCheckbox[MenuOneName] && selectedCheckbox[MenuOneName].includes(id)) {\r\n          arr[MenuOneName].splice(arr[MenuOneName].indexOf(id), 1)\r\n          setSelectedCheckbox({...arr})\r\n        } \r\n        else {\r\n            if(arr[MenuOneName]==undefined) {\r\n                arr[MenuOneName] = []\r\n            }\r\n            arr[MenuOneName].push(id)\r\n            setSelectedCheckbox({...arr})\r\n        }\r\n    }\r\n    const [userRoleMenuDetail, setUserRoleMenuDetail] = useState<{[key:string]:any}>({})\r\n    const [menuTwoCount, setMenuTwoCount] = useState<{[key:string]:any}>({})\r\n    const [selectedCheckbox, setSelectedCheckbox] = useState<{[key:string]:any[]}>({})\r\n    const [selectedMenuOneNameForSubmit, setSelectedMenuOneNameForSubmit] = useState<string>(\"\")\r\n    const [isIndeterminateCheckbox, setIsIndeterminateCheckbox] = useState<{[key:string]:boolean}>({})\r\n\r\n    const handleSelectAllCheckbox = (e:any) => {\r\n        const chooseMenuOneName = e.target.value\r\n        if (isIndeterminateCheckbox[chooseMenuOneName]) {\r\n            const TempSelectedCheckbox:{[key:string]:any} = { ...selectedCheckbox }\r\n            TempSelectedCheckbox[chooseMenuOneName] = []\r\n            setSelectedCheckbox(TempSelectedCheckbox)\r\n        } \r\n        else {\r\n            const SectionMenuArray = userRoleMenuDetail[chooseMenuOneName]\r\n            Object.keys(SectionMenuArray).map((SectionMenuKey: any) => {\r\n                SectionMenuArray[SectionMenuKey].map((SectionThreeKey: any) => {\r\n                    RoleMenuElementPermission(SectionThreeKey['id'], chooseMenuOneName)\r\n                })\r\n            })\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        const isIndeterminateCheckboxTemp = {...isIndeterminateCheckbox}\r\n        Object.keys(selectedCheckbox).map((selectedCheckboxKey: any) => {\r\n            const selectedCheckboxSubArray = selectedCheckbox[selectedCheckboxKey]\r\n            if (selectedCheckboxSubArray && selectedCheckboxSubArray.length > 0 && selectedCheckboxSubArray.length) {\r\n                isIndeterminateCheckboxTemp[selectedCheckboxKey] = true\r\n            } else {\r\n                isIndeterminateCheckboxTemp[selectedCheckboxKey] = false\r\n            }\r\n        })        \r\n        setIsIndeterminateCheckbox(isIndeterminateCheckboxTemp)\r\n    }, [selectedCheckbox])\r\n      \r\n    const formatDateItem = (value:number) => {\r\n        let str = '' + value;\r\n        while (str.length < 2) {\r\n            str = '0' + str;\r\n        }\r\n        \r\n        return str;\r\n    }\r\n\r\n    interface FileUrl extends File {\r\n        url: string;\r\n    }\r\n\r\n    const { getRootProps: getRootPropsFiles, getInputProps: getInputPropsFiles } = useDropzone({\r\n        onDrop: (acceptedFiles: File[]) => {\r\n            const filtered = uploadFiles\r\n            acceptedFiles.map((file: File) => filtered.push(Object.assign(file)))\r\n            setUploadFiles([...filtered])\r\n        }\r\n    })\r\n\r\n    const { getRootProps: getRootPropsFiles2, getInputProps: getInputPropsFiles2 } = useDropzone({\r\n        onDrop: (acceptedFiles: File[]) => {\r\n            const filtered = uploadFiles2\r\n            acceptedFiles.map((file: File) => filtered.push(Object.assign(file)))\r\n            setUploadFiles2([...filtered])\r\n        }\r\n    })\r\n\r\n    const { getRootProps: getRootPropsFile, getInputProps: getInputPropsFile } = useDropzone({\r\n        maxFiles: 1,\r\n        onDrop: (acceptedFiles: File[]) => {\r\n            const filtered = uploadFiles\r\n            acceptedFiles.map((file: File) => filtered.push(Object.assign(file)))\r\n            setUploadFiles([...filtered])\r\n        }\r\n    })\r\n\r\n    const { getRootProps: getRootPropsXlsx, getInputProps: getInputPropsXlsx } = useDropzone({\r\n        maxFiles: 1,\r\n        maxSize: 20000000,\r\n        accept: {\r\n        'application/vnd.ms-excel': ['.xls'],\r\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': ['.xlsx']\r\n        },\r\n        onDrop: (acceptedFiles: File[]) => {\r\n            const filtered = uploadFiles\r\n            acceptedFiles.map((file: File) => filtered.push(Object.assign(file)))\r\n            setUploadFiles([...filtered])\r\n        },\r\n        onDropRejected: () => {\r\n            toast.error('You can only upload 1 Excel file & maximum size of 20 MB.', {\r\n            duration: 2000\r\n            })\r\n        }\r\n    })\r\n\r\n    const { getRootProps: getRootPropsImages, getInputProps: getInputPropsImages } = useDropzone({\r\n        maxFiles: 10,\r\n        maxSize: 20000000,\r\n        accept: {\r\n        'image/png': ['.png'],\r\n        'image/jpeg': ['.jpeg'],\r\n        'image/jpg': ['.jpg'],\r\n        'image/gif': ['.gif']\r\n        },\r\n        onDrop: (acceptedFiles: File[]) => {\r\n            const filtered = uploadImages\r\n            acceptedFiles.map((file: File) => filtered.push(Object.assign(file)))\r\n            setUploadImages([...filtered])\r\n        },\r\n        onDropRejected: () => {\r\n            toast.error('You can only upload 10 images & maximum size of 20 MB.', {\r\n            duration: 2000\r\n            })\r\n        }\r\n    })\r\n\r\n    const { getRootProps: getRootPropsImages2, getInputProps: getInputPropsImages2 } = useDropzone({\r\n        maxFiles: 10,\r\n        maxSize: 20000000,\r\n        accept: {\r\n        'image/png': ['.png'],\r\n        'image/jpeg': ['.jpeg'],\r\n        'image/jpg': ['.jpg'],\r\n        'image/gif': ['.gif']\r\n        },\r\n        onDrop: (acceptedFiles: File[]) => {\r\n            const filtered = uploadImages2\r\n            acceptedFiles.map((file: File) => filtered.push(Object.assign(file)))\r\n            setUploadImages2([...filtered])\r\n        },\r\n        onDropRejected: () => {\r\n            toast.error('You can only upload 10 images & maximum size of 20 MB.', {\r\n            duration: 2000\r\n            })\r\n        }\r\n    })\r\n\r\n    const renderFilePreview = (file: File | FileUrl, width: number, height: number) => {\r\n        if (file && 'webkitRelativePath' in file && file['webkitRelativePath']!=\"\" && file['type']==\"image\") {\r\n            return <img width={width} height={height} alt={file.name} style={{padding: \"1px\"}} src={authConfig.backEndApiHost+file['webkitRelativePath']} />\r\n        }\r\n        else if (file && 'webkitRelativePath' in file && file['webkitRelativePath']!=\"\" && file['type']!=\"image\") {\r\n            return <Icon icon='mdi:file-document-outline' />\r\n        }\r\n        else if (file.type.startsWith('image')) {\r\n            return <img width={width} height={height} alt={file.name} style={{padding: \"1px\"}} src={URL.createObjectURL(file as any)} />\r\n        } \r\n        else {\r\n            return <Icon icon='mdi:file-document-outline' />\r\n        }\r\n    }\r\n    const handleRemoveFile = (file: File) => {\r\n        const filtered = uploadFiles.filter((i: File) => i.name !== file.name)\r\n        setUploadFiles([...filtered])\r\n    }\r\n    const handleRemoveFile2 = (file: File) => {\r\n        const filtered = uploadFiles2.filter((i: File) => i.name !== file.name)\r\n        setUploadFiles2([...filtered])\r\n    }\r\n    const handleRemoveImage = (file: File) => {\r\n        const filtered = uploadImages.filter((i: File) => i.name !== file.name)\r\n        setUploadImages([...filtered])\r\n    }\r\n    const handleRemoveImage2 = (file: File) => {\r\n        const filtered = uploadImages2.filter((i: File) => i.name !== file.name)\r\n        setUploadImages2([...filtered])\r\n    }\r\n    const handleRemoveAllFiles = () => {\r\n        setUploadFiles([])\r\n    }\r\n    const handleRemoveAllFiles2 = () => {\r\n        setUploadFiles2([])\r\n    }\r\n    const handleRemoveAllImages = () => {\r\n        setUploadImages([])\r\n    }\r\n    const handleRemoveAllImages2 = () => {\r\n        setUploadImages2([])\r\n    }\r\n    const deleteChildTableItem = (e: SyntheticEvent, i: number) => {\r\n        e.preventDefault()\r\n        setDeleteChildTableItemArray([...deleteChildTableItemArray, i])\r\n\r\n        // @ts-ignore\r\n        e.target.closest('.repeater-wrapper').remove()\r\n    }\r\n\r\n    useEffect(()=>{\r\n        allFieldsMode && allFieldsMode.map((allFieldsModeItem: any) => {\r\n            if(allFieldsModeItem && allFieldsModeItem.value) {\r\n                setSingleModelCounter(allFields[allFieldsModeItem.value].length - 1)\r\n            }\r\n        })\r\n    }, [allFieldsMode])\r\n\r\n    return (\r\n        <Fragment>\r\n            {titletext && titletext != \"\" && !isLoading ?\r\n                <Box sx={{ mb: 8, textAlign: 'center' }}>\r\n                    <Typography variant='h5' sx={{ mb: 3 }}>\r\n                        {titletext}\r\n                    </Typography>\r\n                    <Typography variant='body2'>{addEditStructInfo2.titlememo ? addEditStructInfo2.titlememo : ''}</Typography>\r\n                </Box>\r\n                : ''\r\n            }\r\n            <Grid container spacing={6}>\r\n                {isLoading ? (\r\n                    <Grid item xs={12} sm={12} container justifyContent=\"space-around\">\r\n                        <Box sx={{ mt: 6, mb: 6, display: 'flex', alignItems: 'center', flexDirection: 'column' }}>\r\n                            <CircularProgress />\r\n                            <Typography>{addEditStructInfo2.loading}</Typography>\r\n                        </Box>\r\n                    </Grid>\r\n                ) : (\r\n                    <form onSubmit={handleSubmit(onSubmit)} style={{width: '100%'}}>\r\n                        {allFieldsMode && allFieldsMode.map((allFieldsModeItem: any, allFieldsModeIndex: number) => {\r\n                            \r\n                            return (\r\n                                <Card key={\"AllFieldsMode_\" + allFieldsModeIndex} sx={{ mb: 2}}>\r\n                                    {allFieldsModeItem.label && allFieldsMode.length > 1 ? <CardHeader title={allFieldsModeItem.label} /> : ''}\r\n                                    <CardContent>\r\n                                        <Grid container spacing={5}>\r\n                                            {allFields && allFields[allFieldsModeItem.value] && allFields[allFieldsModeItem.value].map((FieldArray: any, FieldArray_index: number) => {\r\n                                                \r\n                                                //开始根据表单中每个字段的类型,进行不同的渲染,此部分比较复杂,注意代码改动.\r\n                                                //Start to render differently according to the type of each field in the form\r\n                                                //this part is more complicated, pay attention to the code changes.\r\n                                                //console.log(\"defaultValuesNew[FieldArray.name]-----\", FieldArray)\r\n                                                <Fragment>2222</Fragment>\r\n                                                let FieldShowStatusItem = 0\r\n                                                if(addEditStructInfo2 && addEditStructInfo2.model && addEditStructInfo2.model == \"Loop\" && FieldArray_index == fieldIdValue) {\r\n                                                    FieldShowStatusItem = 1\r\n                                                }\r\n                                                \r\n                                                if(FieldShowStatusItem == 1 || FieldShowStatus == 2)  {\r\n\r\n                                                    const fieldError = errors[FieldArray.name];\r\n                                                    \r\n                                                    if ((FieldArray.show || fieldArrayShow[FieldArray.name]) && (FieldArray.type == \"hidden\") ) {\r\n                                                        if (action.indexOf(\"edit_default\") != -1 && defaultValuesNew[FieldArray.name] != undefined) {\r\n                                                            setValue(FieldArray.name, defaultValuesNew[FieldArray.name])\r\n                                                        }\r\n                                                    }\r\n                                                    else if ((FieldArray.show || fieldArrayShow[FieldArray.name]) && (FieldArray.type == \"input\" || FieldArray.type == \"email\" || FieldArray.type == \"number\")) {\r\n                                                        if ((action.indexOf(\"add_default\") != -1 || action.indexOf(\"edit_default\") != -1) && defaultValuesNew[FieldArray.name] != undefined) {\r\n                                                            setValue(FieldArray.name, defaultValuesNew[FieldArray.name])\r\n                                                        }\r\n                                                        \r\n                                                        return (\r\n                                                            <Grid item xs={FieldArray.rules.xs} sm={FieldArray.rules.sm} key={\"AllFields_\" + FieldArray_index}>\r\n                                                                <FormControl fullWidth sx={{ mb: 0 }}>\r\n                                                                    <Controller\r\n                                                                        name={FieldArray.name}\r\n                                                                        control={control}\r\n                                                                        render={({ field: { value, onChange } }) => (\r\n                                                                            <TextField\r\n                                                                                size={componentsize}\r\n                                                                                disabled={FieldArray.rules.disabled}\r\n                                                                                value={value}\r\n                                                                                label={FieldArray.label}\r\n                                                                                type={FieldArray.type}\r\n                                                                                InputProps={FieldArray.inputProps ? FieldArray.inputProps : {}}\r\n                                                                                onChange={(e) => {\r\n                                                                                    onChange(e);\r\n                                                                                    const defaultValuesNewTemp:{[key:string]:any} = { ...defaultValuesNew }\r\n                                                                                    if(FieldArray.inputProps && FieldArray.inputProps.step && FieldArray.inputProps.step=='0.01' && String(e.target.value).split('.')[1] && String(e.target.value).split('.')[1].length>2)  {\r\n                                                                                        defaultValuesNewTemp[FieldArray.name] = parseFloat(e.target.value).toFixed(2)\r\n                                                                                        console.log(\"FieldArray.inputProps\", defaultValuesNewTemp)\r\n                                                                                    }\r\n                                                                                    else {\r\n                                                                                        defaultValuesNewTemp[FieldArray.name] = e.target.value\r\n                                                                                    }\r\n                                                                                    if(FieldArray.rules.format == 'chinaidcard' && chinaIdCardCheck(e.target.value))     {\r\n                                                                                        if( FieldArray.rules.出生日期 )   {        \r\n                                                                                            defaultValuesNewTemp[FieldArray.rules.出生日期] = defaultValuesNew[FieldArray.name].substr(6, 4)+\"-\"+defaultValuesNew[FieldArray.name].substr(10, 2)+\"-\"+defaultValuesNew[FieldArray.name].substr(12, 2)\r\n                                                                                            const allDatesTemp:{[key:string]:any} = { ...allDates }\r\n                                                                                            allDatesTemp[FieldArray.rules.出生日期] = defaultValuesNewTemp[FieldArray.rules.出生日期]\r\n                                                                                            setAllDates(allDatesTemp)\r\n                                                                                        }\r\n                                                                                        if( FieldArray.rules.出生年月 )   {                                                                                     \r\n                                                                                            defaultValuesNewTemp[FieldArray.rules.出生年月] = defaultValuesNew[FieldArray.name].substr(6, 4)+\"-\"+defaultValuesNew[FieldArray.name].substr(10, 2)\r\n                                                                                            const allDatesTemp:{[key:string]:any} = { ...allDates }\r\n                                                                                            allDatesTemp[FieldArray.rules.出生年月] = defaultValuesNewTemp[FieldArray.rules.出生年月]\r\n                                                                                            setAllDates(allDatesTemp)\r\n                                                                                        }\r\n                                                                                        if( FieldArray.rules.性别 )   {    \r\n                                                                                            if(parseInt(defaultValuesNew[FieldArray.name].substr(16,1))%2==1)  {\r\n                                                                                                defaultValuesNewTemp[FieldArray.rules.性别] = \"男\"\r\n                                                                                            }\r\n                                                                                            else {\r\n                                                                                                defaultValuesNewTemp[FieldArray.rules.性别] = \"女\"\r\n                                                                                            }                                                                                 \r\n                                                                                        }\r\n                                                                                        if( FieldArray.rules.年龄 )   {                                                \r\n                                                                                            const currentDate = new Date();\r\n                                                                                            const currentYear = currentDate.getFullYear();\r\n                                                                                            console.log(currentYear, Number(defaultValuesNew[FieldArray.name].substr(6, 4)))\r\n                                                                                            defaultValuesNewTemp[FieldArray.rules.年龄] = currentYear - Number(defaultValuesNew[FieldArray.name].substr(6, 4))\r\n                                                                                            const allDatesTemp:{[key:string]:any} = { ...allDates }\r\n                                                                                            allDatesTemp[FieldArray.rules.年龄] = defaultValuesNewTemp[FieldArray.rules.年龄]\r\n                                                                                            setAllDates(allDatesTemp)\r\n                                                                                        }\r\n                                                                                    }\r\n                                                                                    setDefaultValuesNew(defaultValuesNewTemp)\r\n\r\n                                                                                    //Formula Method\r\n                                                                                    if(FieldArray.Formula && FieldArray.Formula.FormulaMethod && FieldArray.Formula.FormulaMethod!=\"\" && FieldArray.Formula.FormulaMethod!=\"None\" && FieldArray.Formula.FormulaMethodField && FieldArray.Formula.FormulaMethodField!=\"\" && FieldArray.Formula.FormulaMethodTarget && FieldArray.Formula.FormulaMethodTarget!=\"\") {\r\n                                                                                        const NewFormulaMethodField = FieldArray.Formula.FormulaMethodField\r\n                                                                                        const NewFormulaMethodTarget = FieldArray.Formula.FormulaMethodTarget\r\n                                                                                        console.log(defaultValuesNewTemp[NewFormulaMethodField])\r\n                                                                                        console.log(e.target.value)\r\n                                                                                        if( defaultValuesNewTemp[NewFormulaMethodField] && e.target.value) {\r\n                                                                                            console.log(\"NewFormulaMethodField\",NewFormulaMethodField)\r\n                                                                                            console.log(\"NewFormulaMethodTarget\",NewFormulaMethodTarget)\r\n                                                                                            console.log(\"defaultValuesNewTemp\",defaultValuesNewTemp)\r\n                                                                                            const ThisInputValue: any = e.target.value\r\n                                                                                            if(FieldArray.Formula.FormulaMethod=='*') {\r\n                                                                                                const NewValue = defaultValuesNewTemp[NewFormulaMethodField] * ThisInputValue\r\n                                                                                                if(String(NewValue).split('.')[1] && String(NewValue).split('.')[1].length>2)  {\r\n                                                                                                    defaultValuesNewTemp[NewFormulaMethodTarget] = parseFloat(String(NewValue)).toFixed(2)\r\n                                                                                                }\r\n                                                                                                else {\r\n                                                                                                    defaultValuesNewTemp[NewFormulaMethodTarget] = NewValue\r\n                                                                                                }\r\n                                                                                                setDefaultValuesNew(defaultValuesNewTemp)\r\n                                                                                            }\r\n                                                                                            else if(FieldArray.Formula.FormulaMethod=='+' && ThisInputValue!=undefined) {\r\n                                                                                                const NewValue = defaultValuesNewTemp[NewFormulaMethodField] + ThisInputValue\r\n                                                                                                if(String(NewValue).split('.')[1] && String(NewValue).split('.')[1].length>2)  {\r\n                                                                                                    defaultValuesNewTemp[NewFormulaMethodTarget] = parseFloat(String(NewValue)).toFixed(2)\r\n                                                                                                }\r\n                                                                                                else {\r\n                                                                                                    defaultValuesNewTemp[NewFormulaMethodTarget] = NewValue\r\n                                                                                                }\r\n                                                                                                setDefaultValuesNew(defaultValuesNewTemp)\r\n                                                                                            }\r\n                                                                                            else if(FieldArray.Formula.FormulaMethod=='-' && ThisInputValue!=undefined) {\r\n                                                                                                const NewValue = defaultValuesNewTemp[NewFormulaMethodField] - ThisInputValue\r\n                                                                                                if(String(NewValue).split('.')[1] && String(NewValue).split('.')[1].length>2)  {\r\n                                                                                                    defaultValuesNewTemp[NewFormulaMethodTarget] = parseFloat(String(NewValue)).toFixed(2)\r\n                                                                                                }\r\n                                                                                                else {\r\n                                                                                                    defaultValuesNewTemp[NewFormulaMethodTarget] = NewValue\r\n                                                                                                }\r\n                                                                                                setDefaultValuesNew(defaultValuesNewTemp)\r\n                                                                                            }\r\n                                                                                            else if(FieldArray.Formula.FormulaMethod=='/'&&ThisInputValue>0) {\r\n                                                                                                const NewValue = defaultValuesNewTemp[NewFormulaMethodField] / ThisInputValue\r\n                                                                                                if(String(NewValue).split('.')[1] && String(NewValue).split('.')[1].length>2)  {\r\n                                                                                                    defaultValuesNewTemp[NewFormulaMethodTarget] = parseFloat(String(NewValue)).toFixed(2)\r\n                                                                                                }\r\n                                                                                                else {\r\n                                                                                                    defaultValuesNewTemp[NewFormulaMethodTarget] = NewValue\r\n                                                                                                }\r\n                                                                                                setDefaultValuesNew(defaultValuesNewTemp)\r\n                                                                                            }\r\n\r\n                                                                                        }\r\n                                                                                    }\r\n\r\n                                                                                }}\r\n                                                                                placeholder={FieldArray.placeholder}\r\n                                                                                error={Boolean(errors[FieldArray.name])}\r\n                                                                            />\r\n                                                                        )}\r\n                                                                    />\r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length>12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            <Tooltip title={<Fragment>{FieldArray.helptext}</Fragment>} >\r\n                                                                                <IconButton style={{ padding: 0, margin: '0px 0px 0px 5px'}}>\r\n                                                                                    <HelpIcon />\r\n                                                                                </IconButton>\r\n                                                                            </Tooltip>\r\n                                                                            {FieldArray.helptext.substring(0,FieldArray.rules.sm==12?56:(FieldArray.rules.sm==6?24:12))}...\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length<=12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            {FieldArray.helptext}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {fieldError && fieldError.message && (\r\n                                                                        <FormHelperText sx={{ color: 'error.main' }}>\r\n                                                                            {fieldError.message as string}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                </FormControl>\r\n                                                            </Grid>\r\n                                                        )\r\n                                                    }\r\n                                                    else if ((FieldArray.show || fieldArrayShow[FieldArray.name]) && FieldArray.type == \"buttonrouter\") {\r\n                                                        \r\n                                                        return (\r\n                                                            <Grid item xs={FieldArray.rules.xs} sm={FieldArray.rules.sm} key={\"AllFields_\" + FieldArray_index}>\r\n                                                                <FormControl fullWidth sx={{ mb: 0 }}>\r\n                                                                <Button variant='contained' onClick={() => router.push(defaultValuesNew[FieldArray.name])} >\r\n                                                                    {FieldArray.label}\r\n                                                                </Button>\r\n                                                                </FormControl>\r\n                                                            </Grid>\r\n                                                        )\r\n                                                    }\r\n                                                    else if ((FieldArray.show || fieldArrayShow[FieldArray.name]) && FieldArray.type == \"buttonurl\") {\r\n                                                        \r\n                                                        return (\r\n                                                            <Grid item xs={FieldArray.rules.xs} sm={FieldArray.rules.sm} key={\"AllFields_\" + FieldArray_index}>\r\n                                                                <FormControl fullWidth sx={{ mb: 0 }}>\r\n                                                                    <CustomLink href={authConfig.backEndApiHost+defaultValuesNew[FieldArray.name]} download={FieldArray.label}>\r\n                                                                        <Button variant='contained'>\r\n                                                                            {FieldArray.label}\r\n                                                                        </Button>\r\n                                                                    </CustomLink>\r\n                                                                </FormControl>\r\n                                                            </Grid>\r\n                                                        )\r\n                                                    }\r\n                                                    else if ((FieldArray.show || fieldArrayShow[FieldArray.name]) && FieldArray.type == \"readonly\") {\r\n                                                        \r\n                                                        if (action.indexOf(\"edit_default\") != -1 && defaultValuesNew[FieldArray.name] != undefined) {\r\n                                                            setValue(FieldArray.name, defaultValuesNew[FieldArray.name])\r\n                                                        }\r\n                                                        else if (action.indexOf(\"add_default\") != -1 && defaultValuesNew[FieldArray.name] != undefined) {\r\n                                                            setValue(FieldArray.name, defaultValuesNew[FieldArray.name])\r\n                                                        }\r\n                                                        \r\n                                                        return (\r\n                                                            <Grid item xs={FieldArray.rules.xs} sm={FieldArray.rules.sm} key={\"AllFields_\" + FieldArray_index}>\r\n                                                                <FormControl fullWidth sx={{ mb: 0 }}>\r\n                                                                    <Controller\r\n                                                                        name={FieldArray.name}\r\n                                                                        control={control}\r\n                                                                        render={({ field: { value, onChange } }) => (\r\n                                                                            <TextField\r\n                                                                                size={componentsize}\r\n                                                                                disabled={FieldArray.rules.disabled}\r\n                                                                                value={value}\r\n                                                                                label={FieldArray.label}\r\n                                                                                type={FieldArray.type}\r\n                                                                                onChange={(e) => {\r\n                                                                                    onChange(e);\r\n                                                                                    const defaultValuesNewTemp:{[key:string]:any} = { ...defaultValuesNew }\r\n                                                                                    defaultValuesNewTemp[FieldArray.name] = e.target.value\r\n                                                                                    setDefaultValuesNew(defaultValuesNewTemp)\r\n                                                                                }}\r\n                                                                                placeholder={FieldArray.placeholder}\r\n                                                                                error={Boolean(errors[FieldArray.name])}\r\n                                                                            />\r\n                                                                        )}\r\n                                                                    />                                                                \r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length>12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            <Tooltip title={<Fragment>{FieldArray.helptext}</Fragment>} >\r\n                                                                                <IconButton style={{ padding: 0, margin: '0px 0px 0px 5px'}}>\r\n                                                                                    <HelpIcon />\r\n                                                                                </IconButton>\r\n                                                                            </Tooltip>\r\n                                                                            {FieldArray.helptext.substring(0,FieldArray.rules.sm==12?56:(FieldArray.rules.sm==6?24:12))}...\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length<=12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            {FieldArray.helptext}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {fieldError && fieldError.message && (\r\n                                                                        <FormHelperText sx={{ color: 'error.main' }}>\r\n                                                                            {fieldError.message as string}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                </FormControl>\r\n                                                            </Grid>\r\n                                                        )\r\n                                                    }\r\n                                                    else if ((FieldArray.show || fieldArrayShow[FieldArray.name]) && (FieldArray.type == \"password\"||FieldArray.type == \"EncryptField\") ) {\r\n                                                                                                        \r\n                                                        return (\r\n                                                            <Grid item xs={FieldArray.rules.xs} sm={FieldArray.rules.sm} key={\"AllFields_\" + FieldArray_index}>\r\n                                                                <FormControl fullWidth sx={{ mb: 0 }}>\r\n                                                                    <InputLabel error={Boolean(errors[FieldArray.name])}>\r\n                                                                    {FieldArray.label}\r\n                                                                    </InputLabel>\r\n                                                                    <Controller\r\n                                                                        name={FieldArray.name}\r\n                                                                        control={control}\r\n                                                                        render={({ field: { value, onChange } }) => (\r\n                                                                            <OutlinedInput\r\n                                                                                size={componentsize}\r\n                                                                                value={value}\r\n                                                                                label={FieldArray.label}\r\n                                                                                onChange={(e) => {\r\n                                                                                    onChange(e);\r\n                                                                                    const defaultValuesNewTemp:{[key:string]:any} = { ...defaultValuesNew }\r\n                                                                                    defaultValuesNewTemp[FieldArray.name] = e.target.value\r\n                                                                                    setDefaultValuesNew(defaultValuesNewTemp)\r\n                                                                                }}\r\n                                                                                id='password'\r\n                                                                                error={Boolean(errors[FieldArray.name])}\r\n                                                                                type={state.showPassword ? 'text' : 'password'}\r\n                                                                                endAdornment={\r\n                                                                                    <InputAdornment position='end'>\r\n                                                                                        <IconButton\r\n                                                                                            edge='end'\r\n                                                                                            onClick={handleClickShowPassword}\r\n                                                                                            onMouseDown={handleMouseDownPassword}\r\n                                                                                            aria-label='toggle password visibility'\r\n                                                                                        >\r\n                                                                                            <Icon icon={state.showPassword ? 'mdi:eye-outline' : 'mdi:eye-off-outline'} />\r\n                                                                                        </IconButton>\r\n                                                                                    </InputAdornment>\r\n                                                                                }\r\n                                                                            />\r\n                                                                        )}\r\n                                                                    />                                                                \r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length>12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            <Tooltip title={<Fragment>{FieldArray.helptext}</Fragment>} >\r\n                                                                                <IconButton style={{ padding: 0, margin: '0px 0px 0px 5px'}}>\r\n                                                                                    <HelpIcon />\r\n                                                                                </IconButton>\r\n                                                                            </Tooltip>\r\n                                                                            {FieldArray.helptext.substring(0,FieldArray.rules.sm==12?56:(FieldArray.rules.sm==6?24:12))}...\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length<=12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            {FieldArray.helptext}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {fieldError && fieldError.message && (\r\n                                                                        <FormHelperText sx={{ color: 'error.main' }}>\r\n                                                                            {fieldError.message as string}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                </FormControl>\r\n                                                            </Grid>\r\n                                                        )\r\n                                                    }\r\n                                                    else if ((FieldArray.show || fieldArrayShow[FieldArray.name]) && FieldArray.type == \"comfirmpassword\") {\r\n                                                        \r\n                                                        //console.log(\"defaultValuesNew[FieldArray.name]***************Begin\", FieldArray)\r\n                                                        \r\n                                                        return (\r\n                                                            <Grid item xs={FieldArray.rules.xs} sm={FieldArray.rules.sm} key={\"AllFields_\" + FieldArray_index}>\r\n                                                                <FormControl fullWidth sx={{ mb: 0 }}>\r\n                                                                    <InputLabel htmlFor='input-confirm-new-password' error={Boolean(errors[FieldArray.name])}>\r\n                                                                    {FieldArray.label}\r\n                                                                    </InputLabel>\r\n                                                                    <Controller\r\n                                                                        name={FieldArray.name}\r\n                                                                        control={control}\r\n                                                                        render={({ field: { value, onChange } }) => (\r\n                                                                            <OutlinedInput\r\n                                                                                size={componentsize}\r\n                                                                                value={value}\r\n                                                                                label={FieldArray.label}\r\n                                                                                onChange={(e) => {\r\n                                                                                    onChange(e);\r\n                                                                                    const defaultValuesNewTemp:{[key:string]:any} = { ...defaultValuesNew }\r\n                                                                                    defaultValuesNewTemp[FieldArray.name] = e.target.value\r\n                                                                                    setDefaultValuesNew(defaultValuesNewTemp)\r\n                                                                                }}\r\n                                                                                id='confirm-password'\r\n                                                                                error={Boolean(errors[FieldArray.name])}\r\n                                                                                type={state.showPassword2 ? 'text' : 'password'}\r\n                                                                                endAdornment={\r\n                                                                                    <InputAdornment position='end'>\r\n                                                                                        <IconButton\r\n                                                                                            edge='end'\r\n                                                                                            onClick={handleClickShowConfirmPassword}\r\n                                                                                            onMouseDown={handleMouseDownConfirmPassword}\r\n                                                                                            aria-label='toggle password visibility'\r\n                                                                                        >\r\n                                                                                            <Icon icon={state.showPassword2 ? 'mdi:eye-outline' : 'mdi:eye-off-outline'} />\r\n                                                                                        </IconButton>\r\n                                                                                    </InputAdornment>\r\n                                                                                }\r\n                                                                            />\r\n                                                                        )}\r\n                                                                    />                                                                \r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length>12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            <Tooltip title={<Fragment>{FieldArray.helptext}</Fragment>} >\r\n                                                                                <IconButton style={{ padding: 0, margin: '0px 0px 0px 5px'}}>\r\n                                                                                    <HelpIcon />\r\n                                                                                </IconButton>\r\n                                                                            </Tooltip>\r\n                                                                            {FieldArray.helptext.substring(0,FieldArray.rules.sm==12?56:(FieldArray.rules.sm==6?24:12))}...\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length<=12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            {FieldArray.helptext}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {fieldError && fieldError.message && (\r\n                                                                        <FormHelperText sx={{ color: 'error.main' }}>\r\n                                                                            {fieldError.message as string}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                </FormControl>\r\n                                                            </Grid>\r\n                                                        )\r\n                                                    }\r\n                                                    else if ((FieldArray.show || fieldArrayShow[FieldArray.name]) && (FieldArray.type == \"select\" || FieldArray.type == \"tablefilter\" || FieldArray.type == \"tablefiltercolor\")) {\r\n                                                        \r\n                                                        //console.log(\"defaultValuesNew[FieldArray.name]***************Begin\", FieldArray)\r\n                                                        if (action.indexOf(\"edit_default\") != -1 && defaultValuesNew[FieldArray.name] != undefined) {\r\n                                                            \r\n                                                            //console.log(\"defaultValuesNew[FieldArray.name]--------------------------------\", defaultValuesNew[FieldArray.name])\r\n                                                            setValue(FieldArray.name, defaultValuesNew[FieldArray.name])\r\n                                                        }\r\n                                                        \r\n                                                        //console.log(\"errors select--------------------------------\", errors)\r\n                                                        \r\n                                                        return (\r\n                                                            <Grid item xs={FieldArray.rules.xs} sm={FieldArray.rules.sm} key={\"AllFields_\" + FieldArray_index}>\r\n                                                                <FormControl fullWidth sx={{ mb: 0 }}>\r\n                                                                    <InputLabel\r\n                                                                        id='validation-basic-select'\r\n                                                                        error={Boolean(errors[FieldArray.name])}\r\n                                                                        htmlFor='validation-basic-select'\r\n                                                                    >\r\n                                                                        {FieldArray.label}\r\n                                                                    </InputLabel>\r\n                                                                    <Controller\r\n                                                                        name={FieldArray.name}\r\n                                                                        control={control}\r\n                                                                        render={({ field: { value, onChange } }) => (\r\n                                                                            <Select\r\n                                                                                size={componentsize}\r\n                                                                                value={value}\r\n                                                                                label={FieldArray.label}\r\n                                                                                disabled={FieldArray.rules.disabled}\r\n                                                                                onChange={(e) => {\r\n                                                                                    onChange(e);\r\n                                                                                    const defaultValuesNewTemp:{[key:string]:any} = { ...defaultValuesNew }\r\n                                                                                    defaultValuesNewTemp[FieldArray.name] = e.target.value\r\n                                                                                    setDefaultValuesNew(defaultValuesNewTemp)\r\n                                                                                }}\r\n                                                                                error={Boolean(errors[FieldArray.name])}\r\n                                                                                labelId='validation-basic-select'\r\n                                                                                aria-describedby='validation-basic-select'\r\n                                                                            >\r\n                                                                                {FieldArray.options.map((ItemArray: any, ItemArray_index: number) => {\r\n                                                                                    return <MenuItem value={ItemArray.value} key={ItemArray_index}>{ItemArray.label}</MenuItem>\r\n                                                                                })}\r\n                                                                            </Select>\r\n                                                                        )}\r\n                                                                    />                                                                \r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length>12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            <Tooltip title={<Fragment>{FieldArray.helptext}</Fragment>} >\r\n                                                                                <IconButton style={{ padding: 0, margin: '0px 0px 0px 5px'}}>\r\n                                                                                    <HelpIcon />\r\n                                                                                </IconButton>\r\n                                                                            </Tooltip>\r\n                                                                            {FieldArray.helptext.substring(0,FieldArray.rules.sm==12?56:(FieldArray.rules.sm==6?24:12))}...\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length<=12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            {FieldArray.helptext}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {fieldError && fieldError.message && (\r\n                                                                        <FormHelperText sx={{ color: 'error.main' }}>\r\n                                                                            {fieldError.message as string}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                </FormControl>\r\n                                                            </Grid>\r\n                                                        )\r\n                                                    }  \r\n                                                    else if ((FieldArray.show || fieldArrayShow[FieldArray.name]) && (FieldArray.type == \"ProvinceAndCity\")) {\r\n                                                        \r\n                                                        //console.log(\"defaultValuesNew[FieldArray.name]***************Begin\", FieldArray)\r\n                                                        if (defaultValuesNew[FieldArray.行政区划] != undefined) {\r\n                                                            \r\n                                                            //console.log(\"defaultValuesNew[FieldArray.name]--------------------------------\", defaultValuesNew[FieldArray.name])\r\n                                                            setValue(FieldArray.行政区划, defaultValuesNew[FieldArray.行政区划])\r\n                                                            setValue(FieldArray.所在省, defaultValuesNew[FieldArray.所在省])\r\n                                                            setValue(FieldArray.所在市, defaultValuesNew[FieldArray.所在市])\r\n                                                            setValue(FieldArray.所在区县, defaultValuesNew[FieldArray.所在区县])                                                        \r\n                                                        }\r\n                                                        \r\n                                                        //console.log(\"errors select--------------------------------\", errors)\r\n                                                        \r\n                                                        return (\r\n                                                            <Fragment key={\"AllFields_1_\" + FieldArray_index}> \r\n                                                                <Grid item xs={FieldArray.rules.xs} sm={FieldArray.rules.sm}>\r\n                                                                    <FormControl fullWidth sx={{ mb: 0 }}>\r\n                                                                        <InputLabel\r\n                                                                            id='validation-basic-select'\r\n                                                                            error={Boolean(errors[FieldArray.所在省])}\r\n                                                                            htmlFor='validation-basic-select'\r\n                                                                        >\r\n                                                                            {FieldArray.所在省}\r\n                                                                        </InputLabel>\r\n                                                                        <Controller\r\n                                                                            name={FieldArray.所在省}\r\n                                                                            control={control}\r\n                                                                            render={({ field: { value, onChange } }) => (\r\n                                                                                <Select\r\n                                                                                    size={componentsize}\r\n                                                                                    value={value}\r\n                                                                                    label={FieldArray.所在省}\r\n                                                                                    onChange={(e) => {\r\n                                                                                        onChange(e);\r\n                                                                                        const defaultValuesNewTemp:{[key:string]:any} = { ...defaultValuesNew }\r\n                                                                                        defaultValuesNewTemp[FieldArray.所在省] = e.target.value\r\n                                                                                        defaultValuesNewTemp[FieldArray.行政区划] = \"\"\r\n                                                                                        setDefaultValuesNew(defaultValuesNewTemp)\r\n                                                                                    }}\r\n                                                                                    error={Boolean(errors[FieldArray.所在省])}\r\n                                                                                    labelId='validation-basic-select'\r\n                                                                                    aria-describedby='validation-basic-select'\r\n                                                                                >\r\n                                                                                    {Object.keys(chinacity).map((ProvinceName: any, ItemArray_index: number) => {\r\n                                                                                        return <MenuItem value={ProvinceName} key={ItemArray_index}>{ProvinceName}</MenuItem>\r\n                                                                                    })}\r\n                                                                                </Select>\r\n                                                                            )}\r\n                                                                        />\r\n                                                                    </FormControl>\r\n                                                                </Grid>\r\n                                                                <Grid item xs={FieldArray.rules.xs} sm={FieldArray.rules.sm} key={\"AllFields_2_\" + FieldArray_index}>\r\n                                                                    <FormControl fullWidth sx={{ mb: 0 }}>\r\n                                                                        <InputLabel\r\n                                                                            id='validation-basic-select'\r\n                                                                            error={Boolean(errors[FieldArray.所在市])}\r\n                                                                            htmlFor='validation-basic-select'\r\n                                                                        >\r\n                                                                            {FieldArray.所在市}\r\n                                                                        </InputLabel>\r\n                                                                        <Controller\r\n                                                                            name={FieldArray.所在市}\r\n                                                                            control={control}\r\n                                                                            render={({ field: { value, onChange } }) => (\r\n                                                                                <Select\r\n                                                                                    size={componentsize}\r\n                                                                                    value={value}\r\n                                                                                    label={FieldArray.label}\r\n                                                                                    onChange={(e) => {\r\n                                                                                        onChange(e);\r\n                                                                                        const defaultValuesNewTemp:{[key:string]:any} = { ...defaultValuesNew }\r\n                                                                                        defaultValuesNewTemp[FieldArray.所在市] = e.target.value\r\n                                                                                        setDefaultValuesNew(defaultValuesNewTemp)\r\n                                                                                    }}\r\n                                                                                    error={Boolean(errors[FieldArray.所在市])}\r\n                                                                                    labelId='validation-basic-select'\r\n                                                                                    aria-describedby='validation-basic-select'\r\n                                                                                >\r\n                                                                                    {chinacity[defaultValuesNew[FieldArray.所在省]] && Object.keys(chinacity[defaultValuesNew[FieldArray.所在省]]).map((CityName: any, ItemArray_index: number) => {\r\n                                                                                        return <MenuItem value={CityName} key={ItemArray_index}>{CityName}</MenuItem>\r\n                                                                                    })}\r\n                                                                                </Select>\r\n                                                                            )}\r\n                                                                        />\r\n                                                                    </FormControl>\r\n                                                                </Grid>                                                            \r\n                                                                <Grid item xs={FieldArray.rules.xs} sm={FieldArray.rules.sm} key={\"AllFields_3_\" + FieldArray_index}>\r\n                                                                    <FormControl fullWidth sx={{ mb: 0 }}>\r\n                                                                        <InputLabel\r\n                                                                            id='validation-basic-select'\r\n                                                                            error={Boolean(errors[FieldArray.所在区县])}\r\n                                                                            htmlFor='validation-basic-select'\r\n                                                                        >\r\n                                                                            {FieldArray.所在区县}\r\n                                                                        </InputLabel>\r\n                                                                        <Controller\r\n                                                                            name={FieldArray.所在区县}\r\n                                                                            control={control}\r\n                                                                            render={({ field: { value, onChange } }) => (\r\n                                                                                <Select\r\n                                                                                    size={componentsize}\r\n                                                                                    value={value}\r\n                                                                                    label={FieldArray.label}\r\n                                                                                    onChange={(e) => {\r\n                                                                                        onChange(e);\r\n                                                                                        const defaultValuesNewTemp:{[key:string]:any} = { ...defaultValuesNew }\r\n                                                                                        defaultValuesNewTemp[FieldArray.所在区县] = e.target.value\r\n                                                                                        {chinacity[defaultValuesNew[FieldArray.所在省]] && chinacity[defaultValuesNew[FieldArray.所在省]][defaultValuesNew[FieldArray.所在市]] && chinacity[defaultValuesNew[FieldArray.所在省]][defaultValuesNew[FieldArray.所在市]].map((DistrictArray: any) => {\r\n                                                                                            if(DistrictArray.DistrictName==e.target.value) {\r\n                                                                                                console.log(\"-------------------------DistrictArray.DistrictName\",DistrictArray.DistrictID)\r\n                                                                                                defaultValuesNewTemp[FieldArray.行政区划] = DistrictArray.DistrictID\r\n                                                                                            }\r\n                                                                                        })}\r\n                                                                                        setDefaultValuesNew(defaultValuesNewTemp)\r\n                                                                                        \r\n                                                                                    }}\r\n                                                                                    error={Boolean(errors[FieldArray.所在区县])}\r\n                                                                                    labelId='validation-basic-select'\r\n                                                                                    aria-describedby='validation-basic-select'\r\n                                                                                >\r\n                                                                                    {chinacity[defaultValuesNew[FieldArray.所在省]] && chinacity[defaultValuesNew[FieldArray.所在省]][defaultValuesNew[FieldArray.所在市]] && chinacity[defaultValuesNew[FieldArray.所在省]][defaultValuesNew[FieldArray.所在市]].map((DistrictArray: any, ItemArray_index: number) => {\r\n                                                                                        return <MenuItem value={DistrictArray.DistrictName} key={ItemArray_index}>{DistrictArray.DistrictName}</MenuItem>\r\n                                                                                    })}\r\n                                                                                </Select>\r\n                                                                            )}\r\n                                                                        />\r\n                                                                    </FormControl>\r\n                                                                </Grid>                                                            \r\n                                                                <Grid item xs={FieldArray.rules.xs} sm={FieldArray.rules.sm} key={\"AllFields_4_\" + FieldArray_index}>\r\n                                                                    <FormControl fullWidth sx={{ mb: 0 }}>\r\n                                                                        <Controller\r\n                                                                            name={FieldArray.行政区划}\r\n                                                                            control={control}\r\n                                                                            render={({ field: { value } }) => (\r\n                                                                                <TextField\r\n                                                                                    size={componentsize}\r\n                                                                                    disabled={FieldArray.rules.disabled}\r\n                                                                                    value={value}\r\n                                                                                    label={FieldArray.label}\r\n                                                                                    type={FieldArray.type}\r\n                                                                                    InputProps={{\r\n                                                                                        readOnly: true,\r\n                                                                                    }}\r\n                                                                                    placeholder={FieldArray.placeholder}\r\n                                                                                    error={Boolean(errors[FieldArray.行政区划])}\r\n                                                                                />\r\n                                                                            )}\r\n                                                                        />\r\n                                                                    </FormControl>\r\n                                                                </Grid>\r\n                                                            </Fragment>\r\n                                                            \r\n                                                        )\r\n                                                    }\r\n                                                    else if ((FieldArray.show || fieldArrayShow[FieldArray.name]) && (FieldArray.type == \"ProvinceAndCityOneLine\")) {\r\n                                                        \r\n                                                        //console.log(\"defaultValuesNew[FieldArray.name]***************Begin\", FieldArray)\r\n                                                        if (defaultValuesNew[FieldArray.行政区划] != undefined) { \r\n                                                            setValue(FieldArray.行政区划, defaultValuesNew[FieldArray.行政区划])\r\n                                                            setValue(FieldArray.所在省, defaultValuesNew[FieldArray.所在省])\r\n                                                            setValue(FieldArray.所在市, defaultValuesNew[FieldArray.所在市])\r\n                                                            setValue(FieldArray.所在区县, defaultValuesNew[FieldArray.所在区县])                                                        \r\n                                                        }\r\n                                                        \r\n                                                        //console.log(\"errors select--------------------------------\", errors)\r\n                                                        \r\n                                                        return (\r\n                                                            <Fragment key={\"AllFields_1_\" + FieldArray_index}> \r\n                                                                <Grid item xs={FieldArray.rules.xs} sm={FieldArray.rules.sm}>\r\n                                                                    <FormControl fullWidth sx={{ mb: 0 }}>\r\n                                                                        <InputLabel\r\n                                                                            id='validation-basic-select'\r\n                                                                            error={Boolean(errors[FieldArray.所在省])}\r\n                                                                            htmlFor='validation-basic-select'\r\n                                                                        >\r\n                                                                            {FieldArray.所在省}\r\n                                                                        </InputLabel>\r\n                                                                        <Controller\r\n                                                                            name={FieldArray.所在省}\r\n                                                                            control={control}\r\n                                                                            render={({ field: { value, onChange } }) => (\r\n                                                                                <Select\r\n                                                                                    size={componentsize}\r\n                                                                                    value={value}\r\n                                                                                    label={FieldArray.所在省}\r\n                                                                                    onChange={(e) => {\r\n                                                                                        onChange(e);\r\n                                                                                        const defaultValuesNewTemp:{[key:string]:any} = { ...defaultValuesNew }\r\n                                                                                        defaultValuesNewTemp[FieldArray.所在省] = e.target.value\r\n                                                                                        defaultValuesNewTemp[FieldArray.行政区划] = \"\"\r\n                                                                                        setDefaultValuesNew(defaultValuesNewTemp)\r\n                                                                                    }}\r\n                                                                                    error={Boolean(errors[FieldArray.所在省])}\r\n                                                                                    labelId='validation-basic-select'\r\n                                                                                    aria-describedby='validation-basic-select'\r\n                                                                                >\r\n                                                                                    {Object.keys(chinacityshort).map((ProvinceName: any, ItemArray_index: number) => {\r\n                                                                                        return <MenuItem value={ProvinceName} key={ItemArray_index}>{ProvinceName}</MenuItem>\r\n                                                                                    })}\r\n                                                                                </Select>\r\n                                                                            )}\r\n                                                                        />\r\n                                                                    </FormControl>\r\n                                                                </Grid>\r\n                                                                <Grid item xs={FieldArray.rules.xs} sm={FieldArray.rules.sm} key={\"AllFields_2_\" + FieldArray_index}>\r\n                                                                    <FormControl fullWidth sx={{ mb: 0 }}>\r\n                                                                        <InputLabel\r\n                                                                            id='validation-basic-select'\r\n                                                                            error={Boolean(errors[FieldArray.所在市])}\r\n                                                                            htmlFor='validation-basic-select'\r\n                                                                        >\r\n                                                                            {FieldArray.所在市}\r\n                                                                        </InputLabel>\r\n                                                                        <Controller\r\n                                                                            name={FieldArray.所在市}\r\n                                                                            control={control}\r\n                                                                            render={({ field: { value, onChange } }) => (\r\n                                                                                <Select\r\n                                                                                    size={componentsize}\r\n                                                                                    value={value}\r\n                                                                                    label={FieldArray.label}\r\n                                                                                    onChange={(e) => {\r\n                                                                                        onChange(e);\r\n                                                                                        const defaultValuesNewTemp:{[key:string]:any} = { ...defaultValuesNew }\r\n                                                                                        defaultValuesNewTemp[FieldArray.所在市] = e.target.value\r\n                                                                                        setDefaultValuesNew(defaultValuesNewTemp)\r\n                                                                                    }}\r\n                                                                                    error={Boolean(errors[FieldArray.所在市])}\r\n                                                                                    labelId='validation-basic-select'\r\n                                                                                    aria-describedby='validation-basic-select'\r\n                                                                                >\r\n                                                                                    {chinacityshort[defaultValuesNew[FieldArray.所在省]] && Object.keys(chinacityshort[defaultValuesNew[FieldArray.所在省]]).map((CityName: any, ItemArray_index: number) => {\r\n                                                                                        return <MenuItem value={CityName} key={ItemArray_index}>{CityName}</MenuItem>\r\n                                                                                    })}\r\n                                                                                </Select>\r\n                                                                            )}\r\n                                                                        />\r\n                                                                    </FormControl>\r\n                                                                </Grid>                                                            \r\n                                                                <Grid item xs={FieldArray.rules.xs} sm={FieldArray.rules.sm} key={\"AllFields_3_\" + FieldArray_index}>\r\n                                                                    <FormControl fullWidth sx={{ mb: 0 }}>\r\n                                                                        <InputLabel\r\n                                                                            id='validation-basic-select'\r\n                                                                            error={Boolean(errors[FieldArray.所在区县])}\r\n                                                                            htmlFor='validation-basic-select'\r\n                                                                        >\r\n                                                                            {FieldArray.所在区县}\r\n                                                                        </InputLabel>\r\n                                                                        <Controller\r\n                                                                            name={FieldArray.所在区县}\r\n                                                                            control={control}\r\n                                                                            render={({ field: { value, onChange } }) => (\r\n                                                                                <Select\r\n                                                                                    size={componentsize}\r\n                                                                                    value={value}\r\n                                                                                    label={FieldArray.label}\r\n                                                                                    onChange={(e) => {\r\n                                                                                        onChange(e);\r\n                                                                                        const defaultValuesNewTemp:{[key:string]:any} = { ...defaultValuesNew }\r\n                                                                                        defaultValuesNewTemp[FieldArray.所在区县] = e.target.value\r\n                                                                                        {chinacityshort[defaultValuesNew[FieldArray.所在省]] && chinacityshort[defaultValuesNew[FieldArray.所在省]][defaultValuesNew[FieldArray.所在市]] && chinacityshort[defaultValuesNew[FieldArray.所在省]][defaultValuesNew[FieldArray.所在市]].map((DistrictArray: any) => {\r\n                                                                                            if(DistrictArray.DistrictName==e.target.value) {\r\n                                                                                                defaultValuesNewTemp[FieldArray.行政区划] = defaultValuesNewTemp[FieldArray.所在省] + \"-\" + defaultValuesNewTemp[FieldArray.所在市] + \"-\" + defaultValuesNewTemp[FieldArray.所在区县]\r\n                                                                                            }\r\n                                                                                        })}\r\n                                                                                        setDefaultValuesNew(defaultValuesNewTemp)\r\n                                                                                        \r\n                                                                                    }}\r\n                                                                                    error={Boolean(errors[FieldArray.所在区县])}\r\n                                                                                    labelId='validation-basic-select'\r\n                                                                                    aria-describedby='validation-basic-select'\r\n                                                                                >\r\n                                                                                    {chinacityshort[defaultValuesNew[FieldArray.所在省]] && chinacityshort[defaultValuesNew[FieldArray.所在省]][defaultValuesNew[FieldArray.所在市]] && chinacityshort[defaultValuesNew[FieldArray.所在省]][defaultValuesNew[FieldArray.所在市]].map((DistrictArray: any, ItemArray_index: number) => {\r\n                                                                                        return <MenuItem value={DistrictArray.DistrictName} key={ItemArray_index}>{DistrictArray.DistrictName}</MenuItem>\r\n                                                                                    })}\r\n                                                                                </Select>\r\n                                                                            )}\r\n                                                                        />\r\n                                                                    </FormControl>\r\n                                                                </Grid> \r\n                                                            </Fragment>\r\n                                                            \r\n                                                        )\r\n                                                    } \r\n                                                    else if ((FieldArray.show || fieldArrayShow[FieldArray.name]) && (FieldArray.type == \"SelectBuilding\")) {\r\n                                                        \r\n                                                        console.log(\"defaultValuesNew[FieldArray.name]***************Begin\", FieldArray)\r\n                                                        if (defaultValuesNew[FieldArray.GroupOneMenuName] != undefined) {\r\n                                                            setValue(FieldArray.GroupOneMenuName, defaultValuesNew[FieldArray.GroupOneMenuName])\r\n                                                            setValue(FieldArray.GroupTwoMenuName, defaultValuesNew[FieldArray.GroupTwoMenuName])\r\n                                                        }\r\n                                                        else if (defaultValuesNew[FieldArray.GroupTwoMenuName] != undefined && defaultValuesNew[FieldArray.GroupTwoMenuName] != \"\") {\r\n                                                            const MenuOneValue = FieldArray.GroupTwoMap[defaultValuesNew[FieldArray.GroupTwoMenuName]]\r\n                                                            setValue(FieldArray.GroupOneMenuName, MenuOneValue)\r\n                                                            setValue(FieldArray.GroupTwoMenuName, defaultValuesNew[FieldArray.GroupTwoMenuName])\r\n                                                            const defaultValuesNewTemp:{[key:string]:any} = { ...defaultValuesNew }\r\n                                                            defaultValuesNewTemp[FieldArray.GroupOneMenuName] = MenuOneValue\r\n                                                            defaultValuesNewTemp[FieldArray.GroupTwoMenuName] = defaultValuesNew[FieldArray.GroupTwoMenuName]\r\n                                                            console.log(\"defaultValuesNewTemp\", defaultValuesNewTemp)\r\n                                                            setDefaultValuesNew(defaultValuesNewTemp)\r\n                                                        }\r\n                                                        else if (defaultValuesNew[FieldArray.GroupTwoMenuName] != undefined && defaultValuesNew[FieldArray.GroupTwoMenuName] == \"\") {\r\n                                                            const MenuOneValue = FieldArray.GroupOneMenuValue\r\n                                                            setValue(FieldArray.GroupOneMenuName, MenuOneValue)\r\n                                                            setValue(FieldArray.GroupTwoMenuName, FieldArray.GroupTwoMenuValue)\r\n                                                            const defaultValuesNewTemp:{[key:string]:any} = { ...defaultValuesNew }\r\n                                                            defaultValuesNewTemp[FieldArray.GroupOneMenuName] = MenuOneValue\r\n                                                            defaultValuesNewTemp[FieldArray.GroupTwoMenuName] = FieldArray.GroupTwoMenuValue\r\n                                                            console.log(\"defaultValuesNewTemp\", defaultValuesNewTemp)\r\n                                                            setDefaultValuesNew(defaultValuesNewTemp)\r\n                                                        }\r\n                                                        else if(FieldArray.GroupOneMenuValue) {\r\n                                                            setValue(FieldArray.GroupOneMenuName, FieldArray.GroupOneMenuValue)\r\n                                                            setValue(FieldArray.GroupTwoMenuName, FieldArray.GroupTwoMenuValue)\r\n                                                        }\r\n                                                        \r\n                                                        //console.log(\"errors select--------------------------------\", errors)\r\n                                                        \r\n                                                        return (\r\n                                                            <Fragment key={\"AllFields_1_\" + FieldArray_index}> \r\n                                                                <Grid item xs={FieldArray.rules.xs} sm={FieldArray.rules.sm}>\r\n                                                                    <FormControl fullWidth sx={{ mb: 0 }}>\r\n                                                                        <Controller\r\n                                                                            name={FieldArray.GroupOneMenuName}\r\n                                                                            control={control}\r\n                                                                            render={({ field: { value, onChange } }) => (\r\n                                                                                <RadioGroup\r\n                                                                                value={value}\r\n                                                                                onChange={(e) => {\r\n                                                                                    onChange(e.target.value);\r\n                                                                                    const defaultValuesNewTemp: {[key: string]: any} = { ...defaultValuesNew };\r\n                                                                                    defaultValuesNewTemp[FieldArray.GroupOneMenuName] = e.target.value;\r\n                                                                                    defaultValuesNewTemp[FieldArray.GroupTwoMenuName] = FieldArray.GroupTwoMenuArray[e.target.value][0];\r\n                                                                                    setDefaultValuesNew(defaultValuesNewTemp);\r\n                                                                                }}\r\n                                                                                >\r\n                                                                                {FieldArray.GroupOneMenuArray.map((GroupOneMenu: any, ItemArray_index: number) => (\r\n                                                                                    <FormControlLabel\r\n                                                                                        key={ItemArray_index}\r\n                                                                                        value={GroupOneMenu}\r\n                                                                                        control={<Radio />}\r\n                                                                                        label={GroupOneMenu}\r\n                                                                                    />\r\n                                                                                ))}\r\n                                                                                </RadioGroup>\r\n                                                                            )}\r\n                                                                        />\r\n                                                                    </FormControl>\r\n                                                                </Grid>\r\n                                                                <Grid item xs={FieldArray.rules.xs} sm={FieldArray.rules.sm} key={\"AllFields_2_\" + FieldArray_index}>\r\n                                                                    <FormControl fullWidth sx={{ mb: 0 }}>\r\n                                                                        <InputLabel\r\n                                                                            id='validation-basic-select'\r\n                                                                            error={Boolean(errors[FieldArray.GroupTwoMenuName])}\r\n                                                                            htmlFor='validation-basic-select'\r\n                                                                        >\r\n                                                                            {FieldArray.GroupTwoMenuName}\r\n                                                                        </InputLabel>\r\n                                                                        <Controller\r\n                                                                            name={FieldArray.GroupTwoMenuName}\r\n                                                                            control={control}\r\n                                                                            render={({ field: { value, onChange } }) => (\r\n                                                                                <Select\r\n                                                                                    size={componentsize}\r\n                                                                                    value={value}\r\n                                                                                    label={FieldArray.label}\r\n                                                                                    onChange={(e) => {\r\n                                                                                        onChange(e);\r\n                                                                                        const defaultValuesNewTemp:{[key:string]:any} = { ...defaultValuesNew }\r\n                                                                                        defaultValuesNewTemp[FieldArray.GroupTwoMenuName] = e.target.value\r\n                                                                                        setDefaultValuesNew(defaultValuesNewTemp)\r\n                                                                                    }}\r\n                                                                                    error={Boolean(errors[FieldArray.GroupTwoMenuName])}\r\n                                                                                    labelId='validation-basic-select'\r\n                                                                                    aria-describedby='validation-basic-select'\r\n                                                                                >\r\n                                                                                    {FieldArray.GroupTwoMenuArray[defaultValuesNew[FieldArray.GroupOneMenuName] || FieldArray.GroupOneMenuValue].map((GroupTwoMenu: any, ItemArray_index: number) => {\r\n                                                                                        return <MenuItem value={GroupTwoMenu} key={ItemArray_index}>{GroupTwoMenu}</MenuItem>\r\n                                                                                    })}\r\n                                                                                </Select>\r\n                                                                            )}\r\n                                                                        />\r\n                                                                    </FormControl>\r\n                                                                </Grid>\r\n                                                            </Fragment>\r\n                                                            \r\n                                                        )\r\n                                                    }\r\n                                                    else if ((FieldArray.show || fieldArrayShow[FieldArray.name]) && FieldArray.type == \"autocomplete\") {\r\n                                                        if(FieldArray.name!=FieldArray.code) {\r\n                                                            if(defaultValuesNew[FieldArray.code]!=\"\" && defaultValuesNew[FieldArray.code]!=undefined && defaultValuesNew[FieldArray.name]==undefined && FieldArray && FieldArray.options && FieldArray.options.length>0 ) {\r\n                                                                FieldArray.options.map((ItemValue: any) => {\r\n                                                                    if(ItemValue.value==defaultValuesNew[FieldArray.code]) {\r\n                                                                        setValue(FieldArray.name, ItemValue.label)\r\n                                                                        setValue(FieldArray.code, ItemValue.value)\r\n                                                                    }\r\n                                                                })\r\n                                                            }\r\n                                                            if(defaultValuesNew[FieldArray.code]!=\"\" && defaultValuesNew[FieldArray.code]!=undefined && defaultValuesNew[FieldArray.name]!=undefined)  {\r\n                                                                setValue(FieldArray.name, defaultValuesNew[FieldArray.name])\r\n                                                            }\r\n                                                            if(defaultValuesNew[FieldArray.name]==undefined && defaultValuesNew[FieldArray.code]==undefined)  {\r\n                                                                setValue(FieldArray.name, \"\")\r\n                                                                setValue(FieldArray.code, \"\")\r\n                                                            }\r\n                                                        }\r\n\r\n                                                        if(defaultValuesNew[FieldArray.code]==undefined)  {\r\n                                                            setValue(FieldArray.code, \"\")\r\n                                                        }\r\n                                                        else {                                                        \r\n                                                            setValue(FieldArray.code, defaultValuesNew[FieldArray.code])\r\n                                                        }\r\n                                                        \r\n                                                        const options = FieldArray.options\r\n                                                        \r\n                                                        return (\r\n                                                            <Grid item xs={FieldArray.rules.xs} sm={FieldArray.rules.sm} key={\"AllFields_\" + FieldArray_index}>\r\n                                                                <FormControl fullWidth sx={{ mb: 0 }}>\r\n                                                                    <Controller\r\n                                                                        name={FieldArray.name}\r\n                                                                        control={control}\r\n                                                                        render={({ field: { value } }) => (\r\n                                                                            <Autocomplete\r\n                                                                                size={componentsize}\r\n                                                                                value={value}\r\n                                                                                options={options}\r\n                                                                                freeSolo={FieldArray.freeSolo}\r\n                                                                                id=\"controllable-states-demo\"\r\n                                                                                isOptionEqualToValue={(option:any, value) => { return option.value === value; }}\r\n                                                                                renderInput={(params) => <TextField {...params} label={FieldArray.label} />}\r\n                                                                                onChange={(event: any, newValue: any) => {\r\n                                                                                    if (newValue != undefined) {\r\n                                                                                        const defaultValuesNewTemp:{[key:string]:any} = { ...defaultValuesNew }\r\n                                                                                        if(FieldArray.name!=FieldArray.code) {\r\n                                                                                            defaultValuesNewTemp[FieldArray.name] = newValue.label\r\n                                                                                            defaultValuesNewTemp[FieldArray.code] = newValue.value\r\n                                                                                        }\r\n                                                                                        else    {\r\n                                                                                            defaultValuesNewTemp[FieldArray.code] = newValue.value\r\n                                                                                        }\r\n                                                                                        setDefaultValuesNew(defaultValuesNewTemp)\r\n                                                                                        \r\n                                                                                        //This field will control other fields show or not\r\n                                                                                        const fieldArrayShowTemp:{[key:string]:any} = {}\r\n                                                                                        if (FieldArray.EnableFields && FieldArray.EnableFields != undefined && FieldArray.EnableFields[newValue.value] != undefined) {\r\n                                                                                            for (const fieldItem of FieldArray.EnableFields[newValue.value]) {\r\n                                                                                                fieldArrayShowTemp[fieldItem] = true\r\n                                                                                            }\r\n                                                                                        }\r\n                                                                                        if (FieldArray.DisableFields && FieldArray.DisableFields != undefined && FieldArray.DisableFields[newValue.value] != undefined) {\r\n                                                                                            for (const fieldItem of FieldArray.DisableFields[newValue.value]) {\r\n                                                                                                fieldArrayShowTemp[fieldItem] = false\r\n                                                                                            }\r\n                                                                                        }\r\n                                                                                        setFieldArrayShow(fieldArrayShowTemp)\r\n\r\n                                                                                        //根据下拉列表中项目的值来指定其它字段的类型\r\n                                                                                        FieldArray.options.map((ItemValue: any) => {\r\n                                                                                            if(ItemValue['ExtraControl']) {\r\n                                                                                                const TempFieldNameAndType = ItemValue['ExtraControl'].split(\":\")\r\n                                                                                                if(TempFieldNameAndType.length > 1 && TempFieldNameAndType[1] && newValue.value==ItemValue['value']) {\r\n                                                                                                    allFields && allFields[allFieldsModeItem.value] && allFields[allFieldsModeItem.value].map((FieldArrayChild: any, FieldArrayChild_index: number) => {\r\n                                                                                                        if(FieldArrayChild.name == TempFieldNameAndType[0]) {\r\n                                                                                                            const allFieldsTemp:{[key:string]:any} = JSON.parse(JSON.stringify(allFields))\r\n                                                                                                            if(TempFieldNameAndType[1]=='chinaidcard') {\r\n                                                                                                                allFieldsTemp[allFieldsModeItem.value][FieldArrayChild_index]['type'] = \"input\"\r\n                                                                                                                allFieldsTemp[allFieldsModeItem.value][FieldArrayChild_index]['rules']['format'] = TempFieldNameAndType[1]\r\n                                                                                                                allFieldsTemp[allFieldsModeItem.value][FieldArrayChild_index]['rules']['出生日期'] = FieldArrayChild.name.replace(\"身份证件号\",\"出生日期\")\r\n                                                                                                                allFieldsTemp[allFieldsModeItem.value][FieldArrayChild_index]['rules']['出生年月'] = FieldArrayChild.name.replace(\"身份证件号\",\"出生年月\")\r\n                                                                                                                allFieldsTemp[allFieldsModeItem.value][FieldArrayChild_index]['rules']['性别'] = FieldArrayChild.name.replace(\"身份证件号\",\"性别\")\r\n                                                                                                                allFieldsTemp[allFieldsModeItem.value][FieldArrayChild_index]['rules']['年龄'] = FieldArrayChild.name.replace(\"身份证件号\",\"年龄\")\r\n                                                                                                            }\r\n                                                                                                            else {\r\n                                                                                                                allFieldsTemp[allFieldsModeItem.value][FieldArrayChild_index]['type'] = \"input\"\r\n                                                                                                                allFieldsTemp[allFieldsModeItem.value][FieldArrayChild_index]['rules']['format'] = \"\"\r\n                                                                                                                allFieldsTemp[allFieldsModeItem.value][FieldArrayChild_index]['rules']['出生日期'] = \"\"\r\n                                                                                                                allFieldsTemp[allFieldsModeItem.value][FieldArrayChild_index]['rules']['出生年月'] = \"\"\r\n                                                                                                                allFieldsTemp[allFieldsModeItem.value][FieldArrayChild_index]['rules']['性别'] = \"\"\r\n                                                                                                                allFieldsTemp[allFieldsModeItem.value][FieldArrayChild_index]['rules']['年龄'] = \"\"\r\n                                                                                                            }\r\n                                                                                                            setAllFields(allFieldsTemp)\r\n                                                                                                        }\r\n                                                                                                    })\r\n                                                                                                }\r\n                                                                                            }\r\n                                                                                        })\r\n                                                                                    }\r\n                                                                                    else {\r\n                                                                                        const defaultValuesNewTemp:{[key:string]:any} = { ...defaultValuesNew }\r\n                                                                                        defaultValuesNewTemp[FieldArray.name] = \"\"\r\n                                                                                        defaultValuesNewTemp[FieldArray.code] = \"\"\r\n                                                                                        setDefaultValuesNew(defaultValuesNewTemp)\r\n                                                                                        setValue(FieldArray.name, \"\")\r\n                                                                                        setValue(FieldArray.code, \"\")\r\n                                                                                    }\r\n                                                                                }}\r\n                                                                            />\r\n                                                                        )}\r\n                                                                    />                                                                \r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length>12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            <Tooltip title={<Fragment>{FieldArray.helptext}</Fragment>} >\r\n                                                                                <IconButton style={{ padding: 0, margin: '0px 0px 0px 5px'}}>\r\n                                                                                    <HelpIcon />\r\n                                                                                </IconButton>\r\n                                                                            </Tooltip>\r\n                                                                            {FieldArray.helptext.substring(0,FieldArray.rules.sm==12?56:(FieldArray.rules.sm==6?24:12))}...\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length<=12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            {FieldArray.helptext}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {fieldError && fieldError.message && (\r\n                                                                        <FormHelperText sx={{ color: 'error.main' }}>\r\n                                                                            {fieldError.message as string}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                </FormControl>\r\n                                                            </Grid>\r\n                                                        )\r\n                                                    }    \r\n                                                    else if ((FieldArray.show || fieldArrayShow[FieldArray.name]) && FieldArray.type == \"autocompletemdi\") {\r\n                                                        \r\n                                                        //console.log(\"defaultValuesNew[FieldArray.name]***************Begin\", FieldArray)\r\n                                                        if (action.indexOf(\"edit_default\") != -1 && defaultValuesNew[FieldArray.name] != undefined) {\r\n                                                            \r\n                                                            //console.log(\"defaultValuesNew[FieldArray.name]--------------------------------\", defaultValuesNew[FieldArray.name])\r\n                                                            //setValue(FieldArray.name, defaultValuesNew[FieldArray.name])\r\n                                                        }\r\n                                                        setValue(FieldArray.name, defaultValuesNew[FieldArray.name])\r\n                                                        \r\n                                                        return (\r\n                                                            <Grid item xs={FieldArray.rules.xs} sm={FieldArray.rules.sm} key={\"AllFields_\" + FieldArray_index}>\r\n                                                                <FormControl fullWidth sx={{ mb: 0 }}>\r\n                                                                    <Controller\r\n                                                                        name={FieldArray.name}\r\n                                                                        control={control}\r\n                                                                        render={({ field: { value } }) => (\r\n                                                                            <Autocomplete\r\n                                                                                size={componentsize}\r\n                                                                                value={value}\r\n                                                                                freeSolo={FieldArray.freeSolo}\r\n                                                                                onChange={(event: any, newValue: any) => {\r\n                                                                                    if (newValue != undefined) {\r\n                                                                                        const defaultValuesNewTemp:{[key:string]:any} = { ...defaultValuesNew }\r\n                                                                                        defaultValuesNewTemp[FieldArray.name] = newValue.value\r\n                                                                                        setDefaultValuesNew(defaultValuesNewTemp)\r\n                                                                                    }\r\n                                                                                }}\r\n                                                                                id=\"controllable-states-demo\"\r\n                                                                                options={mdi}\r\n                                                                                isOptionEqualToValue={(option:any, value) => { return option.label === value; }}\r\n                                                                                renderInput={(params) => <TextField {...params} label={FieldArray.label} />}\r\n                                                                                renderOption={(props, option) => (\r\n                                                                                    <Box component='li' sx={{ '& > img': { mr: 4, flexShrink: 0 } }} {...props}>\r\n                                                                                        <Icon icon={`mdi-${option.label}`} />\r\n                                                                                        {option.label}\r\n                                                                                    </Box>\r\n                                                                                )}\r\n                                                                            />\r\n                                                                        )}\r\n                                                                    />                                                                \r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length>12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            <Tooltip title={<Fragment>{FieldArray.helptext}</Fragment>} >\r\n                                                                                <IconButton style={{ padding: 0, margin: '0px 0px 0px 5px'}}>\r\n                                                                                    <HelpIcon />\r\n                                                                                </IconButton>\r\n                                                                            </Tooltip>\r\n                                                                            {FieldArray.helptext.substring(0,FieldArray.rules.sm==12?56:(FieldArray.rules.sm==6?24:12))}...\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length<=12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            {FieldArray.helptext}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {fieldError && fieldError.message && (\r\n                                                                        <FormHelperText sx={{ color: 'error.main' }}>\r\n                                                                            {fieldError.message as string}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                </FormControl>\r\n                                                            </Grid>\r\n                                                        )\r\n                                                    }      \r\n                                                    else if ((FieldArray.show || fieldArrayShow[FieldArray.name]) && FieldArray.type == \"autocompleteicons\") {\r\n                                                        \r\n                                                        //console.log(\"defaultValuesNew[FieldArray.name]***************Begin\", FieldArray)\r\n                                                        if (action.indexOf(\"edit_default\") != -1 && defaultValuesNew[FieldArray.name] != undefined) {\r\n                                                            \r\n                                                            //console.log(\"defaultValuesNew[FieldArray.name]--------------------------------\", defaultValuesNew[FieldArray.name])\r\n                                                            //setValue(FieldArray.name, defaultValuesNew[FieldArray.name])\r\n                                                        }\r\n                                                        setValue(FieldArray.name, defaultValuesNew[FieldArray.name])\r\n                                                        \r\n                                                        return (\r\n                                                            <Grid item xs={FieldArray.rules.xs} sm={FieldArray.rules.sm} key={\"AllFields_\" + FieldArray_index}>\r\n                                                                <FormControl fullWidth sx={{ mb: 0 }}>\r\n                                                                    <Controller\r\n                                                                        name={FieldArray.name}\r\n                                                                        control={control}\r\n                                                                        render={({ field: { value } }) => (\r\n                                                                            <Autocomplete\r\n                                                                                size={componentsize}\r\n                                                                                value={value}\r\n                                                                                freeSolo={FieldArray.freeSolo}\r\n                                                                                onChange={(event: any, newValue: any) => {\r\n                                                                                    if (newValue != undefined) {\r\n                                                                                        const defaultValuesNewTemp:{[key:string]:any} = { ...defaultValuesNew }\r\n                                                                                        defaultValuesNewTemp[FieldArray.name] = newValue.value\r\n                                                                                        setDefaultValuesNew(defaultValuesNewTemp)\r\n                                                                                    }\r\n                                                                                }}\r\n                                                                                id=\"controllable-states-demo\"\r\n                                                                                options={FieldArray.options}\r\n                                                                                isOptionEqualToValue={(option:any, value) => { return option.label === value; }}\r\n                                                                                renderInput={(params) => <TextField {...params} label={FieldArray.label} />}\r\n                                                                                renderOption={(props, option) => (\r\n                                                                                    <Box component='li' sx={{ '& > img': { mr: 4, flexShrink: 0 } }} {...props}>\r\n                                                                                        <ImgStyled sx={{width:'50px',height:'50px'}} src={authConfig.backEndApiHost+option.label} alt={option.value} />\r\n                                                                                        {option.value}\r\n                                                                                    </Box>\r\n                                                                                )}\r\n                                                                            />\r\n                                                                        )}\r\n                                                                    />                                                                \r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length>12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            <Tooltip title={<Fragment>{FieldArray.helptext}</Fragment>} >\r\n                                                                                <IconButton style={{ padding: 0, margin: '0px 0px 0px 5px'}}>\r\n                                                                                    <HelpIcon />\r\n                                                                                </IconButton>\r\n                                                                            </Tooltip>\r\n                                                                            {FieldArray.helptext.substring(0,FieldArray.rules.sm==12?56:(FieldArray.rules.sm==6?24:12))}...\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length<=12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            {FieldArray.helptext}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {fieldError && fieldError.message && (\r\n                                                                        <FormHelperText sx={{ color: 'error.main' }}>\r\n                                                                            {fieldError.message as string}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                </FormControl>\r\n                                                            </Grid>\r\n                                                        )\r\n                                                    }   \r\n                                                    else if ((FieldArray.show || fieldArrayShow[FieldArray.name]) && FieldArray.type == \"autocompletemulti\") {\r\n                                                        const DefaultValueForAutoComplete:any[] = []\r\n                                                        const DefaultValueForAutoCompleteMap:{[key:string]:any} = {}\r\n                                                        FieldArray.options.map((ItemValue: any) => {\r\n                                                            DefaultValueForAutoCompleteMap[ItemValue['value']] = ItemValue['label'];\r\n                                                        })\r\n                                                        if(defaultValuesNew[FieldArray.code] != null) {\r\n                                                            const TempArray = defaultValuesNew[FieldArray.code].split(',')\r\n                                                            TempArray.map((ItemValue: any) => {\r\n                                                                if (ItemValue != '' && ItemValue != undefined) {\r\n                                                                    DefaultValueForAutoComplete.push({ \"value\": ItemValue, \"label\": DefaultValueForAutoCompleteMap[ItemValue] })\r\n                                                                }\r\n                                                            })\r\n                                                        }                                                    \r\n                                                        setValue(FieldArray.name, DefaultValueForAutoComplete)\r\n                                                        if(FieldArray.code!=FieldArray.name)  {\r\n                                                            setValue(FieldArray.code, defaultValuesNew[FieldArray.code])\r\n                                                        }\r\n                                                        \r\n                                                        return (\r\n                                                            <Grid item xs={FieldArray.rules.xs} sm={FieldArray.rules.sm} key={\"AllFields_\" + FieldArray_index}>\r\n                                                                <FormControl fullWidth sx={{ mb: 0 }}>\r\n                                                                    <Controller\r\n                                                                        name={FieldArray.name}\r\n                                                                        control={control}\r\n                                                                        render={({ field: { value } }) => {\r\n\r\n                                                                            return (\r\n                                                                                <Fragment>\r\n                                                                                    { Array.isArray(value) ? \r\n                                                                                    <Autocomplete\r\n                                                                                        multiple\r\n                                                                                        size={componentsize}                                                                            \r\n                                                                                        value={value}\r\n                                                                                        id=\"tags-outlined\"\r\n                                                                                        options={FieldArray.options}\r\n                                                                                        getOptionLabel={(option:any) => option.label}\r\n                                                                                        filterSelectedOptions\r\n                                                                                        isOptionEqualToValue={(option:any, value) => { return option.value === value.value; }}\r\n                                                                                        onChange={(event: any, newValue: any) => {\r\n                                                                                            if (newValue && newValue.length > 0) {\r\n                                                                                                const newValueArray = []\r\n                                                                                                for (const fieldItem of newValue) {\r\n                                                                                                    newValueArray.push(fieldItem.value);\r\n                                                                                                }\r\n                                                                                                const autoCompleteMultiTemp:{[key:string]:any} = { ...autoCompleteMulti }\r\n                                                                                                autoCompleteMultiTemp[FieldArray.name] = newValueArray.join(',');\r\n                                                                                                setAutoCompleteMulti(autoCompleteMultiTemp)\r\n            \r\n                                                                                                const defaultValuesNewTemp:{[key:string]:any} = { ...defaultValuesNew }\r\n                                                                                                defaultValuesNewTemp[FieldArray.code] = newValueArray.join(',');\r\n                                                                                                setDefaultValuesNew(defaultValuesNewTemp)\r\n            \r\n                                                                                            }\r\n                                                                                            else {\r\n                                                                                                const autoCompleteMultiTemp:{[key:string]:any} = { ...autoCompleteMulti }\r\n                                                                                                autoCompleteMultiTemp[FieldArray.name] = \"\";\r\n                                                                                                setAutoCompleteMulti(autoCompleteMultiTemp)\r\n            \r\n                                                                                                const defaultValuesNewTemp:{[key:string]:any} = { ...defaultValuesNew }\r\n                                                                                                defaultValuesNewTemp[FieldArray.code] = \"\";\r\n                                                                                                setDefaultValuesNew(defaultValuesNewTemp)\r\n                                                                                            }\r\n            \r\n                                                                                        }}\r\n                                                                                        renderInput={(params) => (\r\n                                                                                            <TextField\r\n                                                                                                {...params}\r\n                                                                                                label={FieldArray.label}\r\n                                                                                                placeholder={FieldArray.placeholder}\r\n                                                                                            />\r\n                                                                                        )}\r\n                                                                                    />\r\n                                                                                    : '' }\r\n                                                                                </Fragment>    \r\n                                                                            )\r\n                                                                        }}\r\n                                                                    />                                                                \r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length>12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            <Tooltip title={<Fragment>{FieldArray.helptext}</Fragment>} >\r\n                                                                                <IconButton style={{ padding: 0, margin: '0px 0px 0px 5px'}}>\r\n                                                                                    <HelpIcon />\r\n                                                                                </IconButton>\r\n                                                                            </Tooltip>\r\n                                                                            {FieldArray.helptext.substring(0,FieldArray.rules.sm==12?56:(FieldArray.rules.sm==6?24:12))}...\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length<=12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            {FieldArray.helptext}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {fieldError && fieldError.message && (\r\n                                                                        <FormHelperText sx={{ color: 'error.main' }}>\r\n                                                                            {fieldError.message as string}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                </FormControl>\r\n                                                            </Grid>\r\n                                                        )\r\n                                                    }\r\n                                                    else if ((FieldArray.show || fieldArrayShow[FieldArray.name]) && FieldArray.type == \"jumpwindow\") {\r\n                                                        const NewFieldName = FieldArray.name\r\n                                                        const NewFieldCode = FieldArray.code\r\n                                                        if(NewFieldName!=NewFieldCode) {\r\n                                                            if(defaultValuesNew[NewFieldCode]!=\"\" && defaultValuesNew[NewFieldCode]!=undefined && defaultValuesNew[NewFieldName]==undefined && FieldArray && FieldArray.options && FieldArray.options.length>0 ) {\r\n                                                                FieldArray.options.map((ItemValue: any) => {\r\n                                                                    if(ItemValue.value==defaultValuesNew[NewFieldCode]) {\r\n                                                                        setValue(NewFieldName, ItemValue.label)\r\n                                                                        setValue(NewFieldCode, ItemValue.value)\r\n                                                                    }\r\n                                                                })\r\n                                                            }\r\n                                                            if(defaultValuesNew[NewFieldCode]!=\"\" && defaultValuesNew[NewFieldCode]!=undefined && defaultValuesNew[NewFieldName]!=undefined)  {\r\n                                                                setValue(NewFieldName, defaultValuesNew[NewFieldName])\r\n                                                            }\r\n                                                            if(defaultValuesNew[NewFieldName]==undefined && defaultValuesNew[NewFieldCode]==undefined)  {\r\n                                                                setValue(NewFieldName, \"\")\r\n                                                                setValue(NewFieldCode, \"\")\r\n                                                            }\r\n                                                        }\r\n\r\n                                                        if(defaultValuesNew[NewFieldCode]==undefined)  {\r\n                                                            setValue(NewFieldCode, \"\")\r\n                                                        }\r\n                                                        else {                                                        \r\n                                                            setValue(NewFieldCode, defaultValuesNew[NewFieldCode])\r\n                                                        }\r\n\r\n                                                        return (\r\n                                                            <Grid item xs={FieldArray.rules.xs} sm={FieldArray.rules.sm} key={\"AllFields_\" + FieldArray_index}>\r\n                                                                <FormControl fullWidth sx={{ mb: 0 }}>\r\n                                                                    <Controller\r\n                                                                        name={NewFieldName}\r\n                                                                        control={control}\r\n                                                                        render={({ field: { value, onChange } }) => (\r\n                                                                            <Fragment>\r\n                                                                                <TextField\r\n                                                                                    size={componentsize}  \r\n                                                                                    disabled={FieldArray.rules.disabled}\r\n                                                                                    value={value}\r\n                                                                                    label={FieldArray.label}\r\n                                                                                    type={FieldArray.type}\r\n                                                                                    InputProps={FieldArray.inputProps ? FieldArray.inputProps : {}}\r\n                                                                                    onChange={(e) => {\r\n                                                                                        onChange(e);\r\n                                                                                        const defaultValuesNewTemp:{[key:string]:any} = { ...defaultValuesNew }\r\n                                                                                        defaultValuesNewTemp[NewFieldName] = e.target.value\r\n                                                                                        setDefaultValuesNew(defaultValuesNewTemp)\r\n                                                                                    }}\r\n                                                                                    onSelect={(event: FocusEvent<HTMLInputElement>) => {\r\n                                                                                        event.target.blur();\r\n                                                                                        const jumpWindowIsShowTemp:{[key:string]:any} = { ...jumpWindowIsShow }\r\n                                                                                        jumpWindowIsShowTemp[NewFieldName] = true\r\n                                                                                        setJumpWindowIsShow(jumpWindowIsShowTemp)\r\n                                                                                    }}\r\n                                                                                    placeholder={FieldArray.placeholder}\r\n                                                                                    error={Boolean(errors[NewFieldName])}\r\n                                                                                />\r\n                                                                                <Dialog\r\n                                                                                    fullWidth\r\n                                                                                    open={jumpWindowIsShow[NewFieldName]==true?true:false}\r\n                                                                                    scroll='body'\r\n                                                                                    maxWidth='md'\r\n                                                                                    onClose={()=>handleDialogWindowClose()}\r\n                                                                                    onBackdropClick={()=>handleDialogWindowClose()}\r\n                                                                                    TransitionComponent={Transition}\r\n                                                                                >\r\n                                                                                    <DialogContent\r\n                                                                                    sx={{\r\n                                                                                        pt: { xs: 8, sm: 12.5 },\r\n                                                                                        pr: { xs: 5, sm: 12 },\r\n                                                                                        pb: { xs: 5, sm: 9.5 },\r\n                                                                                        pl: { xs: 4, sm: 11 },\r\n                                                                                        position: 'relative'\r\n                                                                                    }}\r\n                                                                                    >\r\n                                                                                    <IconButton size='small' onClick={()=>handleDialogWindowClose()} sx={{ position: 'absolute', right: '1rem', top: '1rem' }}>\r\n                                                                                        <Icon icon='mdi:close' />\r\n                                                                                    </IconButton>\r\n                                                                                    <Box sx={{ mb: 8, textAlign: 'center' }}>\r\n                                                                                        <Typography variant='h5' sx={{ mb: 3 }}>{FieldArray.jumpWindowTitle}</Typography>\r\n                                                                                        <Typography variant='body2'>{FieldArray.jumpWindowSubTitle}.</Typography>\r\n                                                                                    </Box>\r\n                                                                                    <Box sx={{ display: 'flex', flexWrap: { xs: 'wrap', md: 'nowrap' } }}>\r\n                                                                                        <TabContext value={activeTab}>\r\n                                                                                        <TabPanel value='detailsTab' sx={{ flexGrow: 1 }}>\r\n                                                                                            <IndexJumpDialogWindow handleDialogWindowCloseWithParam={handleDialogWindowCloseWithParam} NewFieldName={NewFieldName} NewFieldCode={NewFieldCode} FieldArray={FieldArray} />\r\n                                                                                        </TabPanel>\r\n                                                                                        </TabContext>\r\n                                                                                    </Box>\r\n                                                                                    </DialogContent>\r\n                                                                                </Dialog>\r\n                                                                            </Fragment>\r\n                                                                        )}\r\n                                                                    />\r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length>12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            <Tooltip title={<Fragment>{FieldArray.helptext}</Fragment>} >\r\n                                                                                <IconButton style={{ padding: 0, margin: '0px 0px 0px 5px'}}>\r\n                                                                                    <HelpIcon />\r\n                                                                                </IconButton>\r\n                                                                            </Tooltip>\r\n                                                                            {FieldArray.helptext.substring(0,FieldArray.rules.sm==12?56:(FieldArray.rules.sm==6?24:12))}...\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length<=12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            {FieldArray.helptext}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {fieldError && fieldError.message && (\r\n                                                                        <FormHelperText sx={{ color: 'error.main' }}>\r\n                                                                            {fieldError.message as string}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                </FormControl>\r\n                                                            </Grid>\r\n                                                        )\r\n                                                    }     \r\n                                                    else if ((FieldArray.show || fieldArrayShow[FieldArray.name]) && (FieldArray.type == \"radiogroup\" || FieldArray.type == \"radiogroupcolor\")) {\r\n                                                        \r\n                                                        //console.log(\"defaultValuesNew[FieldArray.name]***************Begin\", FieldArray)\r\n                                                        if (action.indexOf(\"edit_default\") != -1 && defaultValuesNew[FieldArray.name] != undefined) {\r\n                                                        }\r\n                                                        setValue(FieldArray.name, defaultValuesNew[FieldArray.name])\r\n                                                        \r\n                                                        return (\r\n                                                            <Grid item xs={FieldArray.rules.xs} sm={FieldArray.rules.sm} key={\"AllFields_\" + FieldArray_index}>\r\n                                                                <FormControl fullWidth sx={{ mb: 0 }}>\r\n                                                                    <FormLabel>{FieldArray.label}</FormLabel>\r\n                                                                    <Controller\r\n                                                                        name={FieldArray.name}\r\n                                                                        control={control}\r\n                                                                        render={({ field }) => (\r\n                                                                            <RadioGroup\r\n                                                                                row={FieldArray.rules.row}\r\n                                                                                {...field}\r\n                                                                                aria-label={FieldArray.label}\r\n                                                                                name={FieldArray.name}\r\n                                                                                onChange={(e: any) => {\r\n                                                                                    const defaultValuesNewTemp:{[key:string]:any} = { ...defaultValuesNew }\r\n                                                                                    defaultValuesNewTemp[FieldArray.name] = e.target.value\r\n                                                                                    setDefaultValuesNew(defaultValuesNewTemp)\r\n                                                                                    console.log(\"loopModelDataStorageTemp0\", e.target.value)\r\n                                                                                    if((fieldIdValue + 1) < singleModelCounter) {\r\n                                                                                        const loopModelDataStorageTemp:{[key:string]:any} = { ...loopModelDataStorage }\r\n                                                                                        loopModelDataStorageTemp[FieldArray.name] = e.target.value\r\n                                                                                        setLoopModelDataStorage(loopModelDataStorageTemp)\r\n                                                                                        setTimeout(() => {\r\n                                                                                            setFieldIdValue(fieldIdValue + 1);\r\n                                                                                        }, 400);\r\n                                                                                        console.log(\"loopModelDataStorageTemp1\", loopModelDataStorageTemp)\r\n                                                                                    }\r\n                                                                                }}\r\n                                                                                onClick={(e: any) => {\r\n                                                                                    if((fieldIdValue + 1) < singleModelCounter && e.target && e.target.value) {\r\n                                                                                        const loopModelDataStorageTemp:{[key:string]:any} = { ...loopModelDataStorage }\r\n                                                                                        loopModelDataStorageTemp[FieldArray.name] = e.target.value\r\n                                                                                        setLoopModelDataStorage(loopModelDataStorageTemp)\r\n                                                                                        setTimeout(() => {\r\n                                                                                            setFieldIdValue(fieldIdValue + 1);\r\n                                                                                        }, 400);\r\n                                                                                        console.log(\"loopModelDataStorageTemp2 value\", loopModelDataStorageTemp)\r\n                                                                                    }\r\n                                                                                    if((fieldIdValue + 1) < singleModelCounter && e.target && e.target.innerText) {\r\n                                                                                        const loopModelDataStorageTemp:{[key:string]:any} = { ...loopModelDataStorage }\r\n                                                                                        loopModelDataStorageTemp[FieldArray.name] = e.target.innerText\r\n                                                                                        setLoopModelDataStorage(loopModelDataStorageTemp)\r\n                                                                                        setTimeout(() => {\r\n                                                                                            setFieldIdValue(fieldIdValue + 1);\r\n                                                                                        }, 400);\r\n                                                                                        console.log(\"loopModelDataStorageTemp2 innerText\", loopModelDataStorageTemp)\r\n                                                                                    }\r\n                                                                                }}\r\n                                                                            >\r\n                                                                                {FieldArray.options.map((ItemArray: any, ItemArray_index: number) => {\r\n                                                                                    \r\n                                                                                return (\r\n                                                                                        <FormControlLabel\r\n                                                                                            value={ItemArray.value}\r\n                                                                                            label={ItemArray.label}\r\n                                                                                            key={ItemArray_index}\r\n                                                                                            sx={errors[FieldArray.name] ? { color: 'error.main' } : null}\r\n                                                                                            control={<Radio size={componentsize} sx={errors[FieldArray.name] ? { color: 'error.main' } : null} />}\r\n                                                                                        />\r\n                                                                                    )\r\n                                                                                })}\r\n                                                                            </RadioGroup>\r\n                                                                        )}\r\n                                                                    />\r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length>12 && (\r\n                                                                        <FormHelperText sx={{ml: '0px'}}>\r\n                                                                            {isMobileData==false && FieldArray.helptext.substring(0,FieldArray.rules.sm==12?56:(FieldArray.rules.sm==6?28:12))}\r\n                                                                            {isMobileData ? FieldArray.helptext : null}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length<=12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            {FieldArray.helptext}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {fieldError && fieldError.message && (\r\n                                                                        <FormHelperText sx={{ color: 'error.main' }}>\r\n                                                                            {fieldError.message as string}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                </FormControl>\r\n                                                            </Grid>\r\n                                                        )\r\n                                                    }\r\n                                                    else if ((FieldArray.show || fieldArrayShow[FieldArray.name]) && FieldArray.type == \"checkbox\") {\r\n                                                        \r\n                                                        //console.log(\"defaultValuesNew[FieldArray.name]***************Begin\", FieldArray)\r\n                                                        if ((action.indexOf(\"edit_default\") != -1 || action.indexOf(\"import_default\") != -1) && defaultValuesNew[FieldArray.name] != undefined) {\r\n                                                            \r\n                                                            //console.log(\"defaultValuesNew[FieldArray.name]--------------------------------\", defaultValuesNew[FieldArray.name])\r\n                                                            setValue(FieldArray.name, defaultValuesNew[FieldArray.name])\r\n                                                        }\r\n                                                        \r\n                                                        return (\r\n                                                            <Grid item xs={FieldArray.rules.xs} sm={FieldArray.rules.sm} key={\"AllFields_\" + FieldArray_index}>\r\n                                                                <FormControl fullWidth sx={{ mb: 0 }}>\r\n                                                                    <FormLabel>{FieldArray.label}</FormLabel>\r\n                                                                    <Controller\r\n                                                                        name={FieldArray.name}\r\n                                                                        control={control}\r\n                                                                        render={({ field }) => (\r\n                                                                            <FormGroup \r\n                                                                                row={FieldArray.rules.row}\r\n                                                                                {...field} \r\n                                                                                aria-label={FieldArray.label}>\r\n                                                                                {FieldArray.options.map((ItemArray: any, ItemArray_index: number) => {\r\n                                                                                    const TempValueArray = defaultValuesNew[FieldArray.name].split(\",\")\r\n                                                                                    \r\n                                                                                    return (\r\n                                                                                        <FormControlLabel\r\n                                                                                            value={ItemArray.value}\r\n                                                                                            label={ItemArray.label}\r\n                                                                                            key={ItemArray_index}\r\n                                                                                            sx={errors[FieldArray.name] ? { color: 'error.main' } : null}\r\n                                                                                            control={\r\n                                                                                                <Checkbox\r\n                                                                                                    size={componentsize}\r\n                                                                                                    sx={errors[FieldArray.name] ? { color: 'error.main' } : null}\r\n                                                                                                    checked={TempValueArray.indexOf(ItemArray.value) == -1 ? false : true}\r\n                                                                                                    onChange={(e) => {\r\n                                                                                                        const clickOrNot = e.target.checked\r\n                                                                                                        const defaultValuesNewTemp:{[key:string]:any} = { ...defaultValuesNew }\r\n                                                                                                        if (clickOrNot) {\r\n                                                                                                            //click\r\n                                                                                                            if (defaultValuesNewTemp[FieldArray.name].indexOf(ItemArray.value) == -1) {\r\n                                                                                                                //Not Exist, will add into\r\n                                                                                                                if (defaultValuesNewTemp[FieldArray.name] == undefined || defaultValuesNewTemp[FieldArray.name] == \"undefined\" || defaultValuesNewTemp[FieldArray.name] == \"\") {\r\n                                                                                                                    defaultValuesNewTemp[FieldArray.name] = ItemArray.value\r\n                                                                                                                }\r\n                                                                                                                else {\r\n                                                                                                                    defaultValuesNewTemp[FieldArray.name] += \",\" + ItemArray.value\r\n                                                                                                                }\r\n                                                                                                            }\r\n                                                                                                        }\r\n                                                                                                        else {\r\n                                                                                                            //cancel\r\n                                                                                                            const TempValue = defaultValuesNewTemp[FieldArray.name].split(\",\")\r\n                                                                                                            if (TempValue && TempValue.indexOf(ItemArray.value) != -1) {\r\n                                                                                                                //Exist, will remove\r\n                                                                                                                TempValue.splice(TempValue.indexOf(ItemArray.value), 1)\r\n                                                                                                                defaultValuesNewTemp[FieldArray.name] = TempValue.join(',')\r\n                                                                                                            }\r\n                                                                                                        }\r\n                                                                                                        setDefaultValuesNew(defaultValuesNewTemp)\r\n                                                                                                    }}\r\n                                                                                                />\r\n                                                                                            }\r\n                                                                                        />\r\n                                                                                    )\r\n                                                                                })}\r\n                                                                            </FormGroup>\r\n                                                                        )}\r\n                                                                    />\r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length>12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            <Tooltip title={<Fragment>{FieldArray.helptext}</Fragment>} >\r\n                                                                                <IconButton style={{ padding: 0, margin: '0px 0px 0px 5px'}}>\r\n                                                                                    <HelpIcon />\r\n                                                                                </IconButton>\r\n                                                                            </Tooltip>\r\n                                                                            {FieldArray.helptext.substring(0,FieldArray.rules.sm==12?56:(FieldArray.rules.sm==6?24:12))}...\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length<=12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            {FieldArray.helptext}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {fieldError && fieldError.message && (\r\n                                                                        <FormHelperText sx={{ color: 'error.main' }}>\r\n                                                                            {fieldError.message as string}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                </FormControl>\r\n                                                            </Grid>\r\n                                                        )\r\n                                                    }\r\n                                                    else if ((FieldArray.show || fieldArrayShow[FieldArray.name]) && FieldArray.type == \"textarea\") {\r\n                                                        \r\n                                                        //console.log(\"defaultValuesNew[FieldArray.name]***************Begin\", FieldArray)\r\n                                                        if (action.indexOf(\"edit_default\") != -1 && defaultValuesNew[FieldArray.name] != undefined) {\r\n                                                            \r\n                                                            //console.log(\"defaultValuesNew[FieldArray.name]--------------------------------\", defaultValuesNew[FieldArray.name])\r\n                                                            setValue(FieldArray.name, defaultValuesNew[FieldArray.name])\r\n                                                        }\r\n                                                        \r\n                                                        return (\r\n                                                            <Grid item xs={FieldArray.rules.xs} sm={FieldArray.rules.sm} key={\"AllFields_\" + FieldArray_index}>\r\n                                                                <FormControl fullWidth sx={{ mb: 0 }}>\r\n                                                                    <Controller\r\n                                                                        name={FieldArray.name}\r\n                                                                        control={control}\r\n                                                                        render={({ field: { value, onChange } }) => (\r\n                                                                            <TextField\r\n                                                                                size={componentsize}\r\n                                                                                value={value}\r\n                                                                                label={FieldArray.label}\r\n                                                                                rows={4}\r\n                                                                                multiline\r\n                                                                                onChange={(e) => {\r\n                                                                                    onChange(e);\r\n                                                                                    const defaultValuesNewTemp:{[key:string]:any} = { ...defaultValuesNew }\r\n                                                                                    defaultValuesNewTemp[FieldArray.name] = e.target.value\r\n                                                                                    setDefaultValuesNew(defaultValuesNewTemp)\r\n                                                                                }}\r\n                                                                                placeholder={FieldArray.placeholder}\r\n                                                                                error={Boolean(errors[FieldArray.name])}\r\n                                                                                aria-describedby='validation-basic-textarea'\r\n                                                                            />\r\n                                                                        )}\r\n                                                                    />\r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length>12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            <Tooltip title={<Fragment>{FieldArray.helptext}</Fragment>} >\r\n                                                                                <IconButton style={{ padding: 0, margin: '0px 0px 0px 5px'}}>\r\n                                                                                    <HelpIcon />\r\n                                                                                </IconButton>\r\n                                                                            </Tooltip>\r\n                                                                            {FieldArray.helptext.substring(0,FieldArray.rules.sm==12?56:(FieldArray.rules.sm==6?24:12))}...\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length<=12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            {FieldArray.helptext}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {fieldError && fieldError.message && (\r\n                                                                        <FormHelperText sx={{ color: 'error.main' }}>\r\n                                                                            {fieldError.message as string}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                </FormControl>\r\n                                                            </Grid>\r\n                                                        )\r\n                                                    }\r\n                                                    else if ((FieldArray.show || fieldArrayShow[FieldArray.name]) && (FieldArray.type == \"date\" || FieldArray.type == \"date1\" || FieldArray.type == \"date2\") && FieldArray.dateFormat == \"yyyy-MM-dd\") {\r\n                                                        \r\n                                                        // Add ' 00:00:00' to avoid the date minus one day in the DatePicker\r\n                                                        //console.log(\"defaultValuesNew[FieldArray.name]***************Begin\", FieldArray)\r\n                                                        if (action.indexOf(\"edit_default\") != -1 && defaultValuesNew[FieldArray.name] != undefined && defaultValuesNew[FieldArray.name] != \"\" && defaultValuesNew[FieldArray.name] != \"0000-00-00\" && defaultValuesNew[FieldArray.name] != \"1971-01-01\" && defaultValuesNew[FieldArray.name].length == 10) {\r\n                                                            \r\n                                                            //console.log(\"defaultValuesNew[FieldArray.name]***************************\", defaultValuesNew[FieldArray.name])\r\n                                                            setValue(FieldArray.name, defaultValuesNew[FieldArray.name])\r\n                                                        }\r\n                                                        \r\n                                                        return (\r\n                                                            <Grid item xs={FieldArray.rules.xs} sm={FieldArray.rules.sm} key={\"AllFields_\" + FieldArray_index}>\r\n                                                                <FormControl fullWidth sx={{ mb: 0 }}>\r\n                                                                    <Controller\r\n                                                                        name={FieldArray.name}\r\n                                                                        control={control}\r\n                                                                        render={({ field: { value, onChange, onBlur } }) => (\r\n                                                                            <DatePickerWrapper sx={{ zIndex: 'tooltip' }}>\r\n                                                                                <DatePicker \r\n                                                                                    selected={defaultValuesNew[FieldArray.name]!=undefined && defaultValuesNew[FieldArray.name]!=\"\" && defaultValuesNew[FieldArray.name] != \"0000-00-00\" && defaultValuesNew[FieldArray.name] != \"1971-01-01\" && defaultValuesNew[FieldArray.name].length == 10 ? (new Date(defaultValuesNew[FieldArray.name] + ' 00:00:00')) : (value ? new Date(value) : null)  }\r\n                                                                                    id={FieldArray.name}\r\n                                                                                    showYearDropdown\r\n                                                                                    showMonthDropdown\r\n                                                                                    locale={i18n.language}\r\n                                                                                    dateFormat={FieldArray.dateFormat}\r\n                                                                                    popperPlacement='bottom-start'\r\n                                                                                    onChange={(date: Date) => {\r\n                                                                                        const defaultValuesNewTemp:{[key:string]:any} = { ...defaultValuesNew }\r\n                                                                                        if (date != undefined) {\r\n                                                                                            defaultValuesNewTemp[FieldArray.name] = date.getFullYear() + \"-\" + formatDateItem(date.getMonth() + 1) + \"-\" + formatDateItem(date.getDate())\r\n                                                                                        }\r\n                                                                                        else {\r\n                                                                                            defaultValuesNewTemp[FieldArray.name] = \"1971-01-01\";\r\n                                                                                        }\r\n                                                                                        setDefaultValuesNew(defaultValuesNewTemp)\r\n                                                                                        const allDatesTemp:{[key:string]:any} = { ...allDates }\r\n                                                                                        allDatesTemp[FieldArray.name] = defaultValuesNewTemp[FieldArray.name]\r\n                                                                                        setAllDates(allDatesTemp)\r\n                                                                                        onChange(date);\r\n                                                                                        onBlur();\r\n                                                                                    }}\r\n                                                                                    todayButton='Today'\r\n                                                                                    minDate={FieldArray.StartDate != \"\" && FieldArray.StartDate != undefined && FieldArray.StartDate != \"1971-01-01\" ? new Date(FieldArray.StartDate + ' 00:00:00') : new Date(\"1971-01-01 00:00:00\")}\r\n                                                                                    maxDate={FieldArray.EndDate != \"\" && FieldArray.EndDate != undefined && FieldArray.EndDate != \"1971-01-01\" ? new Date(FieldArray.EndDate + ' 00:00:00') : new Date(\"2099-12-31 00:00:00\")}\r\n                                                                                    placeholderText={FieldArray.placeholder}\r\n                                                                                    customInput={<TextField fullWidth size={componentsize} label={FieldArray.label || ''} autoComplete='off'/>}\r\n                                                                                />\r\n                                                                            </DatePickerWrapper>\r\n                                                                        )}\r\n                                                                    />\r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length>12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            <Tooltip title={<Fragment>{FieldArray.helptext}</Fragment>} >\r\n                                                                                <IconButton style={{ padding: 0, margin: '0px 0px 0px 5px'}}>\r\n                                                                                    <HelpIcon />\r\n                                                                                </IconButton>\r\n                                                                            </Tooltip>\r\n                                                                            {FieldArray.helptext.substring(0,FieldArray.rules.sm==12?56:(FieldArray.rules.sm==6?24:12))}...\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length<=12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            {FieldArray.helptext}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {fieldError && fieldError.message && (\r\n                                                                        <FormHelperText sx={{ color: 'error.main' }}>\r\n                                                                            {fieldError.message as string}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                </FormControl>\r\n                                                            </Grid>\r\n                                                        )\r\n                                                    }\r\n                                                    else if ((FieldArray.show || fieldArrayShow[FieldArray.name]) && (FieldArray.type == \"date\" || FieldArray.type == \"date1\" || FieldArray.type == \"date2\") && FieldArray.dateFormat == \"yyyyMMdd\") {\r\n                                                        \r\n                                                        // Add ' 00:00:00' to avoid the date minus one day in the DatePicker\r\n                                                        //console.log(\"defaultValuesNew[FieldArray.name]***************Begin\", FieldArray)\r\n                                                        if (action.indexOf(\"edit_default\") != -1 && defaultValuesNew[FieldArray.name] != undefined && defaultValuesNew[FieldArray.name] != \"\" && defaultValuesNew[FieldArray.name] != \"00000000\" && defaultValuesNew[FieldArray.name] != \"19710101\" && defaultValuesNew[FieldArray.name].length == 8) {\r\n                                                            \r\n                                                            //console.log(\"defaultValuesNew[FieldArray.name]***************************\", defaultValuesNew[FieldArray.name])\r\n                                                            setValue(FieldArray.name, defaultValuesNew[FieldArray.name])\r\n                                                        }\r\n                                                        \r\n                                                        return (\r\n                                                            <Grid item xs={FieldArray.rules.xs} sm={FieldArray.rules.sm} key={\"AllFields_\" + FieldArray_index}>\r\n                                                                <FormControl fullWidth sx={{ mb: 0 }}>\r\n                                                                    <Controller\r\n                                                                        name={FieldArray.name}\r\n                                                                        control={control}\r\n                                                                        render={({ field: { value, onChange, onBlur } }) => (\r\n                                                                            <DatePickerWrapper sx={{ zIndex: 'tooltip' }}>\r\n                                                                                <DatePicker \r\n                                                                                    selected={defaultValuesNew[FieldArray.name]!=undefined && defaultValuesNew[FieldArray.name]!=\"\" && defaultValuesNew[FieldArray.name] != \"00000000\" && defaultValuesNew[FieldArray.name] != \"19710101\" && defaultValuesNew[FieldArray.name].length == 8 ? (new Date(Number(defaultValuesNew[FieldArray.name].substring(0,4)) + '-' + Number(defaultValuesNew[FieldArray.name].substring(4,6)) + '-' + Number(defaultValuesNew[FieldArray.name].substring(6,8)) + '-' + ' 00:00:00')) : (value ? new Date(value) : null)  }\r\n                                                                                    id={FieldArray.name}\r\n                                                                                    showYearDropdown\r\n                                                                                    showMonthDropdown\r\n                                                                                    locale={i18n.language}\r\n                                                                                    dateFormat={FieldArray.dateFormat}\r\n                                                                                    popperPlacement='bottom-start'\r\n                                                                                    onChange={(date: Date) => {\r\n                                                                                        const defaultValuesNewTemp:{[key:string]:any} = { ...defaultValuesNew }\r\n                                                                                        if (date != undefined) {\r\n                                                                                            defaultValuesNewTemp[FieldArray.name] = date.getFullYear() + \"\" + formatDateItem(date.getMonth() + 1) + \"\" + formatDateItem(date.getDate())\r\n                                                                                        }\r\n                                                                                        else {\r\n                                                                                            defaultValuesNewTemp[FieldArray.name] = \"19710101\";\r\n                                                                                        }\r\n                                                                                        setDefaultValuesNew(defaultValuesNewTemp)\r\n                                                                                        const allDatesTemp:{[key:string]:any} = { ...allDates }\r\n                                                                                        allDatesTemp[FieldArray.name] = defaultValuesNewTemp[FieldArray.name]\r\n                                                                                        setAllDates(allDatesTemp)\r\n                                                                                        onChange(date);\r\n                                                                                        onBlur();\r\n                                                                                    }}\r\n                                                                                    todayButton='Today'\r\n                                                                                    minDate={FieldArray.StartDate != \"\" && FieldArray.StartDate != undefined && FieldArray.StartDate != \"1971-01-01\" ? new Date(FieldArray.StartDate + ' 00:00:00') : new Date(\"1971-01-01 00:00:00\")}\r\n                                                                                    maxDate={FieldArray.EndDate != \"\" && FieldArray.EndDate != undefined && FieldArray.EndDate != \"1971-01-01\" ? new Date(FieldArray.EndDate + ' 00:00:00') : new Date(\"2099-12-31 00:00:00\")}\r\n                                                                                    placeholderText={FieldArray.placeholder}\r\n                                                                                    customInput={<TextField fullWidth size={componentsize} label={FieldArray.label || ''} autoComplete='off'/>}\r\n                                                                                />\r\n                                                                            </DatePickerWrapper>\r\n                                                                        )}\r\n                                                                    />\r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length>12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            <Tooltip title={<Fragment>{FieldArray.helptext}</Fragment>} >\r\n                                                                                <IconButton style={{ padding: 0, margin: '0px 0px 0px 5px'}}>\r\n                                                                                    <HelpIcon />\r\n                                                                                </IconButton>\r\n                                                                            </Tooltip>\r\n                                                                            {FieldArray.helptext.substring(0,FieldArray.rules.sm==12?56:(FieldArray.rules.sm==6?24:12))}...\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length<=12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            {FieldArray.helptext}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {fieldError && fieldError.message && (\r\n                                                                        <FormHelperText sx={{ color: 'error.main' }}>\r\n                                                                            {fieldError.message as string}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                </FormControl>\r\n                                                            </Grid>\r\n                                                        )\r\n                                                    }\r\n                                                    else if ((FieldArray.show || fieldArrayShow[FieldArray.name]) && FieldArray.type == \"year\") {\r\n                                                        \r\n                                                        //console.log(\"defaultValuesNew[FieldArray.name]***************Begin\", FieldArray)\r\n                                                        if (action.indexOf(\"edit_default\") != -1 && defaultValuesNew[FieldArray.name] != undefined && defaultValuesNew[FieldArray.name] != \"\" && defaultValuesNew[FieldArray.name] != \"0000\" && defaultValuesNew[FieldArray.name] != \"1971\" && defaultValuesNew[FieldArray.name].length == 4) {\r\n                                                            \r\n                                                            //console.log(\"FieldArray***************************\", FieldArray)\r\n                                                            setValue(FieldArray.name, defaultValuesNew[FieldArray.name])\r\n                                                        }\r\n                                                        \r\n                                                        // Add ' 00:00:00' to avoid the date minus one day in the DatePicker\r\n                                                        \r\n                                                        return (\r\n                                                            <Grid item xs={FieldArray.rules.xs} sm={FieldArray.rules.sm} key={\"AllFields_\" + FieldArray_index}>\r\n                                                                <FormControl fullWidth sx={{ mb: 0 }}>\r\n                                                                    <Controller\r\n                                                                        name={FieldArray.name}\r\n                                                                        control={control}\r\n                                                                        render={({ field: { value, onChange, onBlur } }) => (\r\n                                                                            <DatePickerWrapper>\r\n                                                                                <DatePicker\r\n                                                                                    selected={defaultValuesNew[FieldArray.name] && defaultValuesNew[FieldArray.name] != \"0000\" && defaultValuesNew[FieldArray.name] != \"1971\" && defaultValuesNew[FieldArray.name].length == 4 ? (new Date(defaultValuesNew[FieldArray.name] + '-01-01 00:00:00')) : (value ? new Date(value) : null)   }\r\n                                                                                    id={FieldArray.name}\r\n                                                                                    showYearPicker\r\n                                                                                    locale={i18n.language}\r\n                                                                                    dateFormat={FieldArray.dateFormat}\r\n                                                                                    popperPlacement='bottom-start'\r\n                                                                                    onChange={(date: Date) => {\r\n                                                                                        const defaultValuesNewTemp:{[key:string]:any} = { ...defaultValuesNew }\r\n                                                                                        if (date != undefined) {\r\n                                                                                            defaultValuesNewTemp[FieldArray.name] = date.getFullYear()\r\n                                                                                        }\r\n                                                                                        else {\r\n                                                                                            defaultValuesNewTemp[FieldArray.name] = \"1971\"\r\n                                                                                        }\r\n                                                                                        setDefaultValuesNew(defaultValuesNewTemp)\r\n                                                                                        const allDatesTemp:{[key:string]:any} = { ...allDates }\r\n                                                                                        allDatesTemp[FieldArray.name] = defaultValuesNewTemp[FieldArray.name]\r\n                                                                                        setAllDates(allDatesTemp)\r\n                                                                                        onChange(date);\r\n                                                                                        onBlur();\r\n                                                                                    }}\r\n                                                                                    minDate={FieldArray.StartYear != \"\" && FieldArray.StartYear != undefined && FieldArray.StartYear != \"1971\" ? new Date(FieldArray.StartYear + '-01-01 00:00:00') : new Date(\"1971-01-01 00:00:00\")}\r\n                                                                                    maxDate={FieldArray.EndYear != \"\" && FieldArray.EndYear != undefined && FieldArray.EndYear != \"1971\" ? new Date(FieldArray.EndYear + '-01-01 00:00:00') : new Date(\"2099-12-31 00:00:00\")}\r\n                                                                                    placeholderText={FieldArray.placeholder}\r\n                                                                                    customInput={<TextField fullWidth size={componentsize} label={FieldArray.label || ''} />}\r\n                                                                                />\r\n                                                                            </DatePickerWrapper>\r\n                                                                        )}\r\n                                                                    />\r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length>12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            <Tooltip title={<Fragment>{FieldArray.helptext}</Fragment>} >\r\n                                                                                <IconButton style={{ padding: 0, margin: '0px 0px 0px 5px'}}>\r\n                                                                                    <HelpIcon />\r\n                                                                                </IconButton>\r\n                                                                            </Tooltip>\r\n                                                                            {FieldArray.helptext.substring(0,FieldArray.rules.sm==12?56:(FieldArray.rules.sm==6?24:12))}...\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length<=12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            {FieldArray.helptext}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {fieldError && fieldError.message && (\r\n                                                                        <FormHelperText sx={{ color: 'error.main' }}>\r\n                                                                            {fieldError.message as string}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                </FormControl>\r\n                                                            </Grid>\r\n                                                        )\r\n                                                    }\r\n                                                    else if ((FieldArray.show || fieldArrayShow[FieldArray.name]) && FieldArray.type == \"month\" && FieldArray.dateFormat == \"yyyy-MM\") {\r\n                                                        \r\n                                                        //console.log(\"defaultValuesNew[FieldArray.name]***************Begin\", FieldArray)\r\n                                                        if (action.indexOf(\"edit_default\") != -1 && defaultValuesNew[FieldArray.name] != undefined && defaultValuesNew[FieldArray.name] != \"\" && defaultValuesNew[FieldArray.name] != \"0000-00\" && defaultValuesNew[FieldArray.name] != \"1971-01\" && defaultValuesNew[FieldArray.name].length == 7) {\r\n                                                            \r\n                                                            //console.log(\"FieldArray***************************\", FieldArray)\r\n                                                            setValue(FieldArray.name, defaultValuesNew[FieldArray.name])\r\n                                                        }\r\n                                                        \r\n                                                        // Add ' 00:00:00' to avoid the date minus one day in the DatePicker\r\n                                                        \r\n                                                        return (\r\n                                                            <Grid item xs={FieldArray.rules.xs} sm={FieldArray.rules.sm} key={\"AllFields_\" + FieldArray_index}>\r\n                                                                <FormControl fullWidth sx={{ mb: 0 }}>\r\n                                                                    <Controller\r\n                                                                        name={FieldArray.name}\r\n                                                                        control={control}\r\n                                                                        render={({ field: { value, onChange, onBlur } }) => (\r\n                                                                            <DatePickerWrapper>\r\n                                                                                <DatePicker\r\n                                                                                    selected={defaultValuesNew[FieldArray.name] && defaultValuesNew[FieldArray.name] != \"0000-00\" && defaultValuesNew[FieldArray.name] != \"1971-01\" && defaultValuesNew[FieldArray.name].length == 7 ? (new Date(defaultValuesNew[FieldArray.name] + '-01 00:00:00')) : (value ? new Date(value) : null)   }\r\n                                                                                    id={FieldArray.name}\r\n                                                                                    showMonthYearPicker\r\n                                                                                    locale={i18n.language}\r\n                                                                                    dateFormat={FieldArray.dateFormat}\r\n                                                                                    popperPlacement='bottom-start'\r\n                                                                                    onChange={(date: Date) => {\r\n                                                                                        const defaultValuesNewTemp:{[key:string]:any} = { ...defaultValuesNew }\r\n                                                                                        if (date != undefined) {\r\n                                                                                            defaultValuesNewTemp[FieldArray.name] = date.getFullYear() + \"-\" + formatDateItem(date.getMonth() + 1);\r\n                                                                                        }\r\n                                                                                        else {\r\n                                                                                            defaultValuesNewTemp[FieldArray.name] = \"1971-01\";\r\n                                                                                        }\r\n                                                                                        setDefaultValuesNew(defaultValuesNewTemp)\r\n                                                                                        const allDatesTemp:{[key:string]:any} = { ...allDates }\r\n                                                                                        allDatesTemp[FieldArray.name] = defaultValuesNewTemp[FieldArray.name]\r\n                                                                                        setAllDates(allDatesTemp)\r\n                                                                                        onChange(date);\r\n                                                                                        onBlur();\r\n                                                                                    }}\r\n                                                                                    minDate={FieldArray.StartMonth != \"\" && FieldArray.StartMonth != undefined && FieldArray.StartMonth != \"1971-01\" ? new Date(FieldArray.StartMonth + '-01 00:00:00') : new Date(\"1971-01-01 00:00:00\")}\r\n                                                                                    maxDate={FieldArray.EndMonth != \"\" && FieldArray.EndMonth != undefined && FieldArray.EndMonth != \"1971-01\" ? new Date(FieldArray.EndMonth + '-01 00:00:00') : new Date(\"2099-12-31 00:00:00\")}\r\n                                                                                    placeholderText={FieldArray.placeholder}\r\n                                                                                    customInput={<TextField fullWidth size={componentsize} label={FieldArray.label || ''} />}\r\n                                                                                />\r\n                                                                            </DatePickerWrapper>\r\n                                                                        )}\r\n                                                                    />\r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length>12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            <Tooltip title={<Fragment>{FieldArray.helptext}</Fragment>} >\r\n                                                                                <IconButton style={{ padding: 0, margin: '0px 0px 0px 5px'}}>\r\n                                                                                    <HelpIcon />\r\n                                                                                </IconButton>\r\n                                                                            </Tooltip>\r\n                                                                            {FieldArray.helptext.substring(0,FieldArray.rules.sm==12?56:(FieldArray.rules.sm==6?24:12))}...\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length<=12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            {FieldArray.helptext}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {fieldError && fieldError.message && (\r\n                                                                        <FormHelperText sx={{ color: 'error.main' }}>\r\n                                                                            {fieldError.message as string}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                </FormControl>\r\n                                                            </Grid>\r\n                                                        )\r\n                                                    }\r\n                                                    else if ((FieldArray.show || fieldArrayShow[FieldArray.name]) && FieldArray.type == \"month\" && FieldArray.dateFormat == \"yyyyMM\") {\r\n                                                        \r\n                                                        //console.log(\"defaultValuesNew[FieldArray.name]***************Begin\", FieldArray)\r\n                                                        if (action.indexOf(\"edit_default\") != -1 && defaultValuesNew[FieldArray.name] != undefined && defaultValuesNew[FieldArray.name] != \"\" && defaultValuesNew[FieldArray.name] != \"000000\" && defaultValuesNew[FieldArray.name] != \"197101\" && defaultValuesNew[FieldArray.name].length == 6) {\r\n                                                            \r\n                                                            //console.log(\"FieldArray***************************\", FieldArray)\r\n                                                            setValue(FieldArray.name, defaultValuesNew[FieldArray.name])\r\n                                                        }\r\n                                                        \r\n                                                        // Add ' 00:00:00' to avoid the date minus one day in the DatePicker\r\n                                                        \r\n                                                        return (\r\n                                                            <Grid item xs={FieldArray.rules.xs} sm={FieldArray.rules.sm} key={\"AllFields_\" + FieldArray_index}>\r\n                                                                <FormControl fullWidth sx={{ mb: 0 }}>\r\n                                                                    <Controller\r\n                                                                        name={FieldArray.name}\r\n                                                                        control={control}\r\n                                                                        render={({ field: { value, onChange, onBlur } }) => (\r\n                                                                            <DatePickerWrapper>\r\n                                                                                <DatePicker\r\n                                                                                    selected={defaultValuesNew[FieldArray.name] && defaultValuesNew[FieldArray.name] != \"0000-00\" && defaultValuesNew[FieldArray.name] != \"197101\" && defaultValuesNew[FieldArray.name].length == 6 ? (new Date(Number(defaultValuesNew[FieldArray.name].substring(0,4)) + '-' + Number(defaultValuesNew[FieldArray.name].substring(4,6)) + '-01 00:00:00')) : (value ? new Date(value) : null)   }\r\n                                                                                    id={FieldArray.name}\r\n                                                                                    showMonthYearPicker\r\n                                                                                    locale={i18n.language}\r\n                                                                                    dateFormat={FieldArray.dateFormat}\r\n                                                                                    popperPlacement='bottom-start'\r\n                                                                                    onChange={(date: Date) => {\r\n                                                                                        const defaultValuesNewTemp:{[key:string]:any} = { ...defaultValuesNew }\r\n                                                                                        if (date != undefined) {\r\n                                                                                            defaultValuesNewTemp[FieldArray.name] = date.getFullYear() + \"\" + formatDateItem(date.getMonth() + 1);\r\n                                                                                        }\r\n                                                                                        else {\r\n                                                                                            defaultValuesNewTemp[FieldArray.name] = \"197101\";\r\n                                                                                        }\r\n                                                                                        setDefaultValuesNew(defaultValuesNewTemp)\r\n                                                                                        const allDatesTemp:{[key:string]:any} = { ...allDates }\r\n                                                                                        allDatesTemp[FieldArray.name] = defaultValuesNewTemp[FieldArray.name]\r\n                                                                                        setAllDates(allDatesTemp)\r\n                                                                                        onChange(date);\r\n                                                                                        onBlur();\r\n                                                                                    }}\r\n                                                                                    minDate={FieldArray.StartMonth != \"\" && FieldArray.StartMonth != undefined && FieldArray.StartMonth != \"197101\" ? new Date(FieldArray.StartMonth + '-01 00:00:00') : new Date(\"1971-01-01 00:00:00\")}\r\n                                                                                    maxDate={FieldArray.EndMonth != \"\" && FieldArray.EndMonth != undefined && FieldArray.EndMonth != \"197101\" ? new Date(FieldArray.EndMonth + '-01 00:00:00') : new Date(\"2099-12-31 00:00:00\")}\r\n                                                                                    placeholderText={FieldArray.placeholder}\r\n                                                                                    customInput={<TextField fullWidth size={componentsize} label={FieldArray.label || ''} />}\r\n                                                                                />\r\n                                                                            </DatePickerWrapper>\r\n                                                                        )}\r\n                                                                    />\r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length>12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            <Tooltip title={<Fragment>{FieldArray.helptext}</Fragment>} >\r\n                                                                                <IconButton style={{ padding: 0, margin: '0px 0px 0px 5px'}}>\r\n                                                                                    <HelpIcon />\r\n                                                                                </IconButton>\r\n                                                                            </Tooltip>\r\n                                                                            {FieldArray.helptext.substring(0,FieldArray.rules.sm==12?56:(FieldArray.rules.sm==6?24:12))}...\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length<=12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            {FieldArray.helptext}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {fieldError && fieldError.message && (\r\n                                                                        <FormHelperText sx={{ color: 'error.main' }}>\r\n                                                                            {fieldError.message as string}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                </FormControl>\r\n                                                            </Grid>\r\n                                                        )\r\n                                                    }\r\n                                                    else if ((FieldArray.show || fieldArrayShow[FieldArray.name]) && FieldArray.type == \"quarter\") {\r\n                                                        \r\n                                                        //console.log(\"defaultValuesNew[FieldArray.name]***************Begin\", FieldArray)\r\n                                                        const quarterMap:{[key:string]:any} = {}\r\n                                                        if (action.indexOf(\"edit_default\") != -1 && defaultValuesNew[FieldArray.name] != undefined && defaultValuesNew[FieldArray.name] != \"\" && defaultValuesNew[FieldArray.name] != \"0000-00\" && defaultValuesNew[FieldArray.name] != \"1971-01\" && defaultValuesNew[FieldArray.name].length == 7) {\r\n                                                            \r\n                                                            //console.log(\"defaultValuesNew[FieldArray.name]---------------------------------\", defaultValuesNew[FieldArray.name])\r\n                                                            setValue(FieldArray.name, defaultValuesNew[FieldArray.name])\r\n                                                            if (defaultValuesNew[FieldArray.name] && defaultValuesNew[FieldArray.name] != \"0000-00\" && defaultValuesNew[FieldArray.name] != \"1971-Q1\" && defaultValuesNew[FieldArray.name].length == 7) {\r\n                                                                const quarterValue = defaultValuesNew[FieldArray.name][6]\r\n                                                                switch (quarterValue) {\r\n                                                                    case '1':\r\n                                                                        quarterMap[FieldArray.name] = defaultValuesNew[FieldArray.name].substr(0, 4) + '-01-01 00:00:00'\r\n                                                                        break;\r\n                                                                    case '2':\r\n                                                                        quarterMap[FieldArray.name] = defaultValuesNew[FieldArray.name].substr(0, 4) + '-04-01 00:00:00'\r\n                                                                        break;\r\n                                                                    case '3':\r\n                                                                        quarterMap[FieldArray.name] = defaultValuesNew[FieldArray.name].substr(0, 4) + '-07-01 00:00:00'\r\n                                                                        break;\r\n                                                                    case '4':\r\n                                                                        quarterMap[FieldArray.name] = defaultValuesNew[FieldArray.name].substr(0, 4) + '-10-01 00:00:00'\r\n                                                                        break;\r\n                                                                }\r\n                                                            }\r\n                                                        }\r\n\r\n                                                        // Add ' 00:00:00' to avoid the date minus one day in the DatePicker\r\n                                                        \r\n                                                        return (\r\n                                                            <Grid item xs={FieldArray.rules.xs} sm={FieldArray.rules.sm} key={\"AllFields_\" + FieldArray_index}>\r\n                                                                <FormControl fullWidth sx={{ mb: 0 }}>\r\n                                                                    <Controller\r\n                                                                        name={FieldArray.name}\r\n                                                                        control={control}\r\n                                                                        render={({ field: { value, onChange, onBlur } }) => {\r\n                                                                            \r\n                                                                            //console.log(\"value---------------------------------\", value)\r\n                                                                            //console.log(\"quarterMap---------------------------------\", quarterMap)\r\n                                                                            \r\n                                                                            return (\r\n                                                                                <DatePickerWrapper sx={{ '& .react-datepicker-wrapper': { width: '290px' } }}>\r\n                                                                                    <DatePicker\r\n                                                                                        selected={quarterMap[FieldArray.name] ? (new Date(quarterMap[FieldArray.name])) : (value ? new Date(value) : null)   }\r\n                                                                                        id={FieldArray.name}\r\n                                                                                        showQuarterYearPicker\r\n                                                                                        locale={i18n.language}\r\n                                                                                        dateFormat={FieldArray.dateFormat}\r\n                                                                                        popperPlacement='bottom-start'\r\n                                                                                        onChange={(date: Date) => {\r\n                                                                                            const defaultValuesNewTemp:{[key:string]:any} = { ...defaultValuesNew }\r\n                                                                                            if (date != undefined) {\r\n                                                                                                defaultValuesNewTemp[FieldArray.name] = date.getFullYear() + \"-Q\" + Math.floor((date.getMonth() + 3) / 3)\r\n                                                                                            }\r\n                                                                                            else {\r\n                                                                                                defaultValuesNewTemp[FieldArray.name] = \"1971-Q1\"\r\n                                                                                            }\r\n                                                                                            setDefaultValuesNew(defaultValuesNewTemp)\r\n                                                                                            const allDatesTemp:{[key:string]:any} = { ...allDates }\r\n                                                                                            allDatesTemp[FieldArray.name] = defaultValuesNewTemp[FieldArray.name]\r\n                                                                                            setAllDates(allDatesTemp)\r\n                                                                                            onChange(date);\r\n                                                                                            onBlur();\r\n                                                                                        }}\r\n                                                                                        placeholderText={FieldArray.placeholder}\r\n                                                                                        customInput={<TextField fullWidth size={componentsize} label={FieldArray.label || ''} />}\r\n                                                                                    />\r\n                                                                                </DatePickerWrapper>\r\n                                                                            )\r\n                                                                        }\r\n                                                                        }\r\n                                                                    />\r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length>12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            <Tooltip title={<Fragment>{FieldArray.helptext}</Fragment>} >\r\n                                                                                <IconButton style={{ padding: 0, margin: '0px 0px 0px 5px'}}>\r\n                                                                                    <HelpIcon />\r\n                                                                                </IconButton>\r\n                                                                            </Tooltip>\r\n                                                                            {FieldArray.helptext.substring(0,FieldArray.rules.sm==12?56:(FieldArray.rules.sm==6?24:12))}...\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length<=12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            {FieldArray.helptext}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {fieldError && fieldError.message && (\r\n                                                                        <FormHelperText sx={{ color: 'error.main' }}>\r\n                                                                            {fieldError.message as string}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                </FormControl>\r\n                                                            </Grid>\r\n                                                        )\r\n                                                    }\r\n                                                    else if ((FieldArray.show || fieldArrayShow[FieldArray.name]) && FieldArray.type == \"datetime\") {\r\n                                                        \r\n                                                        //console.log(\"defaultValuesNew[FieldArray.name]***************Begin\", FieldArray)\r\n                                                        if (action.indexOf(\"edit_default\") != -1 && defaultValuesNew[FieldArray.name] != undefined && defaultValuesNew[FieldArray.name] != \"\" && defaultValuesNew[FieldArray.name] != \"0000-00-00 00:00:00\" && defaultValuesNew[FieldArray.name] != \"1971-01-01 00:00:00\" && defaultValuesNew[FieldArray.name].length == 19) {\r\n                                                            \r\n                                                            //console.log(\"defaultValuesNew[FieldArray.name]***************************\", new Date(defaultValuesNew[FieldArray.name]+' 00:00:00'))\r\n                                                            setValue(FieldArray.name, defaultValuesNew[FieldArray.name])\r\n                                                            \r\n                                                            //const allDatesTemp = { ...allDates }\r\n                                                            //allDatesTemp[FieldArray.name] = defaultValuesNew[FieldArray.name]\r\n                                                            //setAllDates(allDatesTemp)\r\n                                                        }\r\n                                                        \r\n                                                        return (\r\n                                                            <Grid item xs={FieldArray.rules.xs} sm={FieldArray.rules.sm} key={\"AllFields_\" + FieldArray_index}>\r\n                                                                <FormControl fullWidth sx={{ mb: 0 }}>\r\n                                                                    <Controller\r\n                                                                        name={FieldArray.name}\r\n                                                                        control={control}\r\n                                                                        render={({ field: { value, onChange, onBlur } }) => (\r\n                                                                            <DatePickerWrapper sx={{ 'z-index': 9999}}>\r\n                                                                                <DatePicker\r\n                                                                                    showTimeSelect\r\n                                                                                    timeFormat='HH:mm'\r\n                                                                                    timeIntervals={15}\r\n                                                                                    selected={defaultValuesNew[FieldArray.name] && defaultValuesNew[FieldArray.name] != \"0000-00-00 00:00:00\" && defaultValuesNew[FieldArray.name] != \"1971-01-01 00:00:00\" && defaultValuesNew[FieldArray.name].length == 19 ? (new Date(defaultValuesNew[FieldArray.name])) : (value ? new Date(value) : null)   }\r\n                                                                                    id={FieldArray.name}\r\n                                                                                    showYearDropdown\r\n                                                                                    showMonthDropdown\r\n                                                                                    locale={i18n.language}\r\n                                                                                    dateFormat={FieldArray.dateFormat}\r\n                                                                                    popperPlacement='bottom-start'\r\n                                                                                    onChange={(date: Date) => {\r\n                                                                                        console.log(new Date(date))\r\n                                                                                        const defaultValuesNewTemp:{[key:string]:any} = { ...defaultValuesNew }\r\n                                                                                        if (date != undefined) {\r\n                                                                                            defaultValuesNewTemp[FieldArray.name] = date.getFullYear() + \"-\" + formatDateItem(date.getMonth() + 1) + \"-\" + formatDateItem(date.getDate()) + \" \" + formatDateItem(date.getHours()) + \":\" + formatDateItem(date.getMinutes()) + \":\" + formatDateItem(date.getSeconds())\r\n                                                                                        }\r\n                                                                                        else {\r\n                                                                                            defaultValuesNewTemp[FieldArray.name] = \"1971-01-01 00:00:00\"\r\n                                                                                        }\r\n                                                                                        setDefaultValuesNew(defaultValuesNewTemp)\r\n                                                                                        const allDatesTemp:{[key:string]:any} = { ...allDates }\r\n                                                                                        allDatesTemp[FieldArray.name] = defaultValuesNewTemp[FieldArray.name]\r\n                                                                                        setAllDates(allDatesTemp)\r\n                                                                                        onChange(date);\r\n                                                                                        onBlur();\r\n                                                                                    }}\r\n                                                                                    minDate={FieldArray.StartDateTime != \"\" && FieldArray.StartDateTime != undefined && FieldArray.StartDateTime != \"1971-01-01\" ? new Date(FieldArray.StartDateTime) : new Date(\"1971-01-01 00:00:00\")}\r\n                                                                                    maxDate={FieldArray.EndDateTime != \"\" && FieldArray.EndDateTime != undefined && FieldArray.EndDateTime != \"1971-01-01\" ? new Date(FieldArray.EndDateTime) : new Date(\"2099-12-31 00:00:00\")}\r\n                                                                                    placeholderText={FieldArray.placeholder}\r\n                                                                                    customInput={<TextField fullWidth size={componentsize} label={FieldArray.label || ''} />}\r\n                                                                                />\r\n                                                                            </DatePickerWrapper>\r\n                                                                        )}\r\n                                                                    />\r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length>12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            <Tooltip title={<Fragment>{FieldArray.helptext}</Fragment>} >\r\n                                                                                <IconButton style={{ padding: 0, margin: '0px 0px 0px 5px'}}>\r\n                                                                                    <HelpIcon />\r\n                                                                                </IconButton>\r\n                                                                            </Tooltip>\r\n                                                                            {FieldArray.helptext.substring(0,FieldArray.rules.sm==12?56:(FieldArray.rules.sm==6?24:12))}...\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length<=12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            {FieldArray.helptext}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {fieldError && fieldError.message && (\r\n                                                                        <FormHelperText sx={{ color: 'error.main' }}>\r\n                                                                            {fieldError.message as string}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                </FormControl>\r\n                                                            </Grid>\r\n                                                        )\r\n                                                    }\r\n                                                    else if ((FieldArray.show || fieldArrayShow[FieldArray.name]) && FieldArray.type == \"time\") {\r\n                                                        \r\n                                                        //console.log(\"defaultValuesNew[FieldArray.name]***************Begin\", FieldArray)\r\n                                                        if (action.indexOf(\"edit_default\") != -1 && defaultValuesNew[FieldArray.name] != undefined && defaultValuesNew[FieldArray.name] != \"\" && defaultValuesNew[FieldArray.name].length == 8) {\r\n                                                            \r\n                                                            //console.log(\"defaultValuesNew[FieldArray.name]***************************\", new Date(defaultValuesNew[FieldArray.name]+' 00:00:00'))\r\n                                                            setValue(FieldArray.name, defaultValuesNew[FieldArray.name])\r\n                                                            const allDatesTemp:{[key:string]:any} = { ...allDates }\r\n                                                            allDatesTemp[FieldArray.name] = defaultValuesNew[FieldArray.name]\r\n                                                            setAllDates(allDatesTemp)\r\n                                                        }\r\n                                                        \r\n                                                        return (\r\n                                                            <Grid item xs={FieldArray.rules.xs} sm={FieldArray.rules.sm} key={\"AllFields_\" + FieldArray_index}>\r\n                                                                <FormControl fullWidth sx={{ mb: 0 }}>\r\n                                                                    <DatePickerWrapper>\r\n                                                                        <DatePicker\r\n                                                                            showTimeSelect\r\n                                                                            timeFormat='HH:mm'\r\n                                                                            timeIntervals={15}\r\n                                                                            showTimeSelectOnly\r\n                                                                            selected={defaultValuesNew[FieldArray.name] && defaultValuesNew[FieldArray.name].length == 8 ? (new Date(\"2023-02-02 \" + defaultValuesNew[FieldArray.name])) : (new Date()) }\r\n                                                                            id={FieldArray.name}\r\n                                                                            dateFormat={FieldArray.dateFormat}\r\n                                                                            popperPlacement='bottom-start'\r\n                                                                            onChange={(date: Date) => {\r\n                                                                                console.log(new Date(date))\r\n                                                                                const defaultValuesNewTemp:{[key:string]:any} = { ...defaultValuesNew }\r\n                                                                                if (date != undefined) {\r\n                                                                                    defaultValuesNewTemp[FieldArray.name] = formatDateItem(date.getHours()) + \":\" + formatDateItem(date.getMinutes()) + \":\" + formatDateItem(date.getSeconds())\r\n                                                                                }\r\n                                                                                else {\r\n                                                                                    defaultValuesNewTemp[FieldArray.name] = \"00:00:00\"\r\n                                                                                }\r\n                                                                                setDefaultValuesNew(defaultValuesNewTemp)\r\n                                                                                const allDatesTemp:{[key:string]:any} = { ...allDates }\r\n                                                                                allDatesTemp[FieldArray.name] = defaultValuesNewTemp[FieldArray.name]\r\n                                                                                setAllDates(allDatesTemp)\r\n                                                                            }\r\n                                                                            }\r\n                                                                            placeholderText={FieldArray.placeholder}\r\n                                                                            customInput={<TextField fullWidth style={{ width: '100%' }} size={componentsize} label={FieldArray.label || ''} />}\r\n                                                                        />\r\n                                                                    </DatePickerWrapper>\r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length>12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            <Tooltip title={<Fragment>{FieldArray.helptext}</Fragment>} >\r\n                                                                                <IconButton style={{ padding: 0, margin: '0px 0px 0px 5px'}}>\r\n                                                                                    <HelpIcon />\r\n                                                                                </IconButton>\r\n                                                                            </Tooltip>\r\n                                                                            {FieldArray.helptext.substring(0,FieldArray.rules.sm==12?56:(FieldArray.rules.sm==6?24:12))}...\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length<=12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            {FieldArray.helptext}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {fieldError && fieldError.message && (\r\n                                                                        <FormHelperText sx={{ color: 'error.main' }}>\r\n                                                                            {fieldError.message as string}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                </FormControl>\r\n                                                            </Grid>\r\n                                                        )\r\n                                                    }\r\n                                                    else if ((FieldArray.show || fieldArrayShow[FieldArray.name]) && FieldArray.type == \"xlsx\") {\r\n                                                        if (action.indexOf(\"edit_default\") != -1 && defaultValuesNew[FieldArray.name] != undefined) {\r\n                                                            //setValue(FieldArray.name, defaultValuesNew[FieldArray.name])\r\n                                                        }\r\n                                                        \r\n                                                        return (\r\n                                                            <Grid item xs={FieldArray.rules.xs} sm={FieldArray.rules.sm} key={\"AllFields_\" + FieldArray_index}>\r\n                                                                <FormControl fullWidth sx={{ mb: 0 }}>\r\n                                                                    <DropzoneWrapper>\r\n                                                                        <div {...getRootPropsXlsx({ className: 'dropzone' })}>\r\n                                                                            <input {...getInputPropsXlsx()} />\r\n                                                                            <Box sx={{ display: 'flex', flexDirection: ['column', 'column', 'row'], alignItems: 'center' }}>\r\n                                                                            <Box sx={{ display: 'flex', flexDirection: 'column', textAlign: ['center', 'center', 'inherit'] }}>\r\n                                                                            <Typography color='textSecondary'>{FieldArray.label}:</Typography>\r\n                                                                            </Box>\r\n                                                                            </Box>\r\n                                                                        </div>\r\n                                                                        {uploadFiles && uploadFiles.length ? (\r\n                                                                            <Fragment>\r\n                                                                            <List>\r\n                                                                            {uploadFiles.map((fileInfor: File | FileUrl) => {\r\n\r\n                                                                                return (\r\n                                                                                        <ListItem key={fileInfor.name}>\r\n                                                                                            <div className='file-details' style={{overflow: 'hidden'}}>\r\n                                                                                                <div className='file-preview'>{renderFilePreview(fileInfor, 38, 38)}</div>\r\n                                                                                                <div>\r\n                                                                                                {fileInfor['type']==\"file\" ? \r\n                                                                                                <Typography className='file-name'><CustomLink href={authConfig.backEndApiHost+fileInfor['webkitRelativePath']} download={fileInfor['name']}>{fileInfor['name']}</CustomLink></Typography>\r\n                                                                                                :\r\n                                                                                                ''\r\n                                                                                                }\r\n                                                                                                {fileInfor['type']==\"image\" ? \r\n                                                                                                <Typography className='file-name'><CustomLink href={authConfig.backEndApiHost+fileInfor['webkitRelativePath']} download={fileInfor['name']} target=\"_blank\">{fileInfor['name']}</CustomLink></Typography>\r\n                                                                                                :\r\n                                                                                                ''\r\n                                                                                                }\r\n                                                                                                {(fileInfor['type']!=\"file\" && fileInfor['type']!=\"image\") ? \r\n                                                                                                <Typography className='file-name'>{fileInfor['name']}</Typography>\r\n                                                                                                :\r\n                                                                                                ''\r\n                                                                                                }\r\n                                                                                                <Typography className='file-size' variant='body2'>\r\n                                                                                                    {Math.round(fileInfor.size / 100) / 10 > 1000\r\n                                                                                                    ? `${(Math.round(fileInfor.size / 100) / 10000).toFixed(1)} mb`\r\n                                                                                                    : `${(Math.round(fileInfor.size / 100) / 10).toFixed(1)} kb`}\r\n                                                                                                </Typography>\r\n                                                                                                </div>\r\n                                                                                            </div>\r\n                                                                                            <IconButton onClick={() => handleRemoveFile(fileInfor)}>\r\n                                                                                                <Icon icon='mdi:close' fontSize={20} />\r\n                                                                                            </IconButton>\r\n                                                                                        </ListItem>\r\n                                                                                        )\r\n                                                                            })}\r\n                                                                            </List>\r\n                                                                            </Fragment>\r\n                                                                        ) : null}\r\n                                                                    </DropzoneWrapper>\r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length>12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            <Tooltip title={<Fragment>{FieldArray.helptext}</Fragment>} >\r\n                                                                                <IconButton style={{ padding: 0, margin: '0px 0px 0px 5px'}}>\r\n                                                                                    <HelpIcon />\r\n                                                                                </IconButton>\r\n                                                                            </Tooltip>\r\n                                                                            {FieldArray.helptext.substring(0,FieldArray.rules.sm==12?56:(FieldArray.rules.sm==6?24:12))}...\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length<=12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            {FieldArray.helptext}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {fieldError && fieldError.message && (\r\n                                                                        <FormHelperText sx={{ color: 'error.main' }}>\r\n                                                                            {fieldError.message as string}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                </FormControl>\r\n                                                            </Grid>\r\n                                                        )\r\n                                                    }\r\n                                                    else if ((FieldArray.show || fieldArrayShow[FieldArray.name]) && FieldArray.type == \"file\") {\r\n                                                        if (action.indexOf(\"edit_default\") != -1 && defaultValuesNew[FieldArray.name] != undefined) {\r\n                                                            //setValue(FieldArray.name, defaultValuesNew[FieldArray.name])\r\n                                                        }\r\n                                                        \r\n                                                        return (\r\n                                                            <Grid item xs={FieldArray.rules.xs} sm={FieldArray.rules.sm} key={\"AllFields_\" + FieldArray_index}>\r\n                                                                <FormControl fullWidth sx={{ mb: 0 }}>\r\n                                                                    <DropzoneWrapper>\r\n                                                                        <div {...getRootPropsFile({ className: 'dropzone' })}>\r\n                                                                            <input {...getInputPropsFile()} />\r\n                                                                            <Box sx={{ display: 'flex', flexDirection: ['column', 'column', 'row'], alignItems: 'center' }}>\r\n                                                                            <Box sx={{ display: 'flex', flexDirection: 'column', textAlign: ['center', 'center', 'inherit'] }}>\r\n                                                                            <Typography color='textSecondary'>{FieldArray.label}:</Typography>\r\n                                                                            </Box>\r\n                                                                            </Box>\r\n                                                                        </div>\r\n                                                                        {uploadFiles && uploadFiles.length ? (\r\n                                                                            <Fragment>\r\n                                                                            <List>\r\n                                                                            {uploadFiles.map((fileInfor: File | FileUrl) => {\r\n\r\n                                                                                return (\r\n                                                                                        <ListItem key={fileInfor.name}>\r\n                                                                                            <div className='file-details' style={{overflow: 'hidden'}}>\r\n                                                                                                <div className='file-preview'>{renderFilePreview(fileInfor, 38, 38)}</div>\r\n                                                                                                <div>\r\n                                                                                                {fileInfor['type']==\"file\" ? \r\n                                                                                                <Typography className='file-name'><CustomLink href={authConfig.backEndApiHost+fileInfor['webkitRelativePath']} download={fileInfor['name']}>{fileInfor['name']}</CustomLink></Typography>\r\n                                                                                                :\r\n                                                                                                ''\r\n                                                                                                }\r\n                                                                                                {fileInfor['type']==\"image\" ? \r\n                                                                                                <Typography className='file-name'><CustomLink href={authConfig.backEndApiHost+fileInfor['webkitRelativePath']} download={fileInfor['name']} target=\"_blank\">{fileInfor['name']}</CustomLink></Typography>\r\n                                                                                                :\r\n                                                                                                ''\r\n                                                                                                }\r\n                                                                                                {(fileInfor['type']!=\"file\" && fileInfor['type']!=\"image\") ? \r\n                                                                                                <Typography className='file-name'>{fileInfor['name']}</Typography>\r\n                                                                                                :\r\n                                                                                                ''\r\n                                                                                                }\r\n                                                                                                <Typography className='file-size' variant='body2'>\r\n                                                                                                    {Math.round(fileInfor.size / 100) / 10 > 1000\r\n                                                                                                    ? `${(Math.round(fileInfor.size / 100) / 10000).toFixed(1)} mb`\r\n                                                                                                    : `${(Math.round(fileInfor.size / 100) / 10).toFixed(1)} kb`}\r\n                                                                                                </Typography>\r\n                                                                                                </div>\r\n                                                                                            </div>\r\n                                                                                            <IconButton onClick={() => handleRemoveFile(fileInfor)}>\r\n                                                                                                <Icon icon='mdi:close' fontSize={20} />\r\n                                                                                            </IconButton>\r\n                                                                                        </ListItem>\r\n                                                                                        )\r\n                                                                            })}\r\n                                                                            </List>\r\n                                                                            </Fragment>\r\n                                                                        ) : null}\r\n                                                                    </DropzoneWrapper>\r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length>12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            <Tooltip title={<Fragment>{FieldArray.helptext}</Fragment>} >\r\n                                                                                <IconButton style={{ padding: 0, margin: '0px 0px 0px 5px'}}>\r\n                                                                                    <HelpIcon />\r\n                                                                                </IconButton>\r\n                                                                            </Tooltip>\r\n                                                                            {FieldArray.helptext.substring(0,FieldArray.rules.sm==12?56:(FieldArray.rules.sm==6?24:12))}...\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length<=12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            {FieldArray.helptext}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {fieldError && fieldError.message && (\r\n                                                                        <FormHelperText sx={{ color: 'error.main' }}>\r\n                                                                            {fieldError.message as string}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                </FormControl>\r\n                                                            </Grid>\r\n                                                        )\r\n                                                    }\r\n                                                    else if ((FieldArray.show || fieldArrayShow[FieldArray.name]) && FieldArray.type == \"images\") {\r\n                                                        if (action.indexOf(\"edit_default\") != -1 && defaultValuesNew[FieldArray.name] != undefined) {\r\n                                                            //setValue(FieldArray.name, defaultValuesNew[FieldArray.name])\r\n                                                        }\r\n                                                        console.log(\"uploadImages\", uploadImages)\r\n                                                        \r\n                                                        return (\r\n                                                            <Grid item xs={FieldArray.rules.xs} sm={FieldArray.rules.sm} key={\"AllFields_\" + FieldArray_index}>\r\n                                                                <FormControl fullWidth sx={{ mb: 0 }}>\r\n                                                                    <DropzoneWrapper>\r\n                                                                        <div {...getRootPropsImages({ className: 'dropzone' })}>\r\n                                                                            <input {...getInputPropsImages()} />\r\n                                                                            <Box sx={{ display: 'flex', flexDirection: ['column', 'column', 'row'], alignItems: 'center' }}>\r\n                                                                                <Box sx={{ display: 'flex', flexDirection: 'column', textAlign: ['center', 'center', 'inherit'] }}>\r\n                                                                                <Typography color='textSecondary'>{FieldArray.label}:</Typography>\r\n                                                                                </Box>\r\n                                                                            </Box>\r\n                                                                        </div>\r\n                                                                        {uploadImages && uploadImages.length ? (\r\n                                                                            <Fragment>\r\n                                                                            <List>\r\n                                                                            <ListItem>\r\n                                                                            {uploadImages.map((fileInfor: File | FileUrl) => {\r\n\r\n                                                                                return (\r\n                                                                                        <Fragment key={fileInfor.name}>\r\n                                                                                            <div className='file-details' style={{overflow: 'hidden'}}>\r\n                                                                                                <div className='file-preview'>{renderFilePreview(fileInfor, 60, 60)}</div>\r\n                                                                                                <IconButton onClick={() => handleRemoveImage(fileInfor)}>\r\n                                                                                                    <Icon icon='mdi:close' fontSize={20} />\r\n                                                                                                </IconButton>\r\n                                                                                            </div>\r\n                                                                                        </Fragment>\r\n                                                                                        )\r\n                                                                            })}\r\n                                                                            <Button color='error' size=\"small\" variant='outlined' onClick={handleRemoveAllImages}>\r\n                                                                                <Typography noWrap={true}>\r\n                                                                                    {FieldArray.RemoveAll}\r\n                                                                                </Typography>\r\n                                                                            </Button>\r\n                                                                            </ListItem>\r\n                                                                            </List>\r\n                                                                            \r\n                                                                            </Fragment>\r\n                                                                        ) : null}\r\n                                                                        </DropzoneWrapper>\r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length>12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            <Tooltip title={<Fragment>{FieldArray.helptext}</Fragment>} >\r\n                                                                                <IconButton style={{ padding: 0, margin: '0px 0px 0px 5px'}}>\r\n                                                                                    <HelpIcon />\r\n                                                                                </IconButton>\r\n                                                                            </Tooltip>\r\n                                                                            {FieldArray.helptext.substring(0,FieldArray.rules.sm==12?56:(FieldArray.rules.sm==6?24:12))}...\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length<=12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            {FieldArray.helptext}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {fieldError && fieldError.message && (\r\n                                                                        <FormHelperText sx={{ color: 'error.main' }}>\r\n                                                                            {fieldError.message as string}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                </FormControl>\r\n                                                            </Grid>\r\n                                                        )\r\n                                                    }\r\n                                                    else if ((FieldArray.show || fieldArrayShow[FieldArray.name]) && FieldArray.type == \"images2\") {\r\n                                                        if (action.indexOf(\"edit_default\") != -1 && defaultValuesNew[FieldArray.name] != undefined) {\r\n                                                            //setValue(FieldArray.name, defaultValuesNew[FieldArray.name])\r\n                                                        }\r\n                                                        console.log(\"uploadImages2\", uploadImages2)\r\n                                                        \r\n                                                        return (\r\n                                                            <Grid item xs={FieldArray.rules.xs} sm={FieldArray.rules.sm} key={\"AllFields_\" + FieldArray_index}>\r\n                                                                <FormControl fullWidth sx={{ mb: 0 }}>\r\n                                                                    <DropzoneWrapper>\r\n                                                                        <div {...getRootPropsImages2({ className: 'dropzone' })}>\r\n                                                                            <input {...getInputPropsImages2()} />\r\n                                                                            <Box sx={{ display: 'flex', flexDirection: ['column', 'column', 'row'], alignItems: 'center' }}>\r\n                                                                                <Box sx={{ display: 'flex', flexDirection: 'column', textAlign: ['center', 'center', 'inherit'] }}>\r\n                                                                                <Typography color='textSecondary'>{FieldArray.label}:</Typography>\r\n                                                                                </Box>\r\n                                                                            </Box>\r\n                                                                        </div>\r\n                                                                        {uploadImages2 && uploadImages2.length ? (\r\n                                                                            <Fragment>\r\n                                                                            <List>\r\n                                                                            <ListItem>\r\n                                                                            {uploadImages2.map((fileInfor: File | FileUrl) => {\r\n\r\n                                                                                return (\r\n                                                                                        <Fragment key={fileInfor.name}>\r\n                                                                                            <div className='file-details' style={{overflow: 'hidden'}}>\r\n                                                                                                <div className='file-preview'>{renderFilePreview(fileInfor, 60, 60)}</div>\r\n                                                                                                <IconButton onClick={() => handleRemoveImage2(fileInfor)}>\r\n                                                                                                    <Icon icon='mdi:close' fontSize={20} />\r\n                                                                                                </IconButton>\r\n                                                                                            </div>\r\n                                                                                        </Fragment>\r\n                                                                                        )\r\n                                                                            })}\r\n                                                                            <Button color='error' size=\"small\" variant='outlined' onClick={handleRemoveAllImages2}>\r\n                                                                                <Typography noWrap={true}>\r\n                                                                                    {FieldArray.RemoveAll}\r\n                                                                                </Typography>\r\n                                                                            </Button>\r\n                                                                            </ListItem>\r\n                                                                            </List>\r\n                                                                            \r\n                                                                            </Fragment>\r\n                                                                        ) : null}\r\n                                                                        </DropzoneWrapper>\r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length>12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            <Tooltip title={<Fragment>{FieldArray.helptext}</Fragment>} >\r\n                                                                                <IconButton style={{ padding: 0, margin: '0px 0px 0px 5px'}}>\r\n                                                                                    <HelpIcon />\r\n                                                                                </IconButton>\r\n                                                                            </Tooltip>\r\n                                                                            {FieldArray.helptext.substring(0,FieldArray.rules.sm==12?56:(FieldArray.rules.sm==6?24:12))}...\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length<=12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            {FieldArray.helptext}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {fieldError && fieldError.message && (\r\n                                                                        <FormHelperText sx={{ color: 'error.main' }}>\r\n                                                                            {fieldError.message as string}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                </FormControl>\r\n                                                            </Grid>\r\n                                                        )\r\n                                                    }\r\n                                                    else if ((FieldArray.show || fieldArrayShow[FieldArray.name]) && FieldArray.type == \"readonlyimages\") {\r\n                                                        if (action.indexOf(\"edit_default\") != -1 && defaultValuesNew[FieldArray.name] != undefined) {\r\n                                                            //setValue(FieldArray.name, defaultValuesNew[FieldArray.name])\r\n                                                        }\r\n                                                        \r\n                                                        return (\r\n                                                            <Grid item xs={FieldArray.rules.xs} sm={FieldArray.rules.sm} key={\"AllFields_\" + FieldArray_index}>\r\n                                                                <FormControl fullWidth sx={{ mb: 0 }}>\r\n                                                                    <DropzoneWrapper>\r\n                                                                        <Box sx={{ display: 'flex', flexDirection: ['column', 'column', 'row'], alignItems: 'center' }}>\r\n                                                                            <Box sx={{ display: 'flex', flexDirection: 'column', textAlign: ['center', 'center', 'inherit'] }}>\r\n                                                                                <Typography color='textSecondary'>{FieldArray.label}:</Typography>\r\n                                                                            </Box>\r\n                                                                        </Box>\r\n                                                                        {uploadFilesReadonly && uploadFilesReadonly.length ? (\r\n                                                                            <Fragment>\r\n                                                                            <List>\r\n                                                                            <div style={{ display: 'flex', flexWrap: 'wrap' }}>\r\n                                                                            {uploadFilesReadonly.map((fileInfor, index) => (\r\n                                                                                <div key={index} style={{ flex: '0 0 auto'}}>\r\n                                                                                <ListItem style={{ padding: '3px' }}>\r\n                                                                                    <div className='file-details' style={{ display: 'flex', overflow: 'hidden' }}>\r\n                                                                                    <Box sx={{ display: 'flex', alignItems: 'center', cursor: 'pointer', ':hover': { cursor: 'pointer' } }} onClick={() => toggleImagesPreviewListDrawer([authConfig.backEndApiHost + fileInfor['webkitRelativePath']], ['image'])}>\r\n                                                                                        <ImgStyled68 src={authConfig.backEndApiHost + fileInfor['webkitRelativePath']} />\r\n                                                                                    </Box>\r\n                                                                                    </div>\r\n                                                                                </ListItem>\r\n                                                                                </div>\r\n                                                                            ))}\r\n                                                                            </div>\r\n                                                                            </List>\r\n                                                                            </Fragment>\r\n                                                                        ) : null}\r\n                                                                        {FieldArray.helptext && FieldArray.helptext.length>12 && (\r\n                                                                            <FormHelperText>\r\n                                                                                <Tooltip    \r\n                                                                                        title={<Fragment>{FieldArray.helptext}</Fragment>} \r\n                                                                                        PopperProps={{\r\n                                                                                            modifiers: [\r\n                                                                                            {\r\n                                                                                                name: 'offset',\r\n                                                                                                options: {\r\n                                                                                                offset: [0, 0], // [horizontal, vertical] offset. Set it to 0 to reduce the gap.\r\n                                                                                                },\r\n                                                                                            },\r\n                                                                                            ],\r\n                                                                                        }}\r\n                                                                                >\r\n                                                                                    <IconButton style={{ padding: 0, margin: '0px 0px 0px 5px'}}>\r\n                                                                                        <HelpIcon />\r\n                                                                                    </IconButton>\r\n                                                                                </Tooltip>\r\n                                                                                {FieldArray.helptext.substring(0,FieldArray.rules.sm==12?56:(FieldArray.rules.sm==6?24:12))}...\r\n                                                                            </FormHelperText>\r\n                                                                        )}\r\n                                                                        {FieldArray.helptext && FieldArray.helptext.length<=12 && (\r\n                                                                            <FormHelperText>\r\n                                                                                {FieldArray.helptext}\r\n                                                                            </FormHelperText>\r\n                                                                        )}\r\n                                                                        {fieldError && fieldError.message && (\r\n                                                                            <FormHelperText sx={{ color: 'error.main' }}>\r\n                                                                                {fieldError.message as string}\r\n                                                                            </FormHelperText>\r\n                                                                        )}\r\n                                                                    </DropzoneWrapper>\r\n                                                                </FormControl>\r\n                                                            </Grid>\r\n                                                        )\r\n                                                    }\r\n                                                    else if ((FieldArray.show || fieldArrayShow[FieldArray.name]) && FieldArray.type == \"files\") {\r\n                                                        if (action.indexOf(\"edit_default\") != -1 && defaultValuesNew[FieldArray.name] != undefined) {\r\n                                                            //setValue(FieldArray.name, defaultValuesNew[FieldArray.name])\r\n                                                        }\r\n                                                        \r\n                                                        return (\r\n                                                            <Grid item xs={FieldArray.rules.xs} sm={FieldArray.rules.sm} key={\"AllFields_\" + FieldArray_index}>\r\n                                                                <FormControl fullWidth sx={{ mb: 0 }}>\r\n                                                                    <DropzoneWrapper>\r\n                                                                        <div {...getRootPropsFiles({ className: 'dropzone' })}>\r\n                                                                            <input {...getInputPropsFiles()} />\r\n                                                                            <Box sx={{ display: 'flex', flexDirection: ['column', 'column', 'row'], alignItems: 'center' }}>\r\n                                                                            <Box sx={{ display: 'flex', flexDirection: 'column', textAlign: ['center', 'center', 'inherit'] }}>\r\n                                                                            <Typography color='textSecondary'>{FieldArray.label}:</Typography>\r\n                                                                            </Box>\r\n                                                                            </Box>\r\n                                                                        </div>\r\n                                                                        {uploadFiles && uploadFiles.length ? (\r\n                                                                            <Fragment>\r\n                                                                            <List>\r\n                                                                            {uploadFiles.map((fileInfor: File | FileUrl) => {\r\n\r\n                                                                                return (\r\n                                                                                        <ListItem key={fileInfor.name}>\r\n                                                                                            <div className='file-details' style={{overflow: 'hidden'}}>\r\n                                                                                                <div className='file-preview'>{renderFilePreview(fileInfor, 38, 38)}</div>\r\n                                                                                                <div>\r\n                                                                                                {fileInfor['type']==\"file\" ? \r\n                                                                                                <Typography className='file-name'><CustomLink href={authConfig.backEndApiHost+fileInfor['webkitRelativePath']} download={fileInfor['name']}>{fileInfor['name']}</CustomLink></Typography>\r\n                                                                                                :\r\n                                                                                                ''\r\n                                                                                                }\r\n                                                                                                {fileInfor['type']==\"image\" ? \r\n                                                                                                <Typography className='file-name'><CustomLink href={authConfig.backEndApiHost+fileInfor['webkitRelativePath']} download={fileInfor['name']} target=\"_blank\">{fileInfor['name']}</CustomLink></Typography>\r\n                                                                                                :\r\n                                                                                                ''\r\n                                                                                                }\r\n                                                                                                {(fileInfor['type']!=\"file\" && fileInfor['type']!=\"image\") ? \r\n                                                                                                <Typography className='file-name'>{fileInfor['name']}</Typography>\r\n                                                                                                :\r\n                                                                                                ''\r\n                                                                                                }\r\n                                                                                                {(fileInfor && fileInfor.size>0) ? \r\n                                                                                                <Typography className='file-size' variant='body2'>\r\n                                                                                                    {Math.round(fileInfor.size / 100) / 10 > 1000\r\n                                                                                                    ? `${(Math.round(fileInfor.size / 100) / 10000).toFixed(1)} mb`\r\n                                                                                                    : `${(Math.round(fileInfor.size / 100) / 10).toFixed(1)} kb`}\r\n                                                                                                </Typography>\r\n                                                                                                :\r\n                                                                                                ''\r\n                                                                                                }\r\n                                                                                                \r\n                                                                                                </div>\r\n                                                                                            </div>\r\n                                                                                            <IconButton onClick={() => handleRemoveFile(fileInfor)}>\r\n                                                                                                <Icon icon='mdi:close' fontSize={20} />\r\n                                                                                            </IconButton>\r\n                                                                                        </ListItem>\r\n                                                                                        )\r\n                                                                            })}\r\n                                                                            </List>\r\n                                                                            <div className='buttons'>\r\n                                                                                <Button color='error' variant='outlined' onClick={handleRemoveAllFiles}>\r\n                                                                                {FieldArray.RemoveAll}\r\n                                                                                </Button>\r\n                                                                            </div>\r\n                                                                            </Fragment>\r\n                                                                        ) : null}\r\n                                                                    </DropzoneWrapper>\r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length>12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            <Tooltip title={<Fragment>{FieldArray.helptext}</Fragment>} >\r\n                                                                                <IconButton style={{ padding: 0, margin: '0px 0px 0px 5px'}}>\r\n                                                                                    <HelpIcon />\r\n                                                                                </IconButton>\r\n                                                                            </Tooltip>\r\n                                                                            {FieldArray.helptext.substring(0,FieldArray.rules.sm==12?56:(FieldArray.rules.sm==6?24:12))}...\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length<=12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            {FieldArray.helptext}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {fieldError && fieldError.message && (\r\n                                                                        <FormHelperText sx={{ color: 'error.main' }}>\r\n                                                                            {fieldError.message as string}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                </FormControl>\r\n                                                            </Grid>\r\n                                                        )\r\n                                                    }\r\n                                                    else if ((FieldArray.show || fieldArrayShow[FieldArray.name]) && FieldArray.type == \"files2\") {\r\n                                                        if (action.indexOf(\"edit_default\") != -1 && defaultValuesNew[FieldArray.name] != undefined) {\r\n                                                            //setValue(FieldArray.name, defaultValuesNew[FieldArray.name])\r\n                                                        }\r\n                                                        \r\n                                                        return (\r\n                                                            <Grid item xs={FieldArray.rules.xs} sm={FieldArray.rules.sm} key={\"AllFields_\" + FieldArray_index}>\r\n                                                                <FormControl fullWidth sx={{ mb: 0 }}>\r\n                                                                    <DropzoneWrapper>\r\n                                                                        <div {...getRootPropsFiles2({ className: 'dropzone' })}>\r\n                                                                            <input {...getInputPropsFiles2()} />\r\n                                                                            <Box sx={{ display: 'flex', flexDirection: ['column', 'column', 'row'], alignItems: 'center' }}>\r\n                                                                            <Box sx={{ display: 'flex', flexDirection: 'column', textAlign: ['center', 'center', 'inherit'] }}>\r\n                                                                            <Typography color='textSecondary'>{FieldArray.label}:</Typography>\r\n                                                                            </Box>\r\n                                                                            </Box>\r\n                                                                        </div>\r\n                                                                        {uploadFiles2 && uploadFiles2.length ? (\r\n                                                                            <Fragment>\r\n                                                                            <List>\r\n                                                                            {uploadFiles2.map((fileInfor: File | FileUrl) => {\r\n\r\n                                                                                return (\r\n                                                                                        <ListItem key={fileInfor.name}>\r\n                                                                                            <div className='file-details' style={{overflow: 'hidden'}}>\r\n                                                                                                <div className='file-preview'>{renderFilePreview(fileInfor, 38, 38)}</div>\r\n                                                                                                <div>\r\n                                                                                                {fileInfor['type']==\"file\" ? \r\n                                                                                                <Typography className='file-name'><CustomLink href={authConfig.backEndApiHost+fileInfor['webkitRelativePath']} download={fileInfor['name']}>{fileInfor['name']}</CustomLink></Typography>\r\n                                                                                                :\r\n                                                                                                ''\r\n                                                                                                }\r\n                                                                                                {fileInfor['type']==\"image\" ? \r\n                                                                                                <Typography className='file-name'><CustomLink href={authConfig.backEndApiHost+fileInfor['webkitRelativePath']} download={fileInfor['name']} target=\"_blank\">{fileInfor['name']}</CustomLink></Typography>\r\n                                                                                                :\r\n                                                                                                ''\r\n                                                                                                }\r\n                                                                                                {(fileInfor['type']!=\"file\" && fileInfor['type']!=\"image\") ? \r\n                                                                                                <Typography className='file-name'>{fileInfor['name']}</Typography>\r\n                                                                                                :\r\n                                                                                                ''\r\n                                                                                                }\r\n                                                                                                {(fileInfor && fileInfor.size>0) ? \r\n                                                                                                <Typography className='file-size' variant='body2'>\r\n                                                                                                    {Math.round(fileInfor.size / 100) / 10 > 1000\r\n                                                                                                    ? `${(Math.round(fileInfor.size / 100) / 10000).toFixed(1)} mb`\r\n                                                                                                    : `${(Math.round(fileInfor.size / 100) / 10).toFixed(1)} kb`}\r\n                                                                                                </Typography>\r\n                                                                                                :\r\n                                                                                                ''\r\n                                                                                                }\r\n                                                                                                \r\n                                                                                                </div>\r\n                                                                                            </div>\r\n                                                                                            <IconButton onClick={() => handleRemoveFile2(fileInfor)}>\r\n                                                                                                <Icon icon='mdi:close' fontSize={20} />\r\n                                                                                            </IconButton>\r\n                                                                                        </ListItem>\r\n                                                                                        )\r\n                                                                            })}\r\n                                                                            </List>\r\n                                                                            <div className='buttons'>\r\n                                                                                <Button color='error' variant='outlined' onClick={handleRemoveAllFiles2}>\r\n                                                                                {FieldArray.RemoveAll}\r\n                                                                                </Button>\r\n                                                                            </div>\r\n                                                                            </Fragment>\r\n                                                                        ) : null}\r\n                                                                    </DropzoneWrapper>\r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length>12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            <Tooltip title={<Fragment>{FieldArray.helptext}</Fragment>} >\r\n                                                                                <IconButton style={{ padding: 0, margin: '0px 0px 0px 5px'}}>\r\n                                                                                    <HelpIcon />\r\n                                                                                </IconButton>\r\n                                                                            </Tooltip>\r\n                                                                            {FieldArray.helptext.substring(0,FieldArray.rules.sm==12?56:(FieldArray.rules.sm==6?24:12))}...\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length<=12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            {FieldArray.helptext}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {fieldError && fieldError.message && (\r\n                                                                        <FormHelperText sx={{ color: 'error.main' }}>\r\n                                                                            {fieldError.message as string}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                </FormControl>\r\n                                                            </Grid>\r\n                                                        )\r\n                                                    }\r\n                                                    else if ((FieldArray.show || fieldArrayShow[FieldArray.name]) && FieldArray.type == \"readonlyfiles\") {\r\n                                                        if (action.indexOf(\"edit_default\") != -1 && defaultValuesNew[FieldArray.name] != undefined) {\r\n                                                            //setValue(FieldArray.name, defaultValuesNew[FieldArray.name])\r\n                                                        }\r\n                                                        \r\n                                                        return (\r\n                                                            <Grid item xs={FieldArray.rules.xs} sm={FieldArray.rules.sm} key={\"AllFields_\" + FieldArray_index}>\r\n                                                                <FormControl fullWidth sx={{ mb: 0 }}>\r\n                                                                    <DropzoneWrapper>\r\n                                                                        <Box sx={{ display: 'flex', flexDirection: ['column', 'column', 'row'], alignItems: 'center' }}>\r\n                                                                            <Box sx={{ display: 'flex', flexDirection: 'column', textAlign: ['center', 'center', 'inherit'] }}>\r\n                                                                                <Typography color='textSecondary'>{FieldArray.label}:</Typography>\r\n                                                                            </Box>\r\n                                                                        </Box>\r\n                                                                        {uploadFilesReadonly && uploadFilesReadonly.length ? (\r\n                                                                            <Fragment>\r\n                                                                            <List>\r\n                                                                            {uploadFilesReadonly.map((fileInfor: File | FileUrl) => {\r\n\r\n                                                                                return (\r\n                                                                                        <ListItem key={fileInfor.name} style={{padding: \"3px\"}}>\r\n                                                                                            <div className='file-details' style={{ display: 'flex', overflow: 'hidden'}}>\r\n                                                                                                <div className='file-preview'>{renderFilePreview(fileInfor, 38, 38)}</div>\r\n                                                                                                <div>\r\n                                                                                                {fileInfor['type']==\"file\" ? \r\n                                                                                                    <Typography className='file-name'><CustomLink href={authConfig.backEndApiHost+fileInfor['webkitRelativePath']} download={fileInfor['name']}>{fileInfor['name']}</CustomLink></Typography>\r\n                                                                                                :\r\n                                                                                                ''\r\n                                                                                                }\r\n                                                                                                {fileInfor['type']==\"image\" ? \r\n                                                                                                    <Typography className='file-name'><CustomLink href={authConfig.backEndApiHost+fileInfor['webkitRelativePath']} download={fileInfor['name']} target=\"_blank\">{fileInfor['name']}</CustomLink></Typography>\r\n                                                                                                :\r\n                                                                                                ''\r\n                                                                                                }\r\n                                                                                                {(fileInfor['type']!=\"file\" && fileInfor['type']!=\"image\") ? \r\n                                                                                                    <Typography className='file-name'>{fileInfor['name']}</Typography>\r\n                                                                                                :\r\n                                                                                                ''\r\n                                                                                                }\r\n                                                                                                <Typography className='file-size' variant='body2'>\r\n                                                                                                    {Math.round(fileInfor.size / 100) / 10 > 1000\r\n                                                                                                    ? `${(Math.round(fileInfor.size / 100) / 10000).toFixed(1)} mb`\r\n                                                                                                    : `${(Math.round(fileInfor.size / 100) / 10).toFixed(1)} kb`}\r\n                                                                                                </Typography>\r\n                                                                                                </div>\r\n                                                                                            </div>\r\n                                                                                        </ListItem>\r\n                                                                                        )\r\n                                                                            })}\r\n                                                                            </List>\r\n                                                                            </Fragment>\r\n                                                                        ) : null}\r\n                                                                        {FieldArray.helptext && FieldArray.helptext.length>12 && (\r\n                                                                            <FormHelperText>\r\n                                                                                <Tooltip    \r\n                                                                                        title={<Fragment>{FieldArray.helptext}</Fragment>} \r\n                                                                                        PopperProps={{\r\n                                                                                            modifiers: [\r\n                                                                                            {\r\n                                                                                                name: 'offset',\r\n                                                                                                options: {\r\n                                                                                                offset: [0, 0], // [horizontal, vertical] offset. Set it to 0 to reduce the gap.\r\n                                                                                                },\r\n                                                                                            },\r\n                                                                                            ],\r\n                                                                                        }}\r\n                                                                                >\r\n                                                                                    <IconButton style={{ padding: 0, margin: '0px 0px 0px 5px'}}>\r\n                                                                                        <HelpIcon />\r\n                                                                                    </IconButton>\r\n                                                                                </Tooltip>\r\n                                                                                {FieldArray.helptext.substring(0,FieldArray.rules.sm==12?56:(FieldArray.rules.sm==6?24:12))}...\r\n                                                                            </FormHelperText>\r\n                                                                        )}\r\n                                                                        {FieldArray.helptext && FieldArray.helptext.length<=12 && (\r\n                                                                            <FormHelperText>\r\n                                                                                {FieldArray.helptext}\r\n                                                                            </FormHelperText>\r\n                                                                        )}\r\n                                                                        {fieldError && fieldError.message && (\r\n                                                                            <FormHelperText sx={{ color: 'error.main' }}>\r\n                                                                                {fieldError.message as string}\r\n                                                                            </FormHelperText>\r\n                                                                        )}\r\n                                                                    </DropzoneWrapper>\r\n                                                                </FormControl>\r\n                                                            </Grid>\r\n                                                        )\r\n                                                    }\r\n                                                    else if ((FieldArray.show || fieldArrayShow[FieldArray.name]) && FieldArray.type == \"avatar\") {\r\n                                                        if (action.indexOf(\"edit_default\") != -1 && defaultValuesNew[FieldArray.name] != undefined) {\r\n                                                            setValue(FieldArray.name, defaultValuesNew[FieldArray.name])\r\n                                                        }\r\n\r\n                                                        return (\r\n                                                            <Grid item xs={FieldArray.rules.xs} sm={FieldArray.rules.sm} key={\"AllFields_\" + FieldArray_index}>\r\n                                                                <FormControl fullWidth sx={{ mb: 0 }}>\r\n                                                                    <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                                                                        {avatorShowArea && avatorShowArea[FieldArray.name] ?\r\n                                                                            (<ImgStyled src={avatorShowArea[FieldArray.name]} alt={FieldArray.helptext} />)\r\n                                                                            : ( defaultValuesNew[FieldArray.name] ? <Box sx={{ display: 'flex', alignItems: 'center',cursor: 'pointer',':hover': {cursor: 'pointer',}, }} onClick={() => toggleImagesPreviewListDrawer([authConfig.backEndApiHost+defaultValuesNew[FieldArray.name]], ['image'])}><ImgStyled src={authConfig.backEndApiHost+defaultValuesNew[FieldArray.name]} alt={FieldArray.helptext} /></Box> : <Box sx={{ display: 'flex', alignItems: 'center',}} ><ImgStyled src={'/images/avatars/1.png'} alt={FieldArray.helptext} /></Box> )\r\n                                                                        }\r\n                                                                        <div>\r\n                                                                            <ButtonStyled component='label' variant='contained' htmlFor={FieldArray.name}>\r\n                                                                                {FieldArray.label}\r\n                                                                                <input\r\n                                                                                    hidden\r\n                                                                                    type='file'\r\n                                                                                    name={FieldArray.name}\r\n                                                                                    accept='image/png, image/jpeg'\r\n                                                                                    onChange={handleAvatorChange}\r\n                                                                                    id={FieldArray.name}\r\n                                                                                />\r\n                                                                            </ButtonStyled>\r\n                                                                            <ResetButtonStyled color='secondary' variant='outlined' name={FieldArray.name} onClick={handleAvatorReset}>\r\n                                                                            {FieldArray.Reset}\r\n                                                                            </ResetButtonStyled>\r\n                                                                            <Typography variant='caption' sx={{ mt: 4, display: 'block', color: 'text.disabled' }}>\r\n                                                                            {FieldArray.AvatarFormatTip}\r\n                                                                            </Typography>\r\n                                                                        </div>\r\n                                                                    </Box>\r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length>12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            <Tooltip title={<Fragment>{FieldArray.helptext}</Fragment>} >\r\n                                                                                <IconButton style={{ padding: 0, margin: '0px 0px 0px 5px'}}>\r\n                                                                                    <HelpIcon />\r\n                                                                                </IconButton>\r\n                                                                            </Tooltip>\r\n                                                                            {FieldArray.helptext.substring(0,FieldArray.rules.sm==12?56:(FieldArray.rules.sm==6?24:12))}...\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length<=12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            {FieldArray.helptext}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {fieldError && fieldError.message && (\r\n                                                                        <FormHelperText sx={{ color: 'error.main' }}>\r\n                                                                            {fieldError.message as string}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                </FormControl>\r\n                                                            </Grid>\r\n                                                        )\r\n                                                    }\r\n                                                    else if ((FieldArray.show || fieldArrayShow[FieldArray.name]) && FieldArray.type == \"readonlyavatar\") {\r\n                                                        if (action.indexOf(\"edit_default\") != -1 && defaultValuesNew[FieldArray.name] != undefined) {\r\n                                                            setValue(FieldArray.name, defaultValuesNew[FieldArray.name])\r\n                                                        }\r\n                                                        \r\n                                                        return (\r\n                                                            <Grid item xs={FieldArray.rules.xs} sm={FieldArray.rules.sm} key={\"AllFields_\" + FieldArray_index}>\r\n                                                                <FormControl fullWidth sx={{ mb: 0 }}>\r\n                                                                    <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                                                                        {avatorShowArea && avatorShowArea[FieldArray.name] ?\r\n                                                                            (<ImgStyled src={avatorShowArea[FieldArray.name]} alt={FieldArray.helptext} />)\r\n                                                                            : (<ImgStyled src={authConfig.backEndApiHost+defaultValuesNew[FieldArray.name]} alt={FieldArray.helptext} />)\r\n                                                                        }\r\n                                                                    </Box>\r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length>12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            <Tooltip title={<Fragment>{FieldArray.helptext}</Fragment>} >\r\n                                                                                <IconButton style={{ padding: 0, margin: '0px 0px 0px 5px'}}>\r\n                                                                                    <HelpIcon />\r\n                                                                                </IconButton>\r\n                                                                            </Tooltip>\r\n                                                                            {FieldArray.helptext.substring(0,FieldArray.rules.sm==12?56:(FieldArray.rules.sm==6?24:12))}...\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length<=12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            {FieldArray.helptext}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {fieldError && fieldError.message && (\r\n                                                                        <FormHelperText sx={{ color: 'error.main' }}>\r\n                                                                            {fieldError.message as string}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                </FormControl>\r\n                                                            </Grid>\r\n                                                        )\r\n                                                    }\r\n                                                    else if ((FieldArray.show || fieldArrayShow[FieldArray.name]) && FieldArray.type == \"slider\") {\r\n                                                        \r\n                                                        //console.log(\"defaultValuesNew[FieldArray.name]***************Begin\", FieldArray)\r\n                                                        if (action.indexOf(\"edit_default\") != -1 && defaultValuesNew[FieldArray.name] != undefined) {\r\n                                                            \r\n                                                            //console.log(\"defaultValuesNew[FieldArray.name]--------------------------------\", defaultValuesNew[FieldArray.name])\r\n                                                            setValue(FieldArray.name, defaultValuesNew[FieldArray.name])\r\n                                                        }\r\n                                                        \r\n                                                        return (\r\n                                                            <Grid item xs={FieldArray.rules.xs} sm={FieldArray.rules.sm} key={\"AllFields_\" + FieldArray_index}>\r\n                                                                <FormControl fullWidth sx={{ mb: 0 }}>\r\n                                                                    <Controller\r\n                                                                        name={FieldArray.name}\r\n                                                                        control={control}\r\n                                                                        render={({ field: { value, onChange } }) => (\r\n                                                                            <Box sx={{ width: 380 }}>\r\n                                                                                <Typography sx={{ fontWeight: 500 }}>{FieldArray.label}</Typography>\r\n                                                                                <Slider\r\n                                                                                    size={componentsize}\r\n                                                                                    min={FieldArray.min}\r\n                                                                                    max={FieldArray.max}\r\n                                                                                    step={FieldArray.step}\r\n                                                                                    marks={FieldArray.marks}\r\n                                                                                    onChange={(e) => {\r\n                                                                                        onChange(e);\r\n                                                                                        const defaultValuesNewTemp:{[key:string]:any} = { ...defaultValuesNew }\r\n                                                                                        defaultValuesNewTemp[FieldArray.name] = (e.target as HTMLInputElement).value\r\n                                                                                        setDefaultValuesNew(defaultValuesNewTemp)\r\n                                                                                    }}\r\n                                                                                    value={Number(value)}\r\n                                                                                    valueLabelDisplay='auto'\r\n                                                                                    aria-labelledby='custom-marks-slider'\r\n                                                                                />\r\n                                                                            </Box>\r\n                                                                        )}\r\n                                                                    />\r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length>12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            <Tooltip title={<Fragment>{FieldArray.helptext}</Fragment>} >\r\n                                                                                <IconButton style={{ padding: 0, margin: '0px 0px 0px 5px'}}>\r\n                                                                                    <HelpIcon />\r\n                                                                                </IconButton>\r\n                                                                            </Tooltip>\r\n                                                                            {FieldArray.helptext.substring(0,FieldArray.rules.sm==12?56:(FieldArray.rules.sm==6?24:12))}...\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length<=12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            {FieldArray.helptext}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {fieldError && fieldError.message && (\r\n                                                                        <FormHelperText sx={{ color: 'error.main' }}>\r\n                                                                            {fieldError.message as string}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                </FormControl>\r\n                                                            </Grid>\r\n                                                        )\r\n                                                    }\r\n                                                    else if ((FieldArray.show || fieldArrayShow[FieldArray.name]) && FieldArray.type == \"Switch\") {\r\n                                                        \r\n                                                        //console.log(\"defaultValuesNew[FieldArray.name]***************Begin\", FieldArray)\r\n                                                        if (action.indexOf(\"edit_default\") != -1 && defaultValuesNew[FieldArray.name] != undefined) {\r\n                                                            \r\n                                                            //console.log(\"defaultValuesNew[FieldArray.name]--------------------------------\", defaultValuesNew[FieldArray.name])\r\n                                                            setValue(FieldArray.name, (defaultValuesNew[FieldArray.name] == \"1\" || defaultValuesNew[FieldArray.name] == \"Yes\" || defaultValuesNew[FieldArray.name] == \"是\" || defaultValuesNew[FieldArray.name] == \"true\") ? \"1\" : \"0\")\r\n                                                        }\r\n                                                        if (defaultValuesNew[FieldArray.name] != undefined) {\r\n                                                            setValue(FieldArray.name, (defaultValuesNew[FieldArray.name] == \"1\" || defaultValuesNew[FieldArray.name] == \"on\" || defaultValuesNew[FieldArray.name] == \"Yes\" || defaultValuesNew[FieldArray.name] == \"是\" || defaultValuesNew[FieldArray.name] == \"true\" || defaultValuesNew[FieldArray.name] == true) ? \"1\" : \"0\")\r\n                                                        }\r\n                                                        \r\n                                                        return (\r\n                                                            <Grid item xs={FieldArray.rules.xs} sm={FieldArray.rules.sm} key={\"AllFields_\" + FieldArray_index}>\r\n                                                                <FormControl fullWidth sx={{ mb: 0 }}>\r\n                                                                    <Controller\r\n                                                                        name={FieldArray.name}\r\n                                                                        control={control}\r\n                                                                        render={({ field: { value, onChange } }) => (\r\n                                                                            <Box sx={{ width: 380 }}>\r\n                                                                                <Typography sx={{ fontWeight: 500 }}>{FieldArray.label}</Typography>\r\n                                                                                <Switch\r\n                                                                                    size={componentsize}\r\n                                                                                    name='appBarBlur'\r\n                                                                                    checked={value==\"1\"?true:false}\r\n                                                                                    onChange={(e) => {\r\n                                                                                        onChange(e);\r\n                                                                                        const defaultValuesNewTemp:{[key:string]:any} = { ...defaultValuesNew }\r\n                                                                                        defaultValuesNewTemp[FieldArray.name] = (defaultValuesNew[FieldArray.name] == \"1\" || defaultValuesNew[FieldArray.name] == \"on\" || defaultValuesNew[FieldArray.name] == \"Yes\" || defaultValuesNew[FieldArray.name] == \"是\" || defaultValuesNew[FieldArray.name] == \"true\" || defaultValuesNew[FieldArray.name] == true) ? false : true\r\n                                                                                        setDefaultValuesNew(defaultValuesNewTemp)\r\n                                                                                    }}\r\n                                                                                />\r\n                                                                            </Box>\r\n                                                                        )}\r\n                                                                    />\r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length>12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            <Tooltip title={<Fragment>{FieldArray.helptext}</Fragment>} >\r\n                                                                                <IconButton style={{ padding: 0, margin: '0px 0px 0px 5px'}}>\r\n                                                                                    <HelpIcon />\r\n                                                                                </IconButton>\r\n                                                                            </Tooltip>\r\n                                                                            {FieldArray.helptext.substring(0,FieldArray.rules.sm==12?56:(FieldArray.rules.sm==6?24:12))}...\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {FieldArray.helptext && FieldArray.helptext.length<=12 && (\r\n                                                                        <FormHelperText>\r\n                                                                            {FieldArray.helptext}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                    {fieldError && fieldError.message && (\r\n                                                                        <FormHelperText sx={{ color: 'error.main' }}>\r\n                                                                            {fieldError.message as string}\r\n                                                                        </FormHelperText>\r\n                                                                    )}\r\n                                                                </FormControl>\r\n                                                            </Grid>\r\n                                                        )\r\n                                                    }\r\n                                                    else if ((FieldArray.show || fieldArrayShow[FieldArray.name]) && FieldArray.type == \"editor\") {\r\n                                                        \r\n                                                        return (\r\n                                                            <Grid item xs={FieldArray.rules.xs} sm={FieldArray.rules.sm} key={\"AllFields_\" + FieldArray_index}>\r\n                                                                <FormControl fullWidth sx={{ mb: 3 }}>\r\n                                                                    <EditorWrapper>\r\n                                                                        <Box >\r\n                                                                            <Typography sx={{ fontWeight: 500, mb: 3 }}>{FieldArray.label}</Typography>\r\n                                                                            <ReactDraftWysiwyg\r\n                                                                                editorState={allEditorValues[FieldArray.name] ? allEditorValues[FieldArray.name] : EditorState.createWithContent(ContentState.createFromBlockArray(convertFromHTML(defaultValuesNew[FieldArray.name]).contentBlocks, convertFromHTML(defaultValuesNew[FieldArray.name]).entityMap,))}\r\n                                                                                onEditorStateChange={(data) => {\r\n                                                                                    const allEditorValuesTemp = { ...allEditorValues }\r\n                                                                                    allEditorValuesTemp[FieldArray.name] = data\r\n                                                                                    setAllEditorValues(allEditorValuesTemp)\r\n                                                                                }\r\n                                                                                }\r\n                                                                                placeholder={FieldArray.placeholder}\r\n                                                                                toolbar={{\r\n                                                                                    options: ['inline', 'textAlign'],\r\n                                                                                    inline: {\r\n                                                                                        inDropdown: false,\r\n                                                                                        options: ['bold', 'italic', 'underline', 'strikethrough']\r\n                                                                                    }\r\n                                                                                }}\r\n                                                                            />\r\n                                                                        </Box>\r\n                                                                    </EditorWrapper>\r\n                                                                </FormControl>\r\n                                                            </Grid>\r\n                                                        )\r\n                                                    }\r\n                                                    else if ((FieldArray.show || fieldArrayShow[FieldArray.name]) && FieldArray.type == \"UserRoleMenuDetail\") {\r\n                                                        \r\n                                                        //console.log(\"defaultValuesNew[FieldArray.name]***************Begin\", FieldArray)\r\n                                                        if (action.indexOf(\"edit_default\") != -1 && defaultValuesNew[FieldArray.name] != undefined) {\r\n                                                            \r\n                                                            //console.log(\"defaultValuesNew[FieldArray.name]--------------------------------\", defaultValuesNew[FieldArray.name])\r\n                                                            setValue(FieldArray.name, defaultValuesNew[FieldArray.name])\r\n                                                        }\r\n                                                        \r\n                                                        return (\r\n                                                            <Grid item xs={FieldArray.rules.xs} sm={FieldArray.rules.sm} key={\"AllFields_\" + FieldArray_index}>\r\n                                                                <TableContainer>\r\n                                                                <Table size='small'>\r\n                                                                <TableHead>\r\n                                                                    <TableRow>\r\n                                                                    <TableCell sx={{ pl: '0 !important' }}>\r\n                                                                        <Box\r\n                                                                        sx={{\r\n                                                                            display: 'flex',\r\n                                                                            fontSize: '0.875rem',\r\n                                                                            whiteSpace: 'nowrap',\r\n                                                                            alignItems: 'center',\r\n                                                                            textTransform: 'capitalize',\r\n                                                                            '& svg': { ml: 1, cursor: 'pointer' }\r\n                                                                        }}\r\n                                                                        >\r\n                                                                        </Box>\r\n                                                                    </TableCell>\r\n                                                                    </TableRow>\r\n                                                                </TableHead>\r\n                                                                <TableBody>\r\n                                                                <TableRow key={\"TableRow_\" + FieldArray_index} sx={{ '& .MuiTableCell-root:first-of-type': { pl: '0 !important' } }}>\r\n                                                                \r\n                                                                {Object.keys(FieldArray.MenuTwoArray).map((MenuOneName: string, MenuOneName_index: number) => {\r\n                                                                    const MenuTwoArray = FieldArray.MenuTwoArray[MenuOneName]\r\n                                                                    \r\n                                                                    return (                                                                    \r\n                                                                        <TableCell\r\n                                                                            key={MenuOneName_index}\r\n                                                                            sx={{\r\n                                                                            verticalAlign: \"top\",\r\n                                                                            fontWeight: 600,\r\n                                                                            whiteSpace: 'nowrap',\r\n                                                                            color: (theme: any) => `${theme.palette.text.primary} !important`\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            <Table size='small'>\r\n                                                                                <TableHead>\r\n                                                                                    <TableRow key={\"MenuOneName_\" + MenuOneName_index} sx={{ '& .MuiTableCell-root:first-of-type': { pl: '0 !important' } }}>                                                                                \r\n                                                                                        <TableCell colSpan={3}>\r\n                                                                                            {MenuOneName} \r\n                                                                                        </TableCell>   \r\n                                                                                    </TableRow>\r\n                                                                                    <TableRow key={\"TableCell_\" + MenuOneName_index} sx={{ '& .MuiTableCell-root:first-of-type': { pl: '0 !important' } }}>                                                                                \r\n                                                                                    <TableCell colSpan={3}>\r\n                                                                                        <FormControlLabel\r\n                                                                                        label={FieldArray.SelectAll}\r\n                                                                                        sx={{ '& .MuiTypography-root': { textTransform: 'capitalize' } }}\r\n                                                                                        control={\r\n                                                                                            <Checkbox\r\n                                                                                            size='small'\r\n                                                                                            value={MenuOneName} \r\n                                                                                            onChange={handleSelectAllCheckbox}\r\n                                                                                            indeterminate={isIndeterminateCheckbox[MenuOneName]}\r\n                                                                                            checked={selectedCheckbox[MenuOneName] && selectedCheckbox[MenuOneName].length === menuTwoCount[MenuOneName] }\r\n                                                                                            />\r\n                                                                                        }\r\n                                                                                        />\r\n                                                                                    </TableCell>   \r\n                                                                                    </TableRow>\r\n                                                                                </TableHead>\r\n                                                                                <TableBody>                                                                                \r\n                                                                                    {Object.keys(MenuTwoArray).map((MenuTwoName: string, MenuTwoName_index: number) => {\r\n                                                                                        const MenuThreeArray = MenuTwoArray[MenuTwoName]\r\n                                                                                        \r\n                                                                                        return ( \r\n                                                                                            <Fragment key={MenuTwoName_index}>\r\n                                                                                                {MenuThreeArray.length==1 && MenuThreeArray.map((MenuThreeRecord: any, MenuThreeRecord_index: number) => {\r\n                                                                                                    const checkboxid = MenuThreeRecord['id']\r\n                                                                                                    \r\n                                                                                                    return (\r\n                                                                                                    <TableRow key={`${MenuThreeRecord['id']}_${MenuThreeRecord_index}`} sx={{ '& .MuiTableCell-root:first-of-type': { pl: '0 !important' } }}>\r\n                                                                                                        <TableCell>\r\n                                                                                                            <FormControlLabel\r\n                                                                                                            label={MenuThreeRecord['MenuTwoName']}\r\n                                                                                                            control={\r\n                                                                                                                <Checkbox\r\n                                                                                                                size='small'\r\n                                                                                                                id={checkboxid}\r\n                                                                                                                onChange={() => RoleMenuElementPermission(checkboxid, MenuOneName)}\r\n                                                                                                                checked={selectedCheckbox[MenuOneName] && selectedCheckbox[MenuOneName].includes(checkboxid) ? true : false}\r\n                                                                                                                />\r\n                                                                                                            }\r\n                                                                                                            />\r\n                                                                                                        </TableCell>\r\n                                                                                                    </TableRow>\r\n                                                                                                    )\r\n                                                                                                })}\r\n\r\n                                                                                                {MenuThreeArray.length>1 ?\r\n                                                                                                    <Fragment>\r\n                                                                                                        <TableRow key={`${MenuTwoName}_${MenuTwoName_index}_TableRow`} sx={{ '& .MuiTableCell-root:first-of-type': { pl: '0 !important' } }}>\r\n                                                                                                            <TableCell>\r\n                                                                                                                <FormControlLabel\r\n                                                                                                                style={{paddingLeft:\"30px\"}}\r\n                                                                                                                label={MenuTwoName}\r\n                                                                                                                control={\r\n                                                                                                                    <Fragment></Fragment>\r\n                                                                                                                }\r\n                                                                                                                />\r\n                                                                                                            </TableCell>\r\n                                                                                                        </TableRow>\r\n                                                                                                    </Fragment>\r\n                                                                                                    :\r\n                                                                                                    ''\r\n                                                                                                }\r\n                                                                                                {MenuThreeArray.length>1 && MenuThreeArray.map((MenuThreeRecord: any, MenuThreeRecord_index: number) => {\r\n                                                                                                    const checkboxid = MenuThreeRecord['id']\r\n                                                                                                    \r\n                                                                                                    return (\r\n                                                                                                    <TableRow key={`${MenuThreeRecord['id']}_${MenuThreeRecord_index}`} sx={{ '& .MuiTableCell-root:first-of-type': { pl: '0 !important' } }}>\r\n                                                                                                        <TableCell>\r\n                                                                                                            <FormControlLabel \r\n                                                                                                            style={{paddingLeft:\"20px\"}}\r\n                                                                                                            label={MenuThreeRecord['MenuThreeName']}\r\n                                                                                                            control={\r\n                                                                                                                <Checkbox\r\n                                                                                                                size='small'\r\n                                                                                                                id={checkboxid}\r\n                                                                                                                onChange={() => RoleMenuElementPermission(checkboxid, MenuOneName)}\r\n                                                                                                                checked={selectedCheckbox[MenuOneName] && selectedCheckbox[MenuOneName].includes(checkboxid) ? true : false}\r\n                                                                                                                />\r\n                                                                                                            }\r\n                                                                                                            />\r\n                                                                                                        </TableCell>\r\n                                                                                                    </TableRow>\r\n                                                                                                    )\r\n                                                                                                })}\r\n                                                                                            </Fragment>\r\n                                                                                        )\r\n                                                                                    })}        \r\n                                                                                </TableBody>\r\n                                                                            </Table>\r\n                                                                        </TableCell>\r\n                                                                    )\r\n                                                                        \r\n                                                                    })}\r\n                                                                    </TableRow>\r\n                                                                </TableBody>\r\n                                                                </Table>\r\n                                                            </TableContainer>\r\n                                                            </Grid>\r\n                                                        )\r\n                                                    }\r\n                                                    else if ((FieldArray.show) && FieldArray.type == \"divider\") {\r\n                                                        \r\n                                                        return (\r\n                                                            <Grid item xs={FieldArray.rules.xs} sm={FieldArray.rules.sm} key={\"AllFields_\" + FieldArray_index}>\r\n                                                                <Divider />\r\n                                                            </Grid>\r\n                                                        )\r\n                                                    }\r\n                                                    else if (!FieldArray.show) {\r\n                                                        \r\n                                                        //console.log(\"****************************** Hidden Not Show\", FieldArray)\r\n                                                    }\r\n                                                    else {\r\n                                                        \r\n                                                        //console.log(\"defaultValuesNew[FieldArray.name]***************Begin\", FieldArray)\r\n                                                    }\r\n                                                }\r\n\r\n                                            })}\r\n                                        </Grid>\r\n                                    </CardContent>\r\n                                </Card>\r\n                            )\r\n                        })}\r\n\r\n                        {addEditStructInfo2.childtable && addEditStructInfo2.childtable.allFields && addEditStructInfo2.childtable.submittext ?\r\n                            <Card key={\"ChildtableSection\"} sx={{ mb: 2 }}>\r\n                                <RepeaterWrapper>\r\n                                    <Repeater count={childItemCounter}>\r\n                                    {(i: number) => {\r\n                                        const Tag = i === 0 ? Box : Collapse\r\n                                        const NewRowId = \"ChildTable____\" + i + \"____id\"\r\n                                        const NewRowIdValue = defaultValuesNew[NewRowId] ? defaultValuesNew[NewRowId] : 0\r\n                                        const isReadonlyChildRow = NewRowIdValue>0 && childTableData.readonlyIdArray && childTableData.readonlyIdArray.includes(NewRowIdValue) ? true : false\r\n\r\n                                        console.log(\"isReadonlyChildRow\", isReadonlyChildRow)\r\n\r\n                                        return (\r\n                                        <Tag key={i} className='repeater-wrapper' {...(i !== 0 ? { in: true } : {})}>\r\n                                            <Grid container>\r\n                                            <RepeatingContent item xs={12}>\r\n                                                <Grid container sx={{ pl: 1, py: 2, pr: 1 }}>\r\n                                                    {addEditStructInfo2.childtable.allFields.Default.map((FieldArray: any, FieldArray_index: number) => {\r\n                                                        const NewFieldName = \"ChildTable____\" + i + \"____\" + FieldArray.name\r\n                                                        const fieldError = errors[NewFieldName];\r\n\r\n                                                        if (isReadonlyChildRow == false && FieldArray.show && (FieldArray.type == \"input\" || FieldArray.type == \"email\" || FieldArray.type == \"number\")) {\r\n                                                            if (defaultValuesNew[NewFieldName] != undefined) {\r\n                                                                setValue(NewFieldName, defaultValuesNew[NewFieldName])\r\n                                                            }\r\n                                                            else if (defaultValuesNew[NewFieldName] == undefined) {\r\n                                                                setValue(NewFieldName, \"\")\r\n                                                            }\r\n                                                            \r\n                                                            return (\r\n                                                                <Grid item xs={FieldArray.rules.xs} sm={FieldArray.rules.sm} key={\"ChildAllFields_\" + FieldArray_index} sx={{ml:1, mr:1}} >\r\n                                                                    <FormControl fullWidth sx={{ mr: 0, mt: 3, ml: 1 }}>\r\n                                                                        <Controller\r\n                                                                            name={NewFieldName}\r\n                                                                            control={control}\r\n                                                                            render={({ field: { value, onChange } }) => (\r\n                                                                                <TextField\r\n                                                                                    size='small'\r\n                                                                                    disabled={FieldArray.rules.disabled}\r\n                                                                                    value={value}\r\n                                                                                    label={FieldArray.label}\r\n                                                                                    type={FieldArray.type}\r\n                                                                                    InputProps={FieldArray.inputProps ? FieldArray.inputProps : {}}\r\n                                                                                    onChange={(e) => {\r\n                                                                                        onChange(e);\r\n                                                                                        const defaultValuesNewTemp:{[key:string]:any} = { ...defaultValuesNew }\r\n                                                                                        if(FieldArray.inputProps && FieldArray.inputProps.step && FieldArray.inputProps.step=='0.01' && String(e.target.value).split('.')[1] && String(e.target.value).split('.')[1].length>2)  {\r\n                                                                                            defaultValuesNewTemp[NewFieldName] = parseFloat(e.target.value).toFixed(2)\r\n                                                                                        }\r\n                                                                                        else if(FieldArray.inputProps && FieldArray.inputProps.step && FieldArray.inputProps.step=='0.1' && String(e.target.value).split('.')[1] && String(e.target.value).split('.')[1].length>1)  {\r\n                                                                                            defaultValuesNewTemp[NewFieldName] = parseFloat(e.target.value).toFixed(1)\r\n                                                                                        }\r\n                                                                                        else if(FieldArray.inputProps && FieldArray.inputProps.step && FieldArray.inputProps.step=='1' && String(e.target.value).includes('.'))  {\r\n                                                                                            defaultValuesNewTemp[NewFieldName] = parseFloat(e.target.value).toFixed(0)\r\n                                                                                        }\r\n                                                                                        else {\r\n                                                                                            defaultValuesNewTemp[NewFieldName] = e.target.value\r\n                                                                                        }\r\n                                                                                        setDefaultValuesNew(defaultValuesNewTemp)\r\n                                                                                        \r\n                                                                                        //Formula Method\r\n                                                                                        if(FieldArray.Formula && FieldArray.Formula.FormulaMethod && FieldArray.Formula.FormulaMethod!=\"\" && FieldArray.Formula.FormulaMethod!=\"None\" && FieldArray.Formula.FormulaMethodField && FieldArray.Formula.FormulaMethodField!=\"\" && FieldArray.Formula.FormulaMethodTarget && FieldArray.Formula.FormulaMethodTarget!=\"\") {\r\n                                                                                            const NewFormulaMethodField = \"ChildTable____\" + i + \"____\" + FieldArray.Formula.FormulaMethodField\r\n                                                                                            const NewFormulaMethodTarget = \"ChildTable____\" + i + \"____\" + FieldArray.Formula.FormulaMethodTarget\r\n                                                                                            console.log(defaultValuesNewTemp[NewFormulaMethodField])\r\n                                                                                            console.log(e.target.value)\r\n                                                                                            if( defaultValuesNewTemp[NewFormulaMethodField] && e.target.value) {\r\n                                                                                                console.log(\"NewFormulaMethodField\",NewFormulaMethodField)\r\n                                                                                                console.log(\"NewFormulaMethodTarget\",NewFormulaMethodTarget)\r\n                                                                                                console.log(\"defaultValuesNewTemp\",defaultValuesNewTemp)\r\n                                                                                                const ThisInputValue: any = e.target.value\r\n                                                                                                if(FieldArray.Formula.FormulaMethod=='*') {\r\n                                                                                                    const NewValue = defaultValuesNewTemp[NewFormulaMethodField] * ThisInputValue\r\n                                                                                                    if(String(NewValue).split('.')[1] && String(NewValue).split('.')[1].length>2)  {\r\n                                                                                                        defaultValuesNewTemp[NewFormulaMethodTarget] = parseFloat(String(NewValue)).toFixed(2)\r\n                                                                                                    }\r\n                                                                                                    else {\r\n                                                                                                        defaultValuesNewTemp[NewFormulaMethodTarget] = NewValue\r\n                                                                                                    }\r\n                                                                                                    setDefaultValuesNew(defaultValuesNewTemp)\r\n                                                                                                }\r\n                                                                                                else if(FieldArray.Formula.FormulaMethod=='+' && ThisInputValue!=undefined) {\r\n                                                                                                    const NewValue = defaultValuesNewTemp[NewFormulaMethodField] + ThisInputValue\r\n                                                                                                    if(String(NewValue).split('.')[1] && String(NewValue).split('.')[1].length>2)  {\r\n                                                                                                        defaultValuesNewTemp[NewFormulaMethodTarget] = parseFloat(String(NewValue)).toFixed(2)\r\n                                                                                                    }\r\n                                                                                                    else {\r\n                                                                                                        defaultValuesNewTemp[NewFormulaMethodTarget] = NewValue\r\n                                                                                                    }\r\n                                                                                                    setDefaultValuesNew(defaultValuesNewTemp)\r\n                                                                                                }\r\n                                                                                                else if(FieldArray.Formula.FormulaMethod=='-' && ThisInputValue!=undefined) {\r\n                                                                                                    const NewValue = defaultValuesNewTemp[NewFormulaMethodField] - ThisInputValue\r\n                                                                                                    if(String(NewValue).split('.')[1] && String(NewValue).split('.')[1].length>2)  {\r\n                                                                                                        defaultValuesNewTemp[NewFormulaMethodTarget] = parseFloat(String(NewValue)).toFixed(2)\r\n                                                                                                    }\r\n                                                                                                    else {\r\n                                                                                                        defaultValuesNewTemp[NewFormulaMethodTarget] = NewValue\r\n                                                                                                    }\r\n                                                                                                    setDefaultValuesNew(defaultValuesNewTemp)\r\n                                                                                                }\r\n                                                                                                else if(FieldArray.Formula.FormulaMethod=='/'&&ThisInputValue>0) {\r\n                                                                                                    const NewValue = defaultValuesNewTemp[NewFormulaMethodField] / ThisInputValue\r\n                                                                                                    if(String(NewValue).split('.')[1] && String(NewValue).split('.')[1].length>2)  {\r\n                                                                                                        defaultValuesNewTemp[NewFormulaMethodTarget] = parseFloat(String(NewValue)).toFixed(2)\r\n                                                                                                    }\r\n                                                                                                    else {\r\n                                                                                                        defaultValuesNewTemp[NewFormulaMethodTarget] = NewValue\r\n                                                                                                    }\r\n                                                                                                    setDefaultValuesNew(defaultValuesNewTemp)\r\n                                                                                                }\r\n\r\n                                                                                            }\r\n                                                                                        }\r\n                                                                                    }}\r\n                                                                                    placeholder={FieldArray.placeholder}\r\n                                                                                    error={Boolean(errors[NewFieldName])}\r\n                                                                                />\r\n                                                                            )}\r\n                                                                        />\r\n                                                                        {FieldArray.helptext && FieldArray.helptext.length>12 && (\r\n                                                                            <FormHelperText>\r\n                                                                                <Tooltip    \r\n                                                                                        title={<Fragment>{FieldArray.helptext}</Fragment>} \r\n                                                                                        PopperProps={{\r\n                                                                                            modifiers: [\r\n                                                                                              {\r\n                                                                                                name: 'offset',\r\n                                                                                                options: {\r\n                                                                                                  offset: [0, 0], // [horizontal, vertical] offset. Set it to 0 to reduce the gap.\r\n                                                                                                },\r\n                                                                                              },\r\n                                                                                            ],\r\n                                                                                          }}\r\n                                                                                >\r\n                                                                                    <IconButton style={{ padding: 0, margin: '0px 0px 0px 5px'}}>\r\n                                                                                        <HelpIcon />\r\n                                                                                    </IconButton>\r\n                                                                                </Tooltip>\r\n                                                                                {FieldArray.helptext.substring(0,FieldArray.rules.sm==12?56:(FieldArray.rules.sm==6?24:12))}...\r\n                                                                            </FormHelperText>\r\n                                                                        )}\r\n                                                                        {FieldArray.helptext && FieldArray.helptext.length<=12 && (\r\n                                                                            <FormHelperText>\r\n                                                                                {FieldArray.helptext}\r\n                                                                            </FormHelperText>\r\n                                                                        )}\r\n                                                                        {fieldError && fieldError.message && (\r\n                                                                            <FormHelperText sx={{ color: 'error.main' }}>\r\n                                                                                {fieldError.message as string}\r\n                                                                            </FormHelperText>\r\n                                                                        )}\r\n                                                                    </FormControl>\r\n                                                                </Grid>\r\n                                                            )\r\n                                                        }\r\n                                                        else if (isReadonlyChildRow == true || (FieldArray.show && FieldArray.type == \"readonly\") ) {\r\n                                                            if (defaultValuesNew[NewFieldName] != undefined) {\r\n                                                                setValue(NewFieldName, defaultValuesNew[NewFieldName])\r\n                                                            }\r\n                                                            else if (defaultValuesNew[\"ChildTable____\" + i + \"____\" + FieldArray.code] != undefined) {\r\n                                                                setValue(NewFieldName, defaultValuesNew[\"ChildTable____\" + i + \"____\" + FieldArray.code])\r\n                                                            }\r\n                                                            else if (defaultValuesNew[NewFieldName] == undefined) {\r\n                                                                setValue(NewFieldName, \"\")\r\n                                                            }\r\n                                                            console.log(\"defaultValuesNew[NewFieldName]\", NewFieldName, defaultValuesNew[NewFieldName])\r\n                                                            \r\n                                                            return (\r\n                                                                <Grid item xs={FieldArray.rules.xs} sm={FieldArray.rules.sm} key={\"ChildAllFields_\" + FieldArray_index} sx={{ml:1, mr:1}} >\r\n                                                                    <FormControl fullWidth sx={{ mr: 0, mt: 3, ml: 1 }}>\r\n                                                                        <Controller\r\n                                                                            name={NewFieldName}\r\n                                                                            control={control}\r\n                                                                            render={({ field: { value, onChange } }) => (\r\n                                                                                <TextField\r\n                                                                                    size='small'\r\n                                                                                    disabled={true}\r\n                                                                                    value={value}\r\n                                                                                    label={FieldArray.label}\r\n                                                                                    type={\"readonly\"}\r\n                                                                                    InputProps={FieldArray.inputProps ? FieldArray.inputProps : {}}\r\n                                                                                    onChange={(e) => {\r\n                                                                                        onChange(e);\r\n                                                                                        const defaultValuesNewTemp:{[key:string]:any} = { ...defaultValuesNew }\r\n                                                                                        if(FieldArray.inputProps && FieldArray.inputProps.step && FieldArray.inputProps.step=='0.01' && String(e.target.value).split('.')[1] && String(e.target.value).split('.')[1].length>2)  {\r\n                                                                                            defaultValuesNewTemp[NewFieldName] = parseFloat(e.target.value).toFixed(2)\r\n                                                                                        }\r\n                                                                                        else {\r\n                                                                                            defaultValuesNewTemp[NewFieldName] = e.target.value\r\n                                                                                        }\r\n                                                                                        setDefaultValuesNew(defaultValuesNewTemp)\r\n                                                                                    }}\r\n                                                                                    placeholder={FieldArray.placeholder}\r\n                                                                                    error={Boolean(errors[NewFieldName])}\r\n                                                                                />\r\n                                                                            )}\r\n                                                                        />\r\n                                                                        {FieldArray.helptext && FieldArray.helptext.length>12 && (\r\n                                                                            <FormHelperText>\r\n                                                                                <Tooltip    \r\n                                                                                        title={<Fragment>{FieldArray.helptext}</Fragment>} \r\n                                                                                        PopperProps={{\r\n                                                                                            modifiers: [\r\n                                                                                              {\r\n                                                                                                name: 'offset',\r\n                                                                                                options: {\r\n                                                                                                  offset: [0, 0], // [horizontal, vertical] offset. Set it to 0 to reduce the gap.\r\n                                                                                                },\r\n                                                                                              },\r\n                                                                                            ],\r\n                                                                                          }}\r\n                                                                                >\r\n                                                                                    <IconButton style={{ padding: 0, margin: '0px 0px 0px 5px'}}>\r\n                                                                                        <HelpIcon />\r\n                                                                                    </IconButton>\r\n                                                                                </Tooltip>\r\n                                                                                {FieldArray.helptext.substring(0,FieldArray.rules.sm==12?56:(FieldArray.rules.sm==6?24:12))}...\r\n                                                                            </FormHelperText>\r\n                                                                        )}\r\n                                                                        {FieldArray.helptext && FieldArray.helptext.length<=12 && (\r\n                                                                            <FormHelperText>\r\n                                                                                {FieldArray.helptext}\r\n                                                                            </FormHelperText>\r\n                                                                        )}\r\n                                                                        {fieldError && fieldError.message && (\r\n                                                                            <FormHelperText sx={{ color: 'error.main' }}>\r\n                                                                                {fieldError.message as string}\r\n                                                                            </FormHelperText>\r\n                                                                        )}\r\n                                                                    </FormControl>\r\n                                                                </Grid>\r\n                                                            )\r\n                                                        }\r\n                                                        else if (isReadonlyChildRow == false && (FieldArray.show || fieldArrayShow[NewFieldName]) && FieldArray.type == \"autocomplete\") {\r\n                                                            const NewFieldCode = \"ChildTable____\" + i + \"____\" + FieldArray.code\r\n                                                            if(NewFieldName!=NewFieldCode) {\r\n                                                                if(defaultValuesNew[NewFieldCode]!=\"\" && defaultValuesNew[NewFieldCode]!=undefined && defaultValuesNew[NewFieldName]==undefined && FieldArray && FieldArray.options && FieldArray.options.length>0 ) {\r\n                                                                    FieldArray.options.map((ItemValue: any) => {\r\n                                                                        if(ItemValue.value==defaultValuesNew[NewFieldCode]) {\r\n                                                                            setValue(NewFieldName, ItemValue.label)\r\n                                                                            setValue(NewFieldCode, ItemValue.value)\r\n                                                                        }\r\n                                                                    })\r\n                                                                }\r\n                                                                if(defaultValuesNew[NewFieldCode]!=\"\" && defaultValuesNew[NewFieldCode]!=undefined && defaultValuesNew[NewFieldName]!=undefined)  {\r\n                                                                    setValue(NewFieldName, defaultValuesNew[NewFieldName])\r\n                                                                }\r\n                                                                if(defaultValuesNew[NewFieldName]==undefined && defaultValuesNew[NewFieldCode]==undefined)  {\r\n                                                                    setValue(NewFieldName, \"\")\r\n                                                                    setValue(NewFieldCode, \"\")\r\n                                                                }\r\n                                                            }\r\n\r\n                                                            if(defaultValuesNew[NewFieldCode]==undefined)  {\r\n                                                                setValue(NewFieldCode, \"\")\r\n                                                            }\r\n                                                            else {                                                        \r\n                                                                setValue(NewFieldCode, defaultValuesNew[NewFieldCode])\r\n                                                            }\r\n                                                            \r\n                                                            const options = FieldArray.options\r\n                                                            \r\n                                                            return (\r\n                                                                <Grid item xs={FieldArray.rules.xs} sm={FieldArray.rules.sm} key={\"AllFields_\" + FieldArray_index}>\r\n                                                                    <FormControl fullWidth sx={{ mr: 0, mt: 3, ml: 1 }}>\r\n                                                                        <Controller\r\n                                                                            name={NewFieldName}\r\n                                                                            control={control}\r\n                                                                            render={({ field: { value } }) => (\r\n                                                                                <Autocomplete\r\n                                                                                    size=\"small\"\r\n                                                                                    value={value}\r\n                                                                                    options={options}\r\n                                                                                    disabled={FieldArray.rules.disabled}\r\n                                                                                    freeSolo={FieldArray.freeSolo}\r\n                                                                                    id=\"controllable-states-demo\"\r\n                                                                                    isOptionEqualToValue={(option:any, value) => { return option.value === value; }}\r\n                                                                                    renderInput={(params) => <TextField {...params} label={FieldArray.label} />}\r\n                                                                                    onChange={(event: any, newValue: any) => {\r\n                                                                                        if (newValue != undefined) {\r\n                                                                                            const defaultValuesNewTemp:{[key:string]:any} = { ...defaultValuesNew }\r\n                                                                                            if(NewFieldName!=NewFieldCode) {\r\n                                                                                                defaultValuesNewTemp[NewFieldName] = newValue.label\r\n                                                                                                defaultValuesNewTemp[NewFieldCode] = newValue.value\r\n                                                                                            }\r\n                                                                                            else    {\r\n                                                                                                defaultValuesNewTemp[NewFieldCode] = newValue.value\r\n                                                                                            }\r\n                                                                                            setDefaultValuesNew(defaultValuesNewTemp)\r\n                                                                                            \r\n                                                                                            //This field will control other fields show or not\r\n                                                                                            const fieldArrayShowTemp:{[key:string]:any} = {}\r\n                                                                                            if (FieldArray.EnableFields && FieldArray.EnableFields != undefined && FieldArray.EnableFields[newValue.value] != undefined) {\r\n                                                                                                for (const fieldItem of FieldArray.EnableFields[newValue.value]) {\r\n                                                                                                    fieldArrayShowTemp[fieldItem] = true\r\n                                                                                                }\r\n                                                                                            }\r\n                                                                                            if (FieldArray.DisableFields && FieldArray.DisableFields != undefined && FieldArray.DisableFields[newValue.value] != undefined) {\r\n                                                                                                for (const fieldItem of FieldArray.DisableFields[newValue.value]) {\r\n                                                                                                    fieldArrayShowTemp[fieldItem] = false\r\n                                                                                                }\r\n                                                                                            }\r\n                                                                                            setFieldArrayShow(fieldArrayShowTemp)\r\n                                                                                        }\r\n                                                                                        else {\r\n                                                                                            const defaultValuesNewTemp:{[key:string]:any} = { ...defaultValuesNew }\r\n                                                                                            defaultValuesNewTemp[NewFieldName] = \"\"\r\n                                                                                            defaultValuesNewTemp[NewFieldCode] = \"\"\r\n                                                                                            setDefaultValuesNew(defaultValuesNewTemp)\r\n                                                                                            setValue(NewFieldName, \"\")\r\n                                                                                            setValue(NewFieldCode, \"\")\r\n                                                                                        }\r\n                                                                                    }}\r\n                                                                                />\r\n                                                                            )}\r\n                                                                        />\r\n                                                                        {FieldArray.helptext && FieldArray.helptext.length>12 && (\r\n                                                                            <FormHelperText>\r\n                                                                                <Tooltip    \r\n                                                                                        title={<Fragment>{FieldArray.helptext}</Fragment>} \r\n                                                                                        PopperProps={{\r\n                                                                                            modifiers: [\r\n                                                                                              {\r\n                                                                                                name: 'offset',\r\n                                                                                                options: {\r\n                                                                                                  offset: [0, 0], // [horizontal, vertical] offset. Set it to 0 to reduce the gap.\r\n                                                                                                },\r\n                                                                                              },\r\n                                                                                            ],\r\n                                                                                          }}\r\n                                                                                >\r\n                                                                                    <IconButton style={{ padding: 0, margin: '0px 0px 0px 5px'}}>\r\n                                                                                        <HelpIcon />\r\n                                                                                    </IconButton>\r\n                                                                                </Tooltip>\r\n                                                                                {FieldArray.helptext.substring(0,FieldArray.rules.sm==12?56:(FieldArray.rules.sm==6?24:12))}...\r\n                                                                            </FormHelperText>\r\n                                                                        )}\r\n                                                                        {FieldArray.helptext && FieldArray.helptext.length<=12 && (\r\n                                                                            <FormHelperText>\r\n                                                                                {FieldArray.helptext}\r\n                                                                            </FormHelperText>\r\n                                                                        )}\r\n                                                                        {fieldError && fieldError.message && (\r\n                                                                            <FormHelperText sx={{ color: 'error.main' }}>\r\n                                                                                {fieldError.message as string}\r\n                                                                            </FormHelperText>\r\n                                                                        )}\r\n                                                                    </FormControl>\r\n                                                                </Grid>\r\n                                                            )\r\n                                                        }\r\n                                                        else if (isReadonlyChildRow == false && (FieldArray.show || fieldArrayShow[NewFieldName]) && FieldArray.type == \"jumpwindow\") {\r\n                                                            const NewFieldCode = \"ChildTable____\" + i + \"____\" + FieldArray.code\r\n                                                            if(NewFieldName!=NewFieldCode) {\r\n                                                                if(defaultValuesNew[NewFieldCode]!=\"\" && defaultValuesNew[NewFieldCode]!=undefined && defaultValuesNew[NewFieldName]==undefined && FieldArray && FieldArray.options && FieldArray.options.length>0 ) {\r\n                                                                    FieldArray.options.map((ItemValue: any) => {\r\n                                                                        if(ItemValue.value==defaultValuesNew[NewFieldCode]) {\r\n                                                                            setValue(NewFieldName, ItemValue.label)\r\n                                                                            setValue(NewFieldCode, ItemValue.value)\r\n                                                                        }\r\n                                                                    })\r\n                                                                }\r\n                                                                if(defaultValuesNew[NewFieldCode]!=\"\" && defaultValuesNew[NewFieldCode]!=undefined && defaultValuesNew[NewFieldName]!=undefined)  {\r\n                                                                    setValue(NewFieldName, defaultValuesNew[NewFieldName])\r\n                                                                }\r\n                                                                if(defaultValuesNew[NewFieldName]==undefined && defaultValuesNew[NewFieldCode]==undefined)  {\r\n                                                                    setValue(NewFieldName, \"\")\r\n                                                                    setValue(NewFieldCode, \"\")\r\n                                                                }\r\n                                                            }\r\n\r\n                                                            if(defaultValuesNew[NewFieldCode]==undefined)  {\r\n                                                                setValue(NewFieldCode, \"\")\r\n                                                            }\r\n                                                            else {                                                        \r\n                                                                setValue(NewFieldCode, defaultValuesNew[NewFieldCode])\r\n                                                            }\r\n\r\n                                                            return (\r\n                                                                <Grid item xs={FieldArray.rules.xs} sm={FieldArray.rules.sm} key={\"AllFields_\" + FieldArray_index}>\r\n                                                                    <FormControl fullWidth sx={{ mr: 0, mt: 3, ml: 1 }}>\r\n                                                                        <Controller\r\n                                                                            name={NewFieldName}\r\n                                                                            control={control}\r\n                                                                            render={({ field: { value, onChange } }) => (\r\n                                                                                <Fragment>\r\n                                                                                    <TextField\r\n                                                                                        size='small'\r\n                                                                                        disabled={FieldArray.rules.disabled}\r\n                                                                                        value={value}\r\n                                                                                        label={FieldArray.label}\r\n                                                                                        type={FieldArray.type}\r\n                                                                                        InputProps={FieldArray.inputProps ? FieldArray.inputProps : {}}\r\n                                                                                        onChange={(e) => {\r\n                                                                                            onChange(e);\r\n                                                                                            const defaultValuesNewTemp:{[key:string]:any} = { ...defaultValuesNew }\r\n                                                                                            defaultValuesNewTemp[NewFieldName] = e.target.value\r\n                                                                                            setDefaultValuesNew(defaultValuesNewTemp)\r\n                                                                                        }}\r\n                                                                                        onSelect={(event: FocusEvent<HTMLInputElement>) => {\r\n                                                                                            event.target.blur();\r\n                                                                                            const jumpWindowIsShowTemp:{[key:string]:any} = { ...jumpWindowIsShow }\r\n                                                                                            jumpWindowIsShowTemp[NewFieldName] = true\r\n                                                                                            setJumpWindowIsShow(jumpWindowIsShowTemp)\r\n                                                                                        }}\r\n                                                                                        placeholder={FieldArray.placeholder}\r\n                                                                                        error={Boolean(errors[NewFieldName])}\r\n                                                                                    />\r\n                                                                                    <Dialog\r\n                                                                                        fullWidth\r\n                                                                                        open={jumpWindowIsShow[NewFieldName]==true?true:false}\r\n                                                                                        scroll='body'\r\n                                                                                        maxWidth='md'\r\n                                                                                        onClose={()=>handleDialogWindowClose()}\r\n                                                                                        onBackdropClick={()=>handleDialogWindowClose()}\r\n                                                                                        TransitionComponent={Transition}\r\n                                                                                    >\r\n                                                                                        <DialogContent\r\n                                                                                        sx={{\r\n                                                                                            pt: { xs: 8, sm: 12.5 },\r\n                                                                                            pr: { xs: 5, sm: 12 },\r\n                                                                                            pb: { xs: 5, sm: 9.5 },\r\n                                                                                            pl: { xs: 4, sm: 11 },\r\n                                                                                            position: 'relative'\r\n                                                                                        }}\r\n                                                                                        >\r\n                                                                                        <IconButton size='small' onClick={()=>handleDialogWindowClose()} sx={{ position: 'absolute', right: '1rem', top: '1rem' }}>\r\n                                                                                            <Icon icon='mdi:close' />\r\n                                                                                        </IconButton>\r\n                                                                                        <Box sx={{ mb: 8, textAlign: 'center' }}>\r\n                                                                                            <Typography variant='h5' sx={{ mb: 3 }}>{FieldArray.jumpWindowTitle}</Typography>\r\n                                                                                            <Typography variant='body2'>{FieldArray.jumpWindowSubTitle}.</Typography>\r\n                                                                                        </Box>\r\n                                                                                        <Box sx={{ display: 'flex', flexWrap: { xs: 'wrap', md: 'nowrap' } }}>\r\n                                                                                            <TabContext value={activeTab}>\r\n                                                                                            <TabPanel value='detailsTab' sx={{ flexGrow: 1 }}>\r\n                                                                                                <IndexJumpDialogWindow handleDialogWindowCloseWithParam={handleDialogWindowCloseWithParam} NewFieldName={NewFieldName} NewFieldCode={NewFieldCode} FieldArray={FieldArray} />\r\n                                                                                            </TabPanel>\r\n                                                                                            </TabContext>\r\n                                                                                        </Box>\r\n                                                                                        </DialogContent>\r\n                                                                                    </Dialog>\r\n                                                                                </Fragment>\r\n                                                                            )}\r\n                                                                        />\r\n                                                                        {FieldArray.helptext && FieldArray.helptext.length>12 && (\r\n                                                                            <FormHelperText>\r\n                                                                                <Tooltip    \r\n                                                                                        title={<Fragment>{FieldArray.helptext}</Fragment>} \r\n                                                                                        PopperProps={{\r\n                                                                                            modifiers: [\r\n                                                                                              {\r\n                                                                                                name: 'offset',\r\n                                                                                                options: {\r\n                                                                                                  offset: [0, 0], // [horizontal, vertical] offset. Set it to 0 to reduce the gap.\r\n                                                                                                },\r\n                                                                                              },\r\n                                                                                            ],\r\n                                                                                          }}\r\n                                                                                >\r\n                                                                                    <IconButton style={{ padding: 0, margin: '0px 0px 0px 5px'}}>\r\n                                                                                        <HelpIcon />\r\n                                                                                    </IconButton>\r\n                                                                                </Tooltip>\r\n                                                                                {FieldArray.helptext.substring(0,FieldArray.rules.sm==12?56:(FieldArray.rules.sm==6?24:12))}...\r\n                                                                            </FormHelperText>\r\n                                                                        )}\r\n                                                                        {FieldArray.helptext && FieldArray.helptext.length<=12 && (\r\n                                                                            <FormHelperText>\r\n                                                                                {FieldArray.helptext}\r\n                                                                            </FormHelperText>\r\n                                                                        )}\r\n                                                                        {fieldError && fieldError.message && (\r\n                                                                            <FormHelperText sx={{ color: 'error.main' }}>\r\n                                                                                {fieldError.message as string}\r\n                                                                            </FormHelperText>\r\n                                                                        )}\r\n                                                                    </FormControl>\r\n                                                                </Grid>\r\n                                                            )\r\n                                                        }\r\n\r\n                                                    })}\r\n\r\n                                                </Grid>\r\n                                                {addEditStructInfo2.childtable && addEditStructInfo2.childtable.Delete ?\r\n                                                <ChildTableRowAction>\r\n                                                    <IconButton size='small' onClick={(event: SyntheticEvent)=>deleteChildTableItem(event, i)}>\r\n                                                        <Icon icon='mdi:close' fontSize={20} />\r\n                                                    </IconButton>\r\n                                                </ChildTableRowAction>\r\n                                                :''}\r\n                                            </RepeatingContent>\r\n                                            </Grid>\r\n                                        </Tag>\r\n                                        )\r\n                                    }}\r\n                                    </Repeater>\r\n                                    \r\n                                    {addEditStructInfo2.childtable && addEditStructInfo2.childtable.Add ?\r\n                                    <Grid container sx={{ mt: 4 }}>\r\n                                        <Grid item xs={12} sx={{ px: 0 }}>\r\n                                            <Button\r\n                                            size='small'\r\n                                            variant='contained'\r\n                                            startIcon={<Icon icon='mdi:plus' fontSize={20} />}\r\n                                            onClick={() => setChildItemCounter(childItemCounter + 1)}\r\n                                            >\r\n                                            {addEditStructInfo2.childtable.submittext}\r\n                                            </Button>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                    : ''}\r\n                                </RepeaterWrapper>\r\n                            </Card>\r\n                            : ''\r\n                        }\r\n\r\n                        {singleModelCounter > 0 && FieldShowStatus == 1 && (\r\n                            <Grid item xs={12} sm={12} container sx={{ pt: 4, ml: 1 }}>\r\n                                <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                                    <Typography variant='body2' sx={{ mb: 0 }}>\r\n                                        Total: {fieldIdValue+1} / {singleModelCounter}\r\n                                    </Typography>\r\n                                </Box>\r\n                            </Grid>\r\n                        )}\r\n\r\n                        {((addEditStructInfo2.submittext && addEditStructInfo2.submittext) || (addEditStructInfo2.canceltext && addEditStructInfo2.canceltext)) && ((singleModelCounter == (fieldIdValue+1) ) || FieldShowStatus == 2) ?\r\n                            <Grid item xs={12} sm={12} container justifyContent=\"space-around\" sx={{ pt: 4 }}>\r\n                                <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                                    {addEditStructInfo2.submittext && addEditStructInfo2.submittext != \"\" ?\r\n                                        <Tooltip title=\"Alt+s\">\r\n                                            <Button size={componentsize} disabled={isSubmitLoading} type='submit' variant='contained' sx={{ mr: 3 }}>\r\n                                                {isSubmitLoading ? (\r\n                                                    <CircularProgress\r\n                                                        sx={{\r\n                                                            color: 'common.white',\r\n                                                            width: '20px !important',\r\n                                                            height: '20px !important',\r\n                                                            mr: (theme: any) => theme.spacing(2)\r\n                                                        }}\r\n                                                    />\r\n                                                ) : null}\r\n                                                {addEditStructInfo2.submittext}\r\n                                            </Button>\r\n                                        </Tooltip>\r\n                                        : ''\r\n                                    }\r\n                                    {addEditStructInfo2.canceltext && addEditStructInfo2.canceltext != \"\" ?\r\n                                        <Tooltip title=\"Alt+c\">\r\n                                            <Button size='small' disabled={isSubmitLoading} variant='outlined' color='secondary' onClick={handleClose}>\r\n                                                {addEditStructInfo2.canceltext}\r\n                                            </Button>\r\n                                        </Tooltip>\r\n                                        : ''\r\n                                    }\r\n                                </Box>\r\n                            </Grid>\r\n                            : \r\n                            <Grid item xs={12} sm={12} container justifyContent=\"space-around\" sx={{ pt: 4 }}>\r\n                                <Box sx={{ display: 'flex', alignItems: 'center', height: '20px' }}>\r\n                                </Box>\r\n                            </Grid>\r\n                        }\r\n                    </form>\r\n                )}\r\n            </Grid>\r\n            \r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default AddOrEditTableCore\r\n","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\Enginee\\ImagesPreview.tsx",["3384","3385"],[],"// ** React Imports\r\nimport { forwardRef, ReactElement, Ref, Fragment, useState, useEffect, SetStateAction } from 'react'\r\n\r\n// ** MUI Imports\r\nimport Box from '@mui/material/Box'\r\nimport Badge from '@mui/material/Badge'\r\nimport IconButton from '@mui/material/IconButton'\r\nimport Dialog from '@mui/material/Dialog'\r\nimport DialogContent from '@mui/material/DialogContent'\r\nimport Fade, { FadeProps } from '@mui/material/Fade'\r\n\r\n//PDF\r\n//import { pdfjs, Document, Page } from 'react-pdf';\r\n//import 'react-pdf/dist/esm/Page/AnnotationLayer.css';\r\n//import 'react-pdf/dist/esm/Page/TextLayer.css';\r\n\r\n//EXCEL\r\nimport {OutTable, ExcelRenderer} from 'react-excel-renderer';\r\n\r\nimport dynamic from 'next/dynamic';\r\n\r\ntype FileViewerProps = {\r\n  fileType: string\r\n  filePath: string\r\n  className: string\r\n};\r\n\r\nconst FileViewer: React.ComponentType<FileViewerProps> = dynamic(\r\n  () => import('react-file-viewer') as Promise<React.ComponentType<FileViewerProps>>,\r\n  { ssr: false }\r\n);\r\n\r\n\r\n\r\n// Set up pdf.js worker\r\n//pdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\r\n\r\n// ** Icon Imports\r\nimport Icon from 'src/@core/components/icon'\r\nimport styles from './components/Excel2007.module.css';\r\n\r\nconst Transition = forwardRef(function Transition(\r\n    props: FadeProps & { children?: ReactElement<any, any> },\r\n    ref: Ref<unknown>\r\n  ) {\r\n    return <Fade ref={ref} {...props} />\r\n  })\r\n\r\n// ** Third Party Components\r\nimport clsx from 'clsx'\r\nimport { useKeenSlider } from 'keen-slider/react'\r\n\r\nfunction ExcelViewer({ fileUrl }: { fileUrl: string; } ) {\r\n  const [rows, setRows] = useState([]);\r\n  const [cols, setCols] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchExcel = async () => {\r\n      try {\r\n        const response = await fetch(fileUrl);\r\n        if (!response.ok) {\r\n          throw new Error(\"Network response was not ok\");\r\n        }\r\n        \r\n        const blob = await response.blob();\r\n        \r\n        const reader = new FileReader();\r\n        reader.onload = () => {\r\n          ExcelRenderer(blob, (err: any, resp: { cols: SetStateAction<never[]>; rows: SetStateAction<never[]> }) => {\r\n            if (err) {\r\n              console.error(err);\r\n            } else {\r\n              console.log(\"resp.cols\", resp.cols)\r\n              const tempCols: SetStateAction<any[]> = []\r\n              tempCols.push({name: '', key: 0})\r\n              \r\n              // @ts-ignore\r\n              resp && resp.cols && resp.cols.map((Item: {'name': string, 'key': number}, Index: number)=>{\r\n                if(Item.name) {\r\n                  tempCols.push({name: Item.name, key: Index+1})\r\n                }\r\n              })\r\n              \r\n              // @ts-ignore\r\n              setCols(tempCols);\r\n              \r\n              // @ts-ignore\r\n              setRows(resp.rows);\r\n            }\r\n          });\r\n        };\r\n        \r\n        reader.onerror = () => {\r\n          throw new Error(\"Failed to read the blob data\");\r\n        };\r\n        \r\n        reader.readAsBinaryString(blob);\r\n      } catch (error) {\r\n        console.error(\"Error fetching or parsing the Excel file:\", error);\r\n      }\r\n    };\r\n\r\n    fetchExcel();\r\n  }, [fileUrl]);\r\n\r\n  return (\r\n      <div>\r\n        {rows && cols && (\r\n          <OutTable\r\n            data={rows}\r\n            columns={cols}\r\n            tableClassName={styles.ExcelTable2007}\r\n            tableHeaderRowClass={styles.heading}\r\n          />\r\n        )}\r\n      </div>\r\n  );\r\n}\r\n\r\ninterface ImagesPreviewType {\r\n    open: boolean\r\n    imagesList: string[]\r\n    imagesType: string[]\r\n    toggleImagesPreviewDrawer: () => void\r\n  }\r\n\r\nconst ImagesPreview = (props: ImagesPreviewType) => {\r\n  // ** Props\r\n  const { open, imagesList, imagesType, toggleImagesPreviewDrawer } = props\r\n  \r\n  const handleClose = () => {\r\n    toggleImagesPreviewDrawer()\r\n  }\r\n\r\n  //const [numPages, setNumPages] = useState<number>(0)    \r\n  //function onDocumentLoadSuccess({ numPages }: { numPages: number; } ) {\r\n  //    setNumPages(numPages);\r\n  //}\r\n\r\n  // ** States\r\n  const [loaded, setLoaded] = useState<boolean>(false)\r\n  const [currentSlide, setCurrentSlide] = useState<number>(0)\r\n\r\n  // ** Hook\r\n  const [sliderRef, instanceRef] = useKeenSlider<HTMLDivElement>({\r\n    rtl: true,\r\n    slideChanged(slider) {\r\n      setCurrentSlide(slider.track.details.rel)\r\n    },\r\n    created() {\r\n      setLoaded(true)\r\n    }\r\n  })\r\n\r\n  return (\r\n    <Dialog\r\n        fullWidth\r\n        open={open}\r\n        maxWidth='md'\r\n        scroll='body'\r\n        onClose={handleClose}\r\n        TransitionComponent={Transition}\r\n      >\r\n        <DialogContent sx={{ pb: 8, px: { xs: 8, sm: 8 }, pt: { xs: 8, sm: 12.5 }, position: 'relative' }}>\r\n          <IconButton\r\n            size='small'\r\n            onClick={handleClose}\r\n            sx={{ position: 'absolute', right: '0.3rem', top: '0.3rem' }}\r\n          >\r\n            <Icon icon='mdi:close' />\r\n          </IconButton>\r\n          <Fragment>\r\n            <Box className='navigation-wrapper'>\r\n                <Box ref={sliderRef} className='keen-slider'>\r\n                {imagesList && imagesList.length>0 && imagesList.map((Url: string, UrlIndex: number)=>{\r\n                  switch(imagesType[UrlIndex]) {\r\n                    case 'image':\r\n                      \r\n                    return (\r\n                          <Box className='keen-slider__slide' key={UrlIndex}>\r\n                              <img src={Url} style={{'width':'100%', 'borderRadius': '4px'}}/>\r\n                          </Box>\r\n                      )\r\n                    case 'pdf':\r\n                      \r\n                      return (\r\n                          <Fragment key={UrlIndex}>\r\n                          </Fragment>\r\n                      );\r\n                    case 'Word':\r\n\r\n                      return (\r\n                        <div style={{ width: '100%', color:'black'}} key={UrlIndex}>\r\n                          <FileViewer fileType={'docx'} filePath={Url} className={styles.ExcelTable2007}/>\r\n                        </div>\r\n                      )\r\n                    case 'Excel':\r\n                      \r\n                      return <ExcelViewer fileUrl={Url} />\r\n                    default:\r\n                      \r\n                      return (\r\n                          <Box className='keen-slider__slide' key={UrlIndex}>\r\n                              <img src={Url} style={{'width':'100%', 'borderRadius': '4px'}}/>\r\n                          </Box>\r\n                      )\r\n                  }                    \r\n                })}\r\n                </Box>\r\n                {imagesList && imagesList[0]==\"image\" && loaded && instanceRef.current && (\r\n                  <Fragment>\r\n                      <Icon\r\n                      icon='mdi:chevron-left'\r\n                      className={clsx('arrow arrow-left', {\r\n                          'arrow-disabled': currentSlide === 0\r\n                      })}\r\n                      onClick={(e: any) => { e.stopPropagation(); instanceRef.current && instanceRef.current.prev(); }}\r\n                      />\r\n                      <Icon\r\n                      icon='mdi:chevron-right'\r\n                      className={clsx('arrow arrow-right', {\r\n                          'arrow-disabled': currentSlide === instanceRef.current.track.details.slides.length - 1\r\n                      })}\r\n                      onClick={(e: any) => { e.stopPropagation(); instanceRef.current && instanceRef.current.next(); }}\r\n                      />\r\n                  </Fragment>\r\n                )}\r\n            </Box>\r\n            {imagesList && imagesList[0]==\"image\" && loaded && instanceRef.current && (\r\n                <Box className='swiper-dots'>\r\n                {[...Array(instanceRef.current.track.details.slides.length).keys()].map(idx => {\r\n                    \r\n                    return (\r\n                      <Badge\r\n                          key={idx}\r\n                          variant='dot'\r\n                          component='div'\r\n                          className={clsx({\r\n                          active: currentSlide === idx\r\n                          })}\r\n                          onClick={() => {\r\n                            if (instanceRef.current) {\r\n                              instanceRef.current.moveToIdx(idx);\r\n                            }\r\n                          }}\r\n                          \r\n                      ></Badge>\r\n                    )\r\n                })}\r\n                </Box>\r\n            )}\r\n            </Fragment>\r\n        </DialogContent>\r\n      </Dialog >\r\n    \r\n  )\r\n}\r\n\r\nexport default ImagesPreview\r\n","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\Enginee\\index.tsx",["3386","3387"],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\Enginee\\IndexBottomFlowNode.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\Enginee\\IndexBottomFlowNodeDot.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\Enginee\\IndexJumpDialogWindow.tsx",["3388"],[],"import React, {Fragment, useState, ChangeEvent, useEffect} from 'react';\r\nimport { TreeView, TreeItem } from '@mui/lab';\r\n\r\nimport TextField from '@mui/material/TextField'\r\n\r\n// ** Config\r\nimport authConfig from 'src/configs/auth'\r\nimport axios from 'axios'\r\n\r\ninterface Node {\r\n  id: string;\r\n  name: string;\r\n  children?: Node[];\r\n}\r\n\r\ninterface IndexJumpDialogWindowType {\r\n    handleDialogWindowCloseWithParam: (field: string, value: string, fieldCode: string, valueCode: string) => void\r\n    NewFieldName: string\r\n    NewFieldCode: string\r\n    FieldArray: any\r\n  }\r\n\r\nconst IndexJumpDialogWindow = ({handleDialogWindowCloseWithParam, NewFieldName, NewFieldCode, FieldArray}: IndexJumpDialogWindowType) => {\r\n  const [textFieldValue, setTextFieldValue] = useState('');\r\n  const [data, setData] = useState([]);\r\n\r\n  const handleButtonClick = (item: Node) =>                     {\r\n    if(String(item.id).length==16) {\r\n        handleDialogWindowCloseWithParam(NewFieldName, item.name, NewFieldCode, item.id)\r\n    }\r\n    console.log('Button Clicked for Item ID:', item, item.id.length);\r\n  };\r\n\r\n  const renderTree = (nodes: Node) => (\r\n    <TreeItem key={String(nodes.id)} nodeId={String(nodes.id)} label={nodes.name} onClick={()=>{handleButtonClick(nodes)}}>\r\n      {Array.isArray(nodes.children)\r\n        ? nodes.children.map((node) => renderTree(node))\r\n        : null}\r\n    </TreeItem>\r\n  );\r\n  \r\n  //console.log(\"view_default--------------------------------\", id, action)\r\n  const storedToken = window.localStorage.getItem(authConfig.storageTokenKeyName)!\r\n\r\n  useEffect(() => {\r\n    const backEndApi = \"tree_fixedasset_classification.php\"\r\n    axios\r\n    .get(authConfig.backEndApiHost + backEndApi, { headers: { Authorization: storedToken }, params: { textFieldValue }})\r\n    .then(res => {\r\n        setData(res.data)\r\n        console.log(\"res.data\", res.data)\r\n    })\r\n    .catch(() => {\r\n        console.log(\"axios.get editUrl return\")\r\n    })\r\n  }, [textFieldValue])\r\n\r\n\r\n  const handleTextFieldChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    const newValue = event.target.value;\r\n    setTextFieldValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n        <TextField fullWidth sx={{ mb: 4 }} label={FieldArray.jumpWindowSearchFiledText} size='small' placeholder={FieldArray.jumpWindowSearchFiledPlaceholder} onChange={handleTextFieldChange}/>\r\n        <TreeView    \r\n        sx={{ minHeight: 240 }}\r\n        defaultExpandIcon={<span>+</span>}\r\n        defaultCollapseIcon={<span>-</span>}\r\n        >\r\n        {data && data.length>0 ?\r\n            data.map((node: Node) => renderTree(node))\r\n            : ''\r\n        }\r\n        </TreeView>\r\n    </Fragment>\r\n  );\r\n\r\n};\r\n\r\nexport default IndexJumpDialogWindow;\r\n","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\Enginee\\IndexTableHeader.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\Enginee\\PickersCustomInput.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\Enginee\\SoulAssessmentModel.tsx",["3389"],[],"import { useState, useEffect, Fragment } from 'react'\r\n\r\nimport SoulAssessmentModelMiddleSchool from 'src/views/Enginee/SoulAssessmentModelMiddleSchool'\r\nimport SoulAssessmentModelSCL90 from 'src/views/Enginee/SoulAssessmentModelSCL90'\r\nimport SoulAssessmentModelCourseInterest from 'src/views/Enginee/SoulAssessmentModelCourseInterest'\r\n\r\nimport authConfig from 'src/configs/auth'\r\nimport axios from 'axios'\r\n\r\ninterface Props {\r\n  dataOriginal: any\r\n  modelOriginal: string\r\n  id: string\r\n  backEndApi: string\r\n}\r\n\r\nconst SoulAssessmentModel = ({ dataOriginal, modelOriginal, id, backEndApi }: Props) => {\r\n  // ** Hook\r\n\r\n  console.log(\"dataOriginal\", dataOriginal)\r\n\r\n  const [data, setData] = useState<any>(dataOriginal)\r\n  const [model, setModel] = useState<any>(modelOriginal)\r\n  const [printModel, setPrintModel] = useState<string>(\"print\")\r\n\r\n  useEffect(() => {\r\n    //打印页面时,需要单独再获取一次API的内容\r\n    //const backEndApi = 'apps/apps_378.php'\r\n    const action = 'view_default'\r\n    const storedToken = window.localStorage.getItem(authConfig.storageTokenKeyName)!\r\n    if (id && id.length > 32 && data == null) {\r\n      axios\r\n        .get(authConfig.backEndApiHost + backEndApi, { headers: { Authorization: storedToken+\"::::\" }, params: { action, id, isMobileData: false } })\r\n        .then(res => {\r\n          const data = res.data\r\n          if(data && data.model) {\r\n            setData(data.data)\r\n            setModel(data.model)\r\n            setPrintModel(\"\")\r\n            console.log(\"data.model\", data, model);\r\n          }\r\n        })\r\n        .catch(() => {\r\n          console.log(\"axios.get editUrl return\")\r\n        })\r\n    }\r\n  }, [id])\r\n\r\n  return (\r\n    <Fragment>\r\n        {data && data['测评名称'] == \"中学生心理健康量表(MSSMHS)\" && ( \r\n            <SoulAssessmentModelMiddleSchool data={data} id={id} backEndApi={backEndApi} printModel={printModel} /> \r\n        )}\r\n        {data && data['测评名称'] == \"中小学生心理健康量表(MHT)\" && ( \r\n            <SoulAssessmentModelMiddleSchool data={data} id={id} backEndApi={backEndApi} printModel={printModel} /> \r\n        )}\r\n        {data && data['测评名称'] == \"儿童焦虑性情绪障碍筛查表(SCARED)\" && ( \r\n            <SoulAssessmentModelMiddleSchool data={data} id={id} backEndApi={backEndApi} printModel={printModel} /> \r\n        )}\r\n        {data && data['测评名称'] == \"症状自评量表(SCL-90)\" && ( \r\n            <SoulAssessmentModelSCL90 data={data} id={id} backEndApi={backEndApi} printModel={printModel} /> \r\n        )}\r\n        {data && data['测评名称'] == \"中学生学科兴趣测评\" && ( \r\n            <SoulAssessmentModelCourseInterest data={data} id={id} backEndApi={backEndApi} printModel={printModel} /> \r\n        )}\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default SoulAssessmentModel\r\n","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\Enginee\\SoulAssessmentModelCourseInterest.tsx",["3390","3391","3392"],[],"import { useEffect, useRef } from 'react'\r\n\r\n// ** MUI Imports\r\nimport Button from '@mui/material/Button'\r\nimport Grid from '@mui/material/Grid'\r\nimport Card from '@mui/material/Card'\r\nimport Table from '@mui/material/Table'\r\nimport Divider from '@mui/material/Divider'\r\nimport TableRow from '@mui/material/TableRow'\r\nimport TableHead from '@mui/material/TableHead'\r\nimport TableBody from '@mui/material/TableBody'\r\nimport Typography from '@mui/material/Typography'\r\nimport Box from '@mui/material/Box'\r\nimport CardContent from '@mui/material/CardContent'\r\nimport { styled, useTheme } from '@mui/material/styles'\r\nimport TableContainer from '@mui/material/TableContainer'\r\nimport TableCell, { TableCellBaseProps } from '@mui/material/TableCell'\r\n\r\nimport ReactApexcharts from 'src/@core/components/react-apexcharts'\r\n\r\nimport { ApexOptions } from 'apexcharts'\r\nimport ReactMarkdown from 'react-markdown'\r\nimport {isMobile} from 'src/configs/functions'\r\n\r\nimport Link from 'next/link'\r\n\r\ninterface Props {\r\n  data: any\r\n  id: string\r\n  backEndApi: string\r\n  printModel: string\r\n}\r\n\r\nconst MUITableCell = styled(TableCell)<TableCellBaseProps>(({ theme }) => ({\r\n  borderBottom: 0,\r\n  paddingLeft: '0 !important',\r\n  paddingRight: '0 !important',\r\n  paddingTop: `${theme.spacing(1)} !important`,\r\n  paddingBottom: `${theme.spacing(1)} !important`\r\n}))\r\n\r\n\r\nconst SoulAssessmentModelCourseInterest = ({ data, id, backEndApi, printModel }: Props) => {\r\n  // ** Hook\r\n  const theme = useTheme()\r\n\r\n  const isMobileData = isMobile()\r\n\r\n  const series = data && data['测评分析'] ? [{name: '心理测评', data: Object.values(data['测评分析']) as number[]}] : [{name: '心理测评', data: []}]\r\n\r\n  const options: ApexOptions = {\r\n    chart: {\r\n      parentHeightOffset: 0,\r\n      toolbar: { show: false }\r\n    },\r\n    colors: [theme.palette.primary.main, theme.palette.info.main],\r\n    plotOptions: {\r\n      radar: {\r\n        size: 110,\r\n        polygons: {\r\n          connectorColors: theme.palette.divider,\r\n          strokeColors: [\r\n            theme.palette.divider,\r\n            'transparent',\r\n            'transparent',\r\n            'transparent',\r\n            'transparent',\r\n            'transparent'\r\n          ]\r\n        }\r\n      }\r\n    },\r\n    fill: {\r\n      type: 'gradient',\r\n      gradient: {\r\n        shade: 'dark',\r\n        gradientToColors: [theme.palette.primary.main, theme.palette.info.main],\r\n        shadeIntensity: 1,\r\n        type: 'vertical',\r\n        opacityFrom: 1,\r\n        opacityTo: 0.9,\r\n        stops: [0, 100]\r\n      }\r\n    },\r\n    labels: data && data['测评分析'] ? Object.keys(data['测评分析']) as string[] : [],\r\n    markers: { size: 0 },\r\n    legend: {\r\n      labels: { colors: theme.palette.text.secondary }\r\n    },\r\n    grid: { show: false },\r\n    xaxis: {\r\n      labels: {\r\n        show: true,\r\n        style: {\r\n          fontSize: '14px',\r\n          colors: [\r\n            theme.palette.text.disabled,\r\n            theme.palette.text.disabled,\r\n            theme.palette.text.disabled,\r\n            theme.palette.text.disabled,\r\n            theme.palette.text.disabled,\r\n            theme.palette.text.disabled\r\n          ]\r\n        }\r\n      }\r\n    },\r\n    yaxis: { show: false }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if ( series && series[0] && series[0].data && series[0].data.length > 0 && id && id.length > 32 && data && printModel == \"\" ) {\r\n      setTimeout(() => {\r\n        window.print()\r\n      }, 3000)\r\n    }\r\n  }, [id, data, series])\r\n\r\n  const chartRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (chartRef.current) {\r\n      const apexChart = chartRef.current as any;\r\n      if(series && series[0] && series[0].data && series[0].data.length > 0 && apexChart && apexChart.chart) {\r\n        apexChart.chart.render();\r\n      }\r\n    }\r\n  }, [series, options]);\r\n\r\n  if (data) {\r\n    return (\r\n      <Card>\r\n        <CardContent>\r\n          <Grid container>\r\n            <Grid item sm={6} xs={12} sx={{ mb: { sm: 0, xs: 4 } }}>\r\n              <Box sx={{ display: 'flex', flexDirection: 'column' }}>\r\n                <Box sx={{ mb: 6, display: 'flex', alignItems: 'center' }}>\r\n                  <Typography\r\n                    variant='h6'\r\n                    sx={{ fontWeight: 600, lineHeight: 'normal', textTransform: 'uppercase' }}\r\n                  >\r\n                    {data['单位名称']}\r\n                  </Typography>\r\n                </Box>\r\n                <div>\r\n                  <div style={{ display: 'flex', flexDirection: 'row', marginBottom: '0.5rem' }}>\r\n                      <Typography variant='body2' sx={{ marginRight: '1rem' }}>学号:</Typography>\r\n                      <Typography variant='body2' sx={{ marginRight: '1rem' }}>{data['用户信息']['学号']}</Typography>\r\n                  </div>\r\n                  <div style={{ display: 'flex', flexDirection: 'row', marginBottom: '0.5rem' }}>\r\n                      <Typography variant='body2' sx={{ marginRight: '1rem' }}>姓名:</Typography>\r\n                      <Typography variant='body2' sx={{ marginRight: '1rem' }}>{data['用户信息']['姓名']}</Typography>\r\n                  </div>\r\n                  <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                      <Typography variant='body2' sx={{ marginRight: '1rem' }}>班级:</Typography>\r\n                      <Typography variant='body2' sx={{ marginRight: '1rem' }}>{data['用户信息']['班级']}</Typography>\r\n                  </div>\r\n                </div>\r\n              </Box>\r\n            </Grid>\r\n            <Grid item sm={6} xs={12}>\r\n              <Box sx={{ display: 'flex', justifyContent: { xs: 'flex-start', sm: 'flex-end' } }}>\r\n                <Table sx={{ maxWidth: '400px' }}>\r\n                  <TableBody>\r\n                    <TableRow>\r\n                      <MUITableCell colSpan={2}>\r\n                        <Typography variant='h6'>{data['测评名称']}</Typography>\r\n                      </MUITableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                      <MUITableCell>\r\n                        <Typography variant='body2'>测评时间:</Typography>\r\n                      </MUITableCell>\r\n                      <MUITableCell>\r\n                        <Typography variant='body2' sx={{ fontWeight: 600 }}>\r\n                        {data['用户信息']['测评时间']}\r\n                        </Typography>\r\n                      </MUITableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                      <MUITableCell>\r\n                        <Typography variant='body2'>测评用时:</Typography>\r\n                      </MUITableCell>\r\n                      <MUITableCell>\r\n                        <Typography variant='body2' sx={{ fontWeight: 600 }}>\r\n                        {data['用户信息']['使用时间']}\r\n                        </Typography>\r\n                      </MUITableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                      <MUITableCell>\r\n                        <Typography variant='body2'>咨询师:</Typography>\r\n                      </MUITableCell>\r\n                      <MUITableCell>\r\n                        <Typography variant='body2' sx={{ fontWeight: 600 }}>\r\n                        {data['用户信息']['咨询师'] ?? '无'}\r\n                        </Typography>\r\n                      </MUITableCell>\r\n                    </TableRow>\r\n                  </TableBody>\r\n                </Table>\r\n              </Box>\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n\r\n        <Divider />\r\n\r\n        <CardContent>\r\n          <Grid container>\r\n            <Grid item xs={12} sm={12} sx={{ mb: 0 }}>\r\n            <Box sx={{ display: 'flex', flexDirection: 'column' }}>\r\n                <Box sx={{ mb: 4, display: 'flex', alignItems: 'center' }}>\r\n                  <Typography variant='h6' sx={{ fontWeight: 400, lineHeight: 'normal' }} >\r\n                    一、测评说明\r\n                  </Typography>\r\n                </Box>\r\n                <Typography variant='body2' sx={{ marginRight: '1rem', whiteSpace: 'pre-line' }}>{data['测评说明']}</Typography>\r\n              </Box>\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n\r\n        <Divider />\r\n\r\n        <CardContent>\r\n          <Grid container>\r\n            <Grid item xs={12} sm={12} sx={{ mb: 0 }}>\r\n            <Box sx={{ display: 'flex', flexDirection: 'column' }}>\r\n                <Box sx={{ mb: 4, display: 'flex', alignItems: 'center' }}>\r\n                  <Typography variant='h6' sx={{ fontWeight: 400, lineHeight: 'normal' }} >\r\n                    二、评分标准\r\n                  </Typography>\r\n                </Box>\r\n                <Typography variant='body2' sx={{ marginRight: '1rem', whiteSpace: 'pre-line' }}>{data['评分标准']}</Typography>\r\n              </Box>\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n\r\n        <Divider />\r\n\r\n        <CardContent>\r\n          <Grid container>\r\n            <Grid item xs={12} sm={12} sx={{ mb: 0 }}>\r\n            <Box sx={{ display: 'flex', flexDirection: 'column' }}>\r\n                <Box sx={{ mb: 4, display: 'flex', alignItems: 'center' }}>\r\n                  <Typography variant='h6' sx={{ fontWeight: 400, lineHeight: 'normal' }} >\r\n                    三、因子分析\r\n                  </Typography>\r\n                </Box>\r\n\r\n                <Grid container spacing={2}>\r\n                  <Grid item xs={12} md={8} sx={{ m: 0, p: 0 }}>\r\n                    <Card>\r\n                      <CardContent sx={{height: '365px'}}>\r\n                        <ReactApexcharts ref={chartRef} type='radar' height={305} series={series} options={options} />\r\n                      </CardContent>\r\n                    </Card>\r\n                  </Grid>\r\n                  <Grid item xs={12} md={4} sx={{ m: 0, p: 0 }}>\r\n                    <Card>\r\n                      <CardContent sx={{height: '365px'}}>\r\n                        <Box sx={{ display: 'flex', flexDirection: 'column' }}>\r\n                            {data && data['测评分析'] && Object.keys(data['测评分析']).map((item: any, index: number)=>{\r\n\r\n                              return (\r\n                                <div key={index} style={{ display: 'flex', flexDirection: 'row', marginBottom: '0.45rem' }}>\r\n                                    <Typography variant='body2' sx={{ marginRight: '1rem', whiteSpace: 'nowrap' }}>{item}:</Typography>\r\n                                    <Typography variant='body2' sx={{ marginRight: '1rem' }}>{data['测评分析'][item]}</Typography>\r\n                                </div>\r\n                              )\r\n                            })}\r\n                        </Box>\r\n                      </CardContent>\r\n                    </Card>\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                {data && data['因子分析'] && data['因子分析'].length > 0 && data['因子分析'].map((item: any, index: number)=>{\r\n\r\n                  return (\r\n                    <TableContainer key={index} sx={{mb: 3}}>\r\n                      <Table>\r\n                        <TableHead>\r\n                          <TableRow>\r\n                            <TableCell colSpan={4}>\r\n                              <Box sx={{ display: 'flex', flexDirection: 'column' }}>\r\n                                <div>\r\n                                  <div style={{ display: 'flex', flexDirection: 'row', marginBottom: '0.5rem' }}>\r\n                                      <Typography sx={{ marginRight: '1rem', whiteSpace: 'nowrap' }}>{index+1} 学科名称:</Typography>\r\n                                      <Typography sx={{ marginRight: '1rem' }}>{item['名称']}</Typography>\r\n                                  </div>\r\n                                  <div style={{ display: 'flex', flexDirection: 'row', marginBottom: '0.5rem' }}>\r\n                                      <Typography variant='body2' sx={{ marginRight: '1rem', whiteSpace: 'nowrap' }}>平均得分:</Typography>\r\n                                      <Typography variant='body2' sx={{ marginRight: '1rem' }}>{item['测评分数']}</Typography>\r\n                                  </div>\r\n                                </div>\r\n                              </Box>\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        </TableHead>\r\n                        <TableHead>\r\n                          <TableRow>\r\n                            <TableCell>项目</TableCell>\r\n                            <TableCell style={{ whiteSpace: 'nowrap' }}>选项</TableCell>\r\n                            <TableCell style={{ whiteSpace: 'nowrap' }}>分值</TableCell>\r\n                          </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                          {item && item['测评明细'] && item['测评明细'].length > 0 && item['测评明细'].map((Ceping: any, IndexCeping: number)=>{\r\n\r\n                            return (\r\n                              <TableRow key={IndexCeping}>\r\n                                <TableCell sx={{width: '70%'}}>{Ceping['测评项目']}</TableCell>\r\n                                <TableCell sx={{width: '15%', whiteSpace: 'nowrap'}}>{Ceping['测评选项']}</TableCell>\r\n                                <TableCell sx={{width: '15%', whiteSpace: 'nowrap'}}>{Ceping['测评分值']}</TableCell>\r\n                              </TableRow>\r\n                            )\r\n                          })}\r\n                          \r\n                        </TableBody>\r\n                      </Table>\r\n                    </TableContainer>\r\n                  )\r\n                })}\r\n              </Box>\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n\r\n        <Divider />\r\n\r\n        <CardContent>\r\n          <Grid container>\r\n            <Grid item xs={12} sm={12} sx={{ mb: 0 }}>\r\n            <Box sx={{ display: 'flex', flexDirection: 'column' }}>\r\n                <Box sx={{ mb: 4, display: 'flex', alignItems: 'center' }}>\r\n                  <Typography variant='h6' sx={{ fontWeight: 400, lineHeight: 'normal' }} >\r\n                    四、人工智能分析\r\n                  </Typography>\r\n                </Box>\r\n\r\n                <Grid container spacing={2}>\r\n                  <Grid item xs={12} sx={{ m: 0, p: 0 }}>\r\n                    <Card>\r\n                      <CardContent>\r\n                        <div style={{ color: 'action.active', fontSize: '0.825rem' }}>\r\n                          <ReactMarkdown>{data['DeepSeek'] ? data['DeepSeek'].replace('\\n', '  \\n') : ''}</ReactMarkdown>\r\n                        </div>\r\n                      </CardContent>\r\n                    </Card>\r\n                  </Grid>\r\n                </Grid>\r\n\r\n              </Box>\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n\r\n        <Divider />\r\n\r\n        <CardContent>\r\n          <Typography variant='body2'>\r\n            <strong>说明：</strong> 此报告前三部分由系统自动生成，第四部分到结尾部分由国产AI大模型生成，报告整体用于参考作用，其并不具备任何法律效力。如果需要具有法律效力的报告，请到国家认可的正规机构，并且在具有相关资格从业医师的协助下做出对应的心理测评工作。\r\n          </Typography>\r\n          <Typography variant='body2'>\r\n            <strong>隐私：</strong> 本系统非常注重用户隐私，不会随意搜集、滥用和外泄用户信息。系统提交给国产大模型的数据，只涉及了测评数据，没有提交用户任何身份信息或是隐私信息给到大模型，请放心使用。\r\n          </Typography>\r\n          {printModel && printModel == \"print\" && isMobileData == false && (\r\n            <Grid container justifyContent=\"flex-end\">\r\n              <Button\r\n                target='_blank'\r\n                sx={{ mb: 3.5 }}\r\n                component={Link}\r\n                color='primary'\r\n                size=\"small\"\r\n                variant='outlined'\r\n                href={`/print/middleschool/${id}____${backEndApi.replace('.php', '').replace('apps/apps_', '')}`}\r\n              >\r\n                {'打印'}\r\n              </Button>\r\n            </Grid>\r\n          )}\r\n        </CardContent>\r\n\r\n      </Card>\r\n    )\r\n  } else {\r\n    return null\r\n  }\r\n}\r\n\r\nexport default SoulAssessmentModelCourseInterest\r\n","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\Enginee\\SoulAssessmentModelMiddleSchool.tsx",["3393","3394","3395"],[],"import { useEffect, useRef } from 'react'\r\n\r\n// ** MUI Imports\r\nimport Button from '@mui/material/Button'\r\nimport Grid from '@mui/material/Grid'\r\nimport Card from '@mui/material/Card'\r\nimport Table from '@mui/material/Table'\r\nimport Divider from '@mui/material/Divider'\r\nimport TableRow from '@mui/material/TableRow'\r\nimport TableHead from '@mui/material/TableHead'\r\nimport TableBody from '@mui/material/TableBody'\r\nimport Typography from '@mui/material/Typography'\r\nimport Box from '@mui/material/Box'\r\nimport CardContent from '@mui/material/CardContent'\r\nimport { styled, useTheme } from '@mui/material/styles'\r\nimport TableContainer from '@mui/material/TableContainer'\r\nimport TableCell, { TableCellBaseProps } from '@mui/material/TableCell'\r\n\r\nimport ReactApexcharts from 'src/@core/components/react-apexcharts'\r\n\r\nimport { ApexOptions } from 'apexcharts'\r\nimport ReactMarkdown from 'react-markdown'\r\nimport {isMobile} from 'src/configs/functions'\r\n\r\nimport Link from 'next/link'\r\n\r\ninterface Props {\r\n  data: any\r\n  id: string\r\n  backEndApi: string\r\n  printModel: string\r\n}\r\n\r\nconst MUITableCell = styled(TableCell)<TableCellBaseProps>(({ theme }) => ({\r\n  borderBottom: 0,\r\n  paddingLeft: '0 !important',\r\n  paddingRight: '0 !important',\r\n  paddingTop: `${theme.spacing(1)} !important`,\r\n  paddingBottom: `${theme.spacing(1)} !important`\r\n}))\r\n\r\n\r\nconst SoulAssessmentModelMiddleSchool = ({ data, id, backEndApi, printModel }: Props) => {\r\n  // ** Hook\r\n  const theme = useTheme()\r\n\r\n  const isMobileData = isMobile()\r\n\r\n  const series = data && data['测评分析'] ? [{name: '心理测评', data: Object.values(data['测评分析']) as number[]}] : [{name: '心理测评', data: []}]\r\n\r\n  const options: ApexOptions = {\r\n    chart: {\r\n      parentHeightOffset: 0,\r\n      toolbar: { show: false }\r\n    },\r\n    colors: [theme.palette.primary.main, theme.palette.info.main],\r\n    plotOptions: {\r\n      radar: {\r\n        size: 110,\r\n        polygons: {\r\n          connectorColors: theme.palette.divider,\r\n          strokeColors: [\r\n            theme.palette.divider,\r\n            'transparent',\r\n            'transparent',\r\n            'transparent',\r\n            'transparent',\r\n            'transparent'\r\n          ]\r\n        }\r\n      }\r\n    },\r\n    fill: {\r\n      type: 'gradient',\r\n      gradient: {\r\n        shade: 'dark',\r\n        gradientToColors: [theme.palette.primary.main, theme.palette.info.main],\r\n        shadeIntensity: 1,\r\n        type: 'vertical',\r\n        opacityFrom: 1,\r\n        opacityTo: 0.9,\r\n        stops: [0, 100]\r\n      }\r\n    },\r\n    labels: data && data['测评分析'] ? Object.keys(data['测评分析']) as string[] : [],\r\n    markers: { size: 0 },\r\n    legend: {\r\n      labels: { colors: theme.palette.text.secondary }\r\n    },\r\n    grid: { show: false },\r\n    xaxis: {\r\n      labels: {\r\n        show: true,\r\n        style: {\r\n          fontSize: '14px',\r\n          colors: [\r\n            theme.palette.text.disabled,\r\n            theme.palette.text.disabled,\r\n            theme.palette.text.disabled,\r\n            theme.palette.text.disabled,\r\n            theme.palette.text.disabled,\r\n            theme.palette.text.disabled\r\n          ]\r\n        }\r\n      }\r\n    },\r\n    yaxis: { show: false }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if ( series && series[0] && series[0].data && series[0].data.length > 0 && id && id.length > 32 && data && printModel == \"\" ) {\r\n      setTimeout(() => {\r\n        window.print()\r\n      }, 3000)\r\n    }\r\n  }, [id, data, series])\r\n\r\n  const chartRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (chartRef.current) {\r\n      const apexChart = chartRef.current as any;\r\n      if(series && series[0] && series[0].data && series[0].data.length > 0 && apexChart && apexChart.chart) {\r\n        apexChart.chart.render();\r\n      }\r\n    }\r\n  }, [series, options]);\r\n\r\n  if (data) {\r\n    return (\r\n      <Card>\r\n        <CardContent>\r\n          <Grid container>\r\n            <Grid item sm={6} xs={12} sx={{ mb: { sm: 0, xs: 4 } }}>\r\n              <Box sx={{ display: 'flex', flexDirection: 'column' }}>\r\n                <Box sx={{ mb: 6, display: 'flex', alignItems: 'center' }}>\r\n                  <Typography\r\n                    variant='h6'\r\n                    sx={{ fontWeight: 600, lineHeight: 'normal', textTransform: 'uppercase' }}\r\n                  >\r\n                    {data['单位名称']}\r\n                  </Typography>\r\n                </Box>\r\n                <div>\r\n                  <div style={{ display: 'flex', flexDirection: 'row', marginBottom: '0.5rem' }}>\r\n                      <Typography variant='body2' sx={{ marginRight: '1rem' }}>学号:</Typography>\r\n                      <Typography variant='body2' sx={{ marginRight: '1rem' }}>{data['用户信息']['学号']}</Typography>\r\n                  </div>\r\n                  <div style={{ display: 'flex', flexDirection: 'row', marginBottom: '0.5rem' }}>\r\n                      <Typography variant='body2' sx={{ marginRight: '1rem' }}>姓名:</Typography>\r\n                      <Typography variant='body2' sx={{ marginRight: '1rem' }}>{data['用户信息']['姓名']}</Typography>\r\n                  </div>\r\n                  <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                      <Typography variant='body2' sx={{ marginRight: '1rem' }}>班级:</Typography>\r\n                      <Typography variant='body2' sx={{ marginRight: '1rem' }}>{data['用户信息']['班级']}</Typography>\r\n                  </div>\r\n                </div>\r\n              </Box>\r\n            </Grid>\r\n            <Grid item sm={6} xs={12}>\r\n              <Box sx={{ display: 'flex', justifyContent: { xs: 'flex-start', sm: 'flex-end' } }}>\r\n                <Table sx={{ maxWidth: '400px' }}>\r\n                  <TableBody>\r\n                    <TableRow>\r\n                      <MUITableCell colSpan={2}>\r\n                        <Typography variant='h6'>{data['测评名称']}</Typography>\r\n                      </MUITableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                      <MUITableCell>\r\n                        <Typography variant='body2'>测评时间:</Typography>\r\n                      </MUITableCell>\r\n                      <MUITableCell>\r\n                        <Typography variant='body2' sx={{ fontWeight: 600 }}>\r\n                        {data['用户信息']['测评时间']}\r\n                        </Typography>\r\n                      </MUITableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                      <MUITableCell>\r\n                        <Typography variant='body2'>测评用时:</Typography>\r\n                      </MUITableCell>\r\n                      <MUITableCell>\r\n                        <Typography variant='body2' sx={{ fontWeight: 600 }}>\r\n                        {data['用户信息']['使用时间']}\r\n                        </Typography>\r\n                      </MUITableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                      <MUITableCell>\r\n                        <Typography variant='body2'>咨询师:</Typography>\r\n                      </MUITableCell>\r\n                      <MUITableCell>\r\n                        <Typography variant='body2' sx={{ fontWeight: 600 }}>\r\n                        {data['用户信息']['咨询师'] ?? '无'}\r\n                        </Typography>\r\n                      </MUITableCell>\r\n                    </TableRow>\r\n                  </TableBody>\r\n                </Table>\r\n              </Box>\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n\r\n        <Divider />\r\n\r\n        <CardContent>\r\n          <Grid container>\r\n            <Grid item xs={12} sm={12} sx={{ mb: 0 }}>\r\n            <Box sx={{ display: 'flex', flexDirection: 'column' }}>\r\n                <Box sx={{ mb: 4, display: 'flex', alignItems: 'center' }}>\r\n                  <Typography variant='h6' sx={{ fontWeight: 400, lineHeight: 'normal' }} >\r\n                    一、测评说明\r\n                  </Typography>\r\n                </Box>\r\n                <Typography variant='body2' sx={{ marginRight: '1rem', whiteSpace: 'pre-line' }}>{data['测评说明']}</Typography>\r\n              </Box>\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n\r\n        <Divider />\r\n\r\n        <CardContent>\r\n          <Grid container>\r\n            <Grid item xs={12} sm={12} sx={{ mb: 0 }}>\r\n            <Box sx={{ display: 'flex', flexDirection: 'column' }}>\r\n                <Box sx={{ mb: 4, display: 'flex', alignItems: 'center' }}>\r\n                  <Typography variant='h6' sx={{ fontWeight: 400, lineHeight: 'normal' }} >\r\n                    二、评分标准\r\n                  </Typography>\r\n                </Box>\r\n                <Typography variant='body2' sx={{ marginRight: '1rem', whiteSpace: 'pre-line' }}>{data['评分标准']}</Typography>\r\n              </Box>\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n\r\n        <Divider />\r\n\r\n        <CardContent>\r\n          <Grid container>\r\n            <Grid item xs={12} sm={12} sx={{ mb: 0 }}>\r\n            <Box sx={{ display: 'flex', flexDirection: 'column' }}>\r\n                <Box sx={{ mb: 4, display: 'flex', alignItems: 'center' }}>\r\n                  <Typography variant='h6' sx={{ fontWeight: 400, lineHeight: 'normal' }} >\r\n                    三、因子分析\r\n                  </Typography>\r\n                </Box>\r\n\r\n                <Grid container spacing={2}>\r\n                  <Grid item xs={12} md={8} sx={{ m: 0, p: 0 }}>\r\n                    <Card>\r\n                      <CardContent sx={{height: '315px'}}>\r\n                        <ReactApexcharts ref={chartRef} type='radar' height={305} series={series} options={options} />\r\n                      </CardContent>\r\n                    </Card>\r\n                  </Grid>\r\n                  <Grid item xs={12} md={4} sx={{ m: 0, p: 0 }}>\r\n                    <Card>\r\n                      <CardContent sx={{height: '315px'}}>\r\n                        <Box sx={{ display: 'flex', flexDirection: 'column' }}>\r\n                            {data && data['测评分析'] && Object.keys(data['测评分析']).map((item: any, index: number)=>{\r\n\r\n                              return (\r\n                                <div key={index} style={{ display: 'flex', flexDirection: 'row', marginBottom: '0.45rem' }}>\r\n                                    <Typography variant='body2' sx={{ marginRight: '1rem', whiteSpace: 'nowrap' }}>{item}:</Typography>\r\n                                    <Typography variant='body2' sx={{ marginRight: '1rem' }}>{data['测评分析'][item]}</Typography>\r\n                                </div>\r\n                              )\r\n                            })}\r\n                        </Box>\r\n                      </CardContent>\r\n                    </Card>\r\n                  </Grid>\r\n                </Grid>\r\n\r\n\r\n                {data && data['因子分析'] && data['因子分析'].length > 0 && data['因子分析'].map((item: any, index: number)=>{\r\n\r\n                  return (\r\n                    <TableContainer key={index} sx={{mb: 3}}>\r\n                      <Table>\r\n                        <TableHead>\r\n                          <TableRow>\r\n                            <TableCell colSpan={4}>\r\n                              <Box sx={{ display: 'flex', flexDirection: 'column' }}>\r\n                                <div>\r\n                                  <div style={{ display: 'flex', flexDirection: 'row', marginBottom: '0.5rem' }}>\r\n                                      <Typography sx={{ marginRight: '1rem', whiteSpace: 'nowrap' }}>{index+1} 因子名称:</Typography>\r\n                                      <Typography sx={{ marginRight: '1rem' }}>{item['名称']}</Typography>\r\n                                  </div>\r\n                                  <div style={{ display: 'flex', flexDirection: 'row', marginBottom: '0.5rem' }}>\r\n                                      <Typography variant='body2' sx={{ marginRight: '1rem', whiteSpace: 'nowrap' }}>因子分数:</Typography>\r\n                                      <Typography variant='body2' sx={{ marginRight: '1rem' }}>{item['测评分数']}</Typography>\r\n                                  </div>\r\n                                  <div style={{ display: 'flex', flexDirection: 'row', marginBottom: '0.5rem' }}>\r\n                                      <Typography variant='body2' sx={{ marginRight: '1rem', whiteSpace: 'nowrap' }}>因子解释:</Typography>\r\n                                      <Typography variant='body2' sx={{ marginRight: '1rem' }}>{item['因子解释']}</Typography>\r\n                                  </div>\r\n                                </div>\r\n                              </Box>\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        </TableHead>\r\n                        <TableHead>\r\n                          <TableRow>\r\n                            <TableCell>项目</TableCell>\r\n                            <TableCell style={{ whiteSpace: 'nowrap' }}>选项</TableCell>\r\n                            <TableCell style={{ whiteSpace: 'nowrap' }}>分值</TableCell>\r\n                          </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                          {item && item['测评明细'] && item['测评明细'].length > 0 && item['测评明细'].map((Ceping: any, IndexCeping: number)=>{\r\n\r\n                            return (\r\n                              <TableRow key={IndexCeping}>\r\n                                <TableCell sx={{width: '70%'}}>{Ceping['测评项目']}</TableCell>\r\n                                <TableCell sx={{width: '15%', whiteSpace: 'nowrap'}}>{Ceping['测评选项']}</TableCell>\r\n                                <TableCell sx={{width: '15%', whiteSpace: 'nowrap'}}>{Ceping['测评分值']}</TableCell>\r\n                              </TableRow>\r\n                            )\r\n                          })}\r\n                          \r\n                        </TableBody>\r\n                      </Table>\r\n                    </TableContainer>\r\n                  )\r\n                })}\r\n              </Box>\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n\r\n        <Divider />\r\n\r\n        <CardContent>\r\n          <Grid container>\r\n            <Grid item xs={12} sm={12} sx={{ mb: 0 }}>\r\n            <Box sx={{ display: 'flex', flexDirection: 'column' }}>\r\n                <Box sx={{ mb: 4, display: 'flex', alignItems: 'center' }}>\r\n                  <Typography variant='h6' sx={{ fontWeight: 400, lineHeight: 'normal' }} >\r\n                    四、人工智能分析\r\n                  </Typography>\r\n                </Box>\r\n\r\n                <Grid container spacing={2}>\r\n                  <Grid item xs={12} sx={{ m: 0, p: 0 }}>\r\n                    <Card>\r\n                      <CardContent>\r\n                        <div style={{ color: 'action.active', fontSize: '0.825rem' }}>\r\n                          <ReactMarkdown>{data['DeepSeek'] ? data['DeepSeek'].replace('\\n', '  \\n') : ''}</ReactMarkdown>\r\n                        </div>\r\n                      </CardContent>\r\n                    </Card>\r\n                  </Grid>\r\n                </Grid>\r\n\r\n              </Box>\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n\r\n        <Divider />\r\n\r\n        <CardContent>\r\n          <Typography variant='body2'>\r\n            <strong>说明：</strong> 此报告前三部分由系统自动生成，第四部分到结尾部分由国产AI大模型生成，报告整体用于参考作用，其并不具备任何法律效力。如果需要具有法律效力的报告，请到国家认可的正规机构，并且在具有相关资格从业医师的协助下做出对应的心理测评工作。\r\n          </Typography>\r\n          <Typography variant='body2'>\r\n            <strong>隐私：</strong> 本系统非常注重用户隐私，不会随意搜集、滥用和外泄用户信息。系统提交给国产大模型的数据，只涉及了测评数据，没有提交用户任何身份信息或是隐私信息给到大模型，请放心使用。\r\n          </Typography>\r\n          {printModel && printModel == \"print\" && isMobileData == false && (\r\n            <Grid container justifyContent=\"flex-end\">\r\n              <Button\r\n                target='_blank'\r\n                sx={{ mb: 3.5 }}\r\n                component={Link}\r\n                color='primary'\r\n                size=\"small\"\r\n                variant='outlined'\r\n                href={`/print/middleschool/${id}____${backEndApi.replace('.php', '').replace('apps/apps_', '')}`}\r\n              >\r\n                {'打印'}\r\n              </Button>\r\n            </Grid>\r\n          )}\r\n        </CardContent>\r\n\r\n      </Card>\r\n    )\r\n  } else {\r\n    return null\r\n  }\r\n}\r\n\r\nexport default SoulAssessmentModelMiddleSchool\r\n","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\Enginee\\SoulAssessmentModelSCL90.tsx",["3396","3397","3398"],[],"import { useEffect, useRef } from 'react'\r\n\r\n// ** MUI Imports\r\nimport Button from '@mui/material/Button'\r\nimport Grid from '@mui/material/Grid'\r\nimport Card from '@mui/material/Card'\r\nimport Table from '@mui/material/Table'\r\nimport Divider from '@mui/material/Divider'\r\nimport TableRow from '@mui/material/TableRow'\r\nimport TableHead from '@mui/material/TableHead'\r\nimport TableBody from '@mui/material/TableBody'\r\nimport Typography from '@mui/material/Typography'\r\nimport Box from '@mui/material/Box'\r\nimport CardContent from '@mui/material/CardContent'\r\nimport { styled, useTheme } from '@mui/material/styles'\r\nimport TableContainer from '@mui/material/TableContainer'\r\nimport TableCell, { TableCellBaseProps } from '@mui/material/TableCell'\r\n\r\nimport ReactApexcharts from 'src/@core/components/react-apexcharts'\r\n\r\nimport { ApexOptions } from 'apexcharts'\r\nimport ReactMarkdown from 'react-markdown'\r\nimport {isMobile} from 'src/configs/functions'\r\n\r\nimport Link from 'next/link'\r\n\r\ninterface Props {\r\n  data: any\r\n  id: string\r\n  backEndApi: string\r\n  printModel: string\r\n}\r\n\r\nconst MUITableCell = styled(TableCell)<TableCellBaseProps>(({ theme }) => ({\r\n  borderBottom: 0,\r\n  paddingLeft: '0 !important',\r\n  paddingRight: '0 !important',\r\n  paddingTop: `${theme.spacing(1)} !important`,\r\n  paddingBottom: `${theme.spacing(1)} !important`\r\n}))\r\n\r\n\r\nconst SoulAssessmentModelMiddleSchool = ({ data, id, backEndApi, printModel }: Props) => {\r\n  // ** Hook\r\n  const theme = useTheme()\r\n\r\n  const isMobileData = isMobile()\r\n\r\n  const series = data && data['测评分析'] ? [{name: '心理测评', data: Object.values(data['测评分析']) as number[]}] : [{name: '心理测评', data: []}]\r\n\r\n  const options: ApexOptions = {\r\n    chart: {\r\n      parentHeightOffset: 0,\r\n      toolbar: { show: false }\r\n    },\r\n    colors: [theme.palette.primary.main, theme.palette.info.main],\r\n    plotOptions: {\r\n      radar: {\r\n        size: 110,\r\n        polygons: {\r\n          connectorColors: theme.palette.divider,\r\n          strokeColors: [\r\n            theme.palette.divider,\r\n            'transparent',\r\n            'transparent',\r\n            'transparent',\r\n            'transparent',\r\n            'transparent'\r\n          ]\r\n        }\r\n      }\r\n    },\r\n    fill: {\r\n      type: 'gradient',\r\n      gradient: {\r\n        shade: 'dark',\r\n        gradientToColors: [theme.palette.primary.main, theme.palette.info.main],\r\n        shadeIntensity: 1,\r\n        type: 'vertical',\r\n        opacityFrom: 1,\r\n        opacityTo: 0.9,\r\n        stops: [0, 100]\r\n      }\r\n    },\r\n    labels: data && data['测评分析'] ? Object.keys(data['测评分析']) as string[] : [],\r\n    markers: { size: 0 },\r\n    legend: {\r\n      labels: { colors: theme.palette.text.secondary }\r\n    },\r\n    grid: { show: false },\r\n    xaxis: {\r\n      labels: {\r\n        show: true,\r\n        style: {\r\n          fontSize: '14px',\r\n          colors: [\r\n            theme.palette.text.disabled,\r\n            theme.palette.text.disabled,\r\n            theme.palette.text.disabled,\r\n            theme.palette.text.disabled,\r\n            theme.palette.text.disabled,\r\n            theme.palette.text.disabled\r\n          ]\r\n        }\r\n      }\r\n    },\r\n    yaxis: { show: false }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if ( series && series[0] && series[0].data && series[0].data.length > 0 && id && id.length > 32 && data && printModel == \"\" ) {\r\n      setTimeout(() => {\r\n        window.print()\r\n      }, 3000)\r\n    }\r\n  }, [id, data, series])\r\n\r\n  const chartRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (chartRef.current) {\r\n      const apexChart = chartRef.current as any;\r\n      if(series && series[0] && series[0].data && series[0].data.length > 0 && apexChart && apexChart.chart) {\r\n        apexChart.chart.render();\r\n      }\r\n    }\r\n  }, [series, options]);\r\n\r\n  if (data) {\r\n    return (\r\n      <Card>\r\n        <CardContent>\r\n          <Grid container>\r\n            <Grid item sm={6} xs={12} sx={{ mb: { sm: 0, xs: 4 } }}>\r\n              <Box sx={{ display: 'flex', flexDirection: 'column' }}>\r\n                <Box sx={{ mb: 6, display: 'flex', alignItems: 'center' }}>\r\n                  <Typography\r\n                    variant='h6'\r\n                    sx={{ fontWeight: 600, lineHeight: 'normal', textTransform: 'uppercase' }}\r\n                  >\r\n                    {data['单位名称']}\r\n                  </Typography>\r\n                </Box>\r\n                <div>\r\n                  <div style={{ display: 'flex', flexDirection: 'row', marginBottom: '0.5rem' }}>\r\n                      <Typography variant='body2' sx={{ marginRight: '1rem' }}>学号:</Typography>\r\n                      <Typography variant='body2' sx={{ marginRight: '1rem' }}>{data['用户信息']['学号']}</Typography>\r\n                  </div>\r\n                  <div style={{ display: 'flex', flexDirection: 'row', marginBottom: '0.5rem' }}>\r\n                      <Typography variant='body2' sx={{ marginRight: '1rem' }}>姓名:</Typography>\r\n                      <Typography variant='body2' sx={{ marginRight: '1rem' }}>{data['用户信息']['姓名']}</Typography>\r\n                  </div>\r\n                  <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                      <Typography variant='body2' sx={{ marginRight: '1rem' }}>班级:</Typography>\r\n                      <Typography variant='body2' sx={{ marginRight: '1rem' }}>{data['用户信息']['班级']}</Typography>\r\n                  </div>\r\n                </div>\r\n              </Box>\r\n            </Grid>\r\n            <Grid item sm={6} xs={12}>\r\n              <Box sx={{ display: 'flex', justifyContent: { xs: 'flex-start', sm: 'flex-end' } }}>\r\n                <Table sx={{ maxWidth: '400px' }}>\r\n                  <TableBody>\r\n                    <TableRow>\r\n                      <MUITableCell colSpan={2}>\r\n                        <Typography variant='h6'>{data['测评名称']}</Typography>\r\n                      </MUITableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                      <MUITableCell>\r\n                        <Typography variant='body2'>测评时间:</Typography>\r\n                      </MUITableCell>\r\n                      <MUITableCell>\r\n                        <Typography variant='body2' sx={{ fontWeight: 600 }}>\r\n                        {data['用户信息']['测评时间']}\r\n                        </Typography>\r\n                      </MUITableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                      <MUITableCell>\r\n                        <Typography variant='body2'>测评用时:</Typography>\r\n                      </MUITableCell>\r\n                      <MUITableCell>\r\n                        <Typography variant='body2' sx={{ fontWeight: 600 }}>\r\n                        {data['用户信息']['使用时间']}\r\n                        </Typography>\r\n                      </MUITableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                      <MUITableCell>\r\n                        <Typography variant='body2'>咨询师:</Typography>\r\n                      </MUITableCell>\r\n                      <MUITableCell>\r\n                        <Typography variant='body2' sx={{ fontWeight: 600 }}>\r\n                        {data['用户信息']['咨询师'] ?? '无'}\r\n                        </Typography>\r\n                      </MUITableCell>\r\n                    </TableRow>\r\n                  </TableBody>\r\n                </Table>\r\n              </Box>\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n\r\n        <Divider />\r\n\r\n        <CardContent>\r\n          <Grid container>\r\n            <Grid item xs={12} sm={12} sx={{ mb: 0 }}>\r\n            <Box sx={{ display: 'flex', flexDirection: 'column' }}>\r\n                <Box sx={{ mb: 4, display: 'flex', alignItems: 'center' }}>\r\n                  <Typography variant='h6' sx={{ fontWeight: 400, lineHeight: 'normal' }} >\r\n                    一、测评说明\r\n                  </Typography>\r\n                </Box>\r\n                <Typography variant='body2' sx={{ marginRight: '1rem', whiteSpace: 'pre-line' }}>{data['测评说明']}</Typography>\r\n              </Box>\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n\r\n        <Divider />\r\n\r\n        <CardContent>\r\n          <Grid container>\r\n            <Grid item xs={12} sm={12} sx={{ mb: 0 }}>\r\n            <Box sx={{ display: 'flex', flexDirection: 'column' }}>\r\n                <Box sx={{ mb: 4, display: 'flex', alignItems: 'center' }}>\r\n                  <Typography variant='h6' sx={{ fontWeight: 400, lineHeight: 'normal' }} >\r\n                    二、评分标准\r\n                  </Typography>\r\n                </Box>\r\n                <Typography variant='body2' sx={{ marginRight: '1rem', whiteSpace: 'pre-line' }}>{data['评分标准']}</Typography>\r\n              </Box>\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n\r\n        <Divider />\r\n\r\n        <CardContent>\r\n          <Grid container>\r\n            <Grid item xs={12} sm={12} sx={{ mb: 0 }}>\r\n            <Box sx={{ display: 'flex', flexDirection: 'column' }}>\r\n                <Box sx={{ mb: 4, display: 'flex', alignItems: 'center' }}>\r\n                  <Typography variant='h6' sx={{ fontWeight: 400, lineHeight: 'normal' }} >\r\n                    三、因子分析\r\n                  </Typography>\r\n                </Box>\r\n\r\n                <Grid container spacing={2}>\r\n                  <Grid item xs={12} md={8} sx={{ m: 0, p: 0 }}>\r\n                    <Card>\r\n                      <CardContent sx={{height: '315px'}}>\r\n                        <ReactApexcharts ref={chartRef} type='radar' height={305} series={series} options={options} />\r\n                      </CardContent>\r\n                    </Card>\r\n                  </Grid>\r\n                  <Grid item xs={12} md={4} sx={{ m: 0, p: 0 }}>\r\n                    <Card>\r\n                      <CardContent sx={{height: '315px'}}>\r\n                        <Box sx={{ display: 'flex', flexDirection: 'column' }}>\r\n                            {data && data['测评分析'] && Object.keys(data['测评分析']).map((item: any, index: number)=>{\r\n\r\n                              return (\r\n                                <div key={index} style={{ display: 'flex', flexDirection: 'row', marginBottom: '0.45rem' }}>\r\n                                    <Typography variant='body2' sx={{ marginRight: '1rem', whiteSpace: 'nowrap' }}>{item}:</Typography>\r\n                                    <Typography variant='body2' sx={{ marginRight: '1rem' }}>{data['测评分析'][item]}</Typography>\r\n                                </div>\r\n                              )\r\n                            })}\r\n                        </Box>\r\n                      </CardContent>\r\n                    </Card>\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                <Grid container spacing={2}>\r\n                  <Grid item xs={12} md={12} sx={{ m: 0, p: 0 }}>\r\n                    <Card>\r\n                      <CardContent>\r\n                        <TableContainer sx={{mb: 3}}>\r\n                            <Table>\r\n                                <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell style={{ whiteSpace: 'nowrap' }}>因子名称</TableCell>\r\n                                    <TableCell >所属因子的项目编号</TableCell>\r\n                                    <TableCell style={{ whiteSpace: 'nowrap' }}>累计得分</TableCell>\r\n                                    <TableCell style={{ whiteSpace: 'nowrap' }}>T分数</TableCell>\r\n                                </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                {data && data['因子分析'] && data['因子分析'].length > 0 && data['因子分析'].map((因子项目: any, IndexCeping: number)=>{\r\n\r\n                                    return (\r\n                                    <TableRow key={IndexCeping}>\r\n                                        <TableCell sx={{width: '15%', whiteSpace: 'nowrap'}}>{因子项目.名称}</TableCell>\r\n                                        <TableCell sx={{width: '70%'}}>{data['得分换算表'][因子项目.名称]['项目编号'].join(',')}</TableCell>\r\n                                        <TableCell sx={{width: '15%', whiteSpace: 'nowrap'}}>{data['得分换算表'][因子项目.名称]['累计得分']}</TableCell>\r\n                                        <TableCell sx={{width: '15%', whiteSpace: 'nowrap'}}>{data['得分换算表'][因子项目.名称]['T分数']}</TableCell>\r\n                                    </TableRow>\r\n                                    )\r\n                                })}\r\n\r\n                                <TableRow>\r\n                                    <TableCell style={{ whiteSpace: 'nowrap' }} colSpan={4}>\r\n                                        阳性项目数: {data['阳性项目数']}　\r\n                                        阴性项目数: {data['阴性项目数']}　\r\n                                        总累计得分: {data['总累计得分']}　\r\n                                        总因子分数: {data['总因子分数']}　\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                \r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                      </CardContent>\r\n                    </Card>\r\n                  </Grid>\r\n                </Grid>\r\n\r\n\r\n                {data && data['因子分析'] && data['因子分析'].length > 0 && data['因子分析'].map((item: any, index: number)=>{\r\n\r\n                  return (\r\n                    <TableContainer key={index} sx={{mb: 3}}>\r\n                      <Table>\r\n                        <TableHead>\r\n                          <TableRow>\r\n                            <TableCell colSpan={4}>\r\n                              <Box sx={{ display: 'flex', flexDirection: 'column' }}>\r\n                                <div>\r\n                                  <div style={{ display: 'flex', flexDirection: 'row', marginBottom: '0.5rem' }}>\r\n                                      <Typography sx={{ marginRight: '1rem', whiteSpace: 'nowrap' }}>{index+1} 因子名称:</Typography>\r\n                                      <Typography sx={{ marginRight: '1rem' }}>{item['名称']}</Typography>\r\n                                  </div>\r\n                                  <div style={{ display: 'flex', flexDirection: 'row', marginBottom: '0.5rem' }}>\r\n                                      <Typography variant='body2' sx={{ marginRight: '1rem', whiteSpace: 'nowrap' }}>因子分数:</Typography>\r\n                                      <Typography variant='body2' sx={{ marginRight: '1rem' }}>{item['测评分数']}</Typography>\r\n                                  </div>\r\n                                  <div style={{ display: 'flex', flexDirection: 'row', marginBottom: '0.5rem' }}>\r\n                                      <Typography variant='body2' sx={{ marginRight: '1rem', whiteSpace: 'nowrap' }}>因子解释:</Typography>\r\n                                      <Typography variant='body2' sx={{ marginRight: '1rem' }}>{item['因子解释']}</Typography>\r\n                                  </div>\r\n                                </div>\r\n                              </Box>\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        </TableHead>\r\n                        <TableHead>\r\n                          <TableRow>\r\n                            <TableCell>项目</TableCell>\r\n                            <TableCell style={{ whiteSpace: 'nowrap' }}>选项</TableCell>\r\n                            <TableCell style={{ whiteSpace: 'nowrap' }}>分值</TableCell>\r\n                          </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                          {item && item['测评明细'] && item['测评明细'].length > 0 && item['测评明细'].map((Ceping: any, IndexCeping: number)=>{\r\n\r\n                            return (\r\n                              <TableRow key={IndexCeping}>\r\n                                <TableCell sx={{width: '70%'}}>{Ceping['测评项目']}</TableCell>\r\n                                <TableCell sx={{width: '15%', whiteSpace: 'nowrap'}}>{Ceping['测评选项']}</TableCell>\r\n                                <TableCell sx={{width: '15%', whiteSpace: 'nowrap'}}>{Ceping['测评分值']}</TableCell>\r\n                              </TableRow>\r\n                            )\r\n                          })}\r\n                          \r\n                        </TableBody>\r\n                      </Table>\r\n                    </TableContainer>\r\n                  )\r\n                })}\r\n              </Box>\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n\r\n        <Divider />\r\n\r\n        <CardContent>\r\n          <Grid container>\r\n            <Grid item xs={12} sm={12} sx={{ mb: 0 }}>\r\n            <Box sx={{ display: 'flex', flexDirection: 'column' }}>\r\n                <Box sx={{ mb: 4, display: 'flex', alignItems: 'center' }}>\r\n                  <Typography variant='h6' sx={{ fontWeight: 400, lineHeight: 'normal' }} >\r\n                    四、人工智能分析\r\n                  </Typography>\r\n                </Box>\r\n\r\n                <Grid container spacing={2}>\r\n                  <Grid item xs={12} sx={{ m: 0, p: 0 }}>\r\n                    <Card>\r\n                      <CardContent>\r\n                        <div style={{ color: 'action.active', fontSize: '0.825rem' }}>\r\n                          <ReactMarkdown>{data['DeepSeek'] ? data['DeepSeek'].replace('\\n', '  \\n') : ''}</ReactMarkdown>\r\n                        </div>\r\n                      </CardContent>\r\n                    </Card>\r\n                  </Grid>\r\n                </Grid>\r\n\r\n              </Box>\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n\r\n        <Divider />\r\n\r\n        <CardContent>\r\n          <Typography variant='body2'>\r\n            <strong>说明：</strong> 此报告前三部分由系统自动生成，第四部分到结尾部分由国产AI大模型生成，报告整体用于参考作用，其并不具备任何法律效力。如果需要具有法律效力的报告，请到国家认可的正规机构，并且在具有相关资格从业医师的协助下做出对应的心理测评工作。\r\n          </Typography>\r\n          <Typography variant='body2'>\r\n            <strong>隐私：</strong> 本系统非常注重用户隐私，不会随意搜集、滥用和外泄用户信息。系统提交给国产大模型的数据，只涉及了测评数据，没有提交用户任何身份信息或是隐私信息给到大模型，请放心使用。\r\n          </Typography>\r\n          {printModel && printModel == \"print\" && isMobileData == false && (\r\n            <Grid container justifyContent=\"flex-end\">\r\n              <Button\r\n                target='_blank'\r\n                sx={{ mb: 3.5 }}\r\n                component={Link}\r\n                color='primary'\r\n                size=\"small\"\r\n                variant='outlined'\r\n                href={`/print/middleschool/${id}____${backEndApi.replace('.php', '').replace('apps/apps_', '')}`}\r\n              >\r\n                {'打印'}\r\n              </Button>\r\n            </Grid>\r\n          )}\r\n        </CardContent>\r\n\r\n      </Card>\r\n    )\r\n  } else {\r\n    return null\r\n  }\r\n}\r\n\r\nexport default SoulAssessmentModelMiddleSchool\r\n","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\Enginee\\store.ts",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\Enginee\\ViewTable.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\Enginee\\ViewTableCore.tsx",["3399"],[],"// ** React Imports\r\nimport { useState, useEffect, Fragment } from 'react'\r\n\r\n// ** MUI Imports\r\nimport Typography from '@mui/material/Typography'\r\nimport Box from '@mui/material/Box'\r\nimport Table from '@mui/material/Table'\r\nimport TableRow from '@mui/material/TableRow'\r\nimport TableBody from '@mui/material/TableBody'\r\nimport TableHead from '@mui/material/TableHead'\r\nimport { styled } from '@mui/material/styles'\r\nimport TableCell, { TableCellBaseProps } from '@mui/material/TableCell'\r\nimport Grid from '@mui/material/Grid'\r\nimport Card from '@mui/material/Card'\r\nimport CardContent from '@mui/material/CardContent'\r\nimport ListItem from '@mui/material/ListItem'\r\nimport Button from '@mui/material/Button'\r\n\r\n// ** Icon Imports\r\nimport Icon from 'src/@core/components/icon'\r\nimport {isMobile} from 'src/configs/functions'\r\n\r\n// ** Config\r\nimport authConfig from 'src/configs/auth'\r\nimport axios from 'axios'\r\nimport Mousetrap from 'mousetrap';\r\n\r\n// ** Store Imports\r\nimport { useSelector } from 'react-redux'\r\n\r\n// ** Styles\r\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css'\r\n\r\nimport { RootState } from 'src/store/index'\r\nimport { Divider } from '@mui/material'\r\nimport { DecryptDataAES256GCM } from 'src/configs/functions'\r\n\r\nimport SoulAssessmentModel from 'src/views/Enginee/SoulAssessmentModel'\r\n\r\n// ** Next Imports\r\nimport Link from 'next/link'\r\n\r\nconst MUITableCell = styled(TableCell)<TableCellBaseProps>(({ theme }) => ({\r\n  borderBottom: 0,\r\n  paddingLeft: '0 !important',\r\n  paddingRight: '0 !important',\r\n  paddingTop: `${theme.spacing(1)} !important`,\r\n  paddingBottom: `${theme.spacing(1)} !important`\r\n}))\r\n\r\ninterface ViewTableType {\r\n  id: string\r\n  action: string\r\n  open: boolean\r\n  toggleViewTableDrawer: () => void\r\n  backEndApi: string\r\n  editViewCounter: number\r\n  externalId: number\r\n  pageJsonInfor: {}\r\n  CSRF_TOKEN: string\r\n  toggleImagesPreviewListDrawer: (imagesPreviewList: string[], imagetype: string[]) => void\r\n}\r\n\r\nconst ImgStyled = styled('img')(({ theme }) => ({\r\n  width: 120,\r\n  borderRadius: 4,\r\n  marginRight: theme.spacing(5)\r\n}))\r\n\r\nconst ImgStyled68 = styled('img')(({ theme }) => ({\r\n  width: 65,\r\n  borderRadius: 4,\r\n  marginRight: theme.spacing(1)\r\n}))\r\n\r\nconst CustomLink = styled(Link)({\r\n  textDecoration: \"none\",\r\n  color: \"inherit\",\r\n});\r\n\r\nconst ViewTableCore = (props: ViewTableType) => {\r\n  // ** Props\r\n  const { externalId, id, action, toggleViewTableDrawer, backEndApi, editViewCounter, CSRF_TOKEN, toggleImagesPreviewListDrawer } = props\r\n  console.log(\"externalId props\", externalId)\r\n\r\n  const isMobileData = isMobile()\r\n  console.log(\"isMobileData\", isMobileData)\r\n\r\n  // ** Hooks\r\n  //const dispatch = useDispatch<AppDispatch>()\r\n  const store = useSelector((state: RootState) => state.user)\r\n  const titletext: string = store.view_default.titletext;\r\n  const [defaultValuesView, setDefaultValuesView] = useState<{[key:string]:any}>({})\r\n  const [childTable, setChildTable] = useState<{[key:string]:any}>({})\r\n\r\n  const addFilesOrDatesDefault:{[key:string]:any}[][] = []\r\n  const [newTableRowData, setNewTableRowData] = useState(addFilesOrDatesDefault)\r\n  const [approvalNodes, setApprovalNodes] = useState<{[key:string]:any}>({})\r\n  const [print, setPrint] = useState<{[key:string]:any}>({})\r\n  const [model, setModel] = useState<string>(\"\")\r\n  \r\n  useEffect(() => {\r\n    Mousetrap.bind(['alt+c', 'command+c'], handleClose);\r\n    \r\n    return () => {\r\n      Mousetrap.unbind(['alt+c', 'command+c']);\r\n    }\r\n  });\r\n\r\n  //console.log(\"defaultValuesView--------------------------------\", defaultValuesView)\r\n\r\n  const storedToken = window.localStorage.getItem(authConfig.storageTokenKeyName)!\r\n\r\n  useEffect(() => {\r\n    if (action == \"view_default\" && editViewCounter > 0) {\r\n      axios\r\n        .get(authConfig.backEndApiHost + backEndApi, { headers: { Authorization: storedToken+\"::::\"+CSRF_TOKEN }, params: { action, id, editViewCounter, isMobileData } })\r\n        .then(res => {\r\n          let dataJson: any = null\r\n          const data = res.data\r\n          if(data && data.model) {\r\n            setModel(data.model)\r\n          }\r\n          if(data && data.isEncrypted == \"1\" && data.data)  {\r\n              const i = data.data.slice(0, 32);\r\n              const t = data.data.slice(-32);\r\n              const e = data.data.slice(32, -32);\r\n              const k = authConfig.k;\r\n              const DecryptDataAES256GCMData = DecryptDataAES256GCM(e, i, t, k)\r\n              try{\r\n                  dataJson = JSON.parse(DecryptDataAES256GCMData)\r\n              }\r\n              catch(Error: any) {\r\n                  console.log(\"DecryptDataAES256GCMData view_default Error\", Error)\r\n      \r\n                  dataJson = data\r\n              }\r\n          }\r\n          else {\r\n\r\n              dataJson = data\r\n          }\r\n          if (dataJson.status == \"OK\") {\r\n            setDefaultValuesView(dataJson.data)\r\n            if(dataJson.childtable) {\r\n              setChildTable(dataJson.childtable)\r\n            }\r\n            if(dataJson.newTableRowData) {\r\n              setNewTableRowData(dataJson.newTableRowData)\r\n            }\r\n            if(dataJson.ApprovalNodes) {\r\n              setApprovalNodes(dataJson.ApprovalNodes)\r\n            }\r\n            if(dataJson.print && isMobileData==false) {\r\n              setPrint(dataJson.print)\r\n            }\r\n          }\r\n        })\r\n        .catch(() => {\r\n          console.log(\"axios.get editUrl return\")\r\n        })\r\n    }\r\n  }, [id, editViewCounter, isMobileData])\r\n  \r\n  //Need refresh data every time.\r\n\r\n  const handleClose = () => {\r\n    toggleViewTableDrawer()\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      {model && model == \"测评模式\" && (\r\n        <Fragment>\r\n          <SoulAssessmentModel modelOriginal={model} dataOriginal={defaultValuesView} id={id} backEndApi={backEndApi}/>\r\n        </Fragment>\r\n      )}\r\n      {model == \"\" && (\r\n        <Fragment>\r\n          <Box sx={{ mb: 8, textAlign: 'center' }}>\r\n            <Typography variant='h5' sx={{ mb: 3 }}>\r\n              {titletext}\r\n            </Typography>\r\n            <Typography variant='body2'>{store.view_default.titlememo ? store.view_default.titlememo : ''}</Typography>\r\n          </Box>\r\n          <Card key={\"AllFieldsMode\"}>\r\n            <CardContent sx={{ px: { xs: 8, sm: 12 } }}>\r\n              <Grid container spacing={6} sx={{pt: '10px'}}>\r\n                <Table>\r\n                  <TableBody>\r\n                    {newTableRowData && newTableRowData.length>0 && newTableRowData.map((RowData: any, RowData_index: number) => {\r\n                      \r\n                      const colSpan = RowData.length == 2 ? 1 : 3 ;\r\n                      \r\n                      return (\r\n                        <TableRow key={RowData_index}>\r\n                          {RowData && RowData.map((CellData: any, FieldArray_index: number) => {\r\n                            const FieldArray = CellData.FieldArray\r\n                            \r\n                            //开始根据表单中每个字段的类型,进行不同的渲染,此部分比较复杂,注意代码改动.\r\n                            if (FieldArray.type == \"input\"\r\n                              || FieldArray.type == \"email\"\r\n                              || FieldArray.type == \"number\"\r\n                              || FieldArray.type == \"date\"\r\n                              || FieldArray.type == \"month\"\r\n                              || FieldArray.type == \"time\"\r\n                              || FieldArray.type == \"datetime\"\r\n                              || FieldArray.type == \"slider\"\r\n                              || FieldArray.type == \"readonly\"\r\n                              || FieldArray.type == \"autoincrement\"\r\n                              || FieldArray.type == \"autoincrementdate\"\r\n                            ) {\r\n                              if (CellData.Value == \"1971-01-01\" || CellData.Value == \"1971-01-01 00:00:00\" || CellData.Value == \"1971-01\") {\r\n                                CellData.Value = \"\";\r\n                              }\r\n                              \r\n                              return (\r\n                                <Fragment key={FieldArray_index}>\r\n                                  <MUITableCell sx={{ width: '15%', whiteSpace: 'nowrap' }}>{FieldArray.label}:</MUITableCell>\r\n                                  <MUITableCell sx={{ width: '35%' }} colSpan={colSpan}>{CellData.Value}</MUITableCell>\r\n                                </Fragment>\r\n                              )\r\n                            }//end if\r\n                            else if (FieldArray.type == \"password\" || FieldArray.type == \"EncryptField\" || FieldArray.type == \"comfirmpassword\") {\r\n                              // Nothing to do   \r\n                              return (\r\n                                <Fragment key={FieldArray_index}>\r\n                                  <MUITableCell sx={{ width: '15%', whiteSpace: 'nowrap' }}>{FieldArray.label}:</MUITableCell>\r\n                                  <MUITableCell sx={{ width: '35%', whiteSpace: 'wrap', wordWrap: 'break-word' }}>******</MUITableCell>\r\n                                </Fragment>\r\n                              )            \r\n                            }\r\n                            else if (FieldArray.type == \"select\" || FieldArray.type == \"autocomplete\" || FieldArray.type == \"radiogroup\") {\r\n                              \r\n                              return (\r\n                                <Fragment key={FieldArray_index}>\r\n                                  <MUITableCell sx={{ width: '15%', whiteSpace: 'nowrap' }}>{FieldArray.label}:</MUITableCell>\r\n                                  <MUITableCell sx={{ width: '35%' }} colSpan={colSpan}>{CellData.Value}</MUITableCell>\r\n                                </Fragment>\r\n                              )\r\n                            }\r\n                            else if (FieldArray.type == \"autocompletemulti\") {\r\n                              \r\n                              return (\r\n                                <Fragment key={FieldArray_index}>\r\n                                  <MUITableCell sx={{ width: '15%', whiteSpace: 'nowrap' }}>{FieldArray.label}:</MUITableCell>\r\n                                  <MUITableCell sx={{ width: '35%' }} colSpan={colSpan}>{CellData.Value}</MUITableCell>\r\n                                </Fragment>\r\n                              )\r\n                            }\r\n                            else if (FieldArray.type == \"checkbox\") {\r\n                              \r\n                              return (\r\n                                <Fragment key={FieldArray_index}>\r\n                                  <MUITableCell sx={{ width: '15%', whiteSpace: 'nowrap' }}>{FieldArray.label}:</MUITableCell>\r\n                                  <MUITableCell sx={{ width: '35%' }} colSpan={colSpan}>{CellData.Value}</MUITableCell>\r\n                                </Fragment>\r\n                              )\r\n                            }\r\n                            else if (FieldArray.type == \"textarea\") {\r\n                              \r\n                              return (\r\n                                <Fragment key={FieldArray_index}>\r\n                                  <MUITableCell sx={{ width: '15%', whiteSpace: 'nowrap', mt: 1 }}>{FieldArray.label}:</MUITableCell>\r\n                                  <MUITableCell sx={{ width: '35%', whiteSpace: 'pre-line', mt: 1 }} colSpan={colSpan}>{CellData.Value}</MUITableCell>\r\n                                </Fragment>\r\n                              )\r\n                            }\r\n                            else if (FieldArray.type == \"avatar\" && CellData.Value != undefined) {\r\n                              \r\n                              return (\r\n                                <Fragment key={FieldArray_index}>\r\n                                  <MUITableCell sx={{ width: '15%', whiteSpace: 'nowrap' }}>{FieldArray.label}:</MUITableCell>\r\n                                  <MUITableCell sx={{ width: '35%' }} colSpan={colSpan}>\r\n                                  <Box sx={{ display: 'flex', alignItems: 'center',cursor: 'pointer',':hover': {cursor: 'pointer',}, }} onClick={() => toggleImagesPreviewListDrawer([authConfig.backEndApiHost+CellData.Value], ['image'])}>\r\n                                    <ImgStyled src={authConfig.backEndApiHost+CellData.Value} alt={FieldArray.helptext} />\r\n                                  </Box>\r\n                                  </MUITableCell>\r\n                                </Fragment>\r\n                              )\r\n                            }\r\n                            else if ((FieldArray.type == \"images\" || FieldArray.type == \"images2\") && CellData.Value != undefined) {\r\n                              \r\n                              return (\r\n                                <Fragment key={FieldArray_index}>\r\n                                  <MUITableCell sx={{ width: '50%' }} colSpan={colSpan+1}>\r\n                                    {FieldArray.label}:\r\n                                    <div style={{ display: 'flex', flexWrap: 'wrap' }}>\r\n                                    {CellData.Value && CellData.Value.length>0 && CellData.Value.map((FileUrl: any, index: number)=>{\r\n                                      return (\r\n                                        <div key={index} style={{ flex: '0 0 auto'}}>\r\n                                          <ListItem style={{ padding: '2px' }}>\r\n                                              <div className='file-details' style={{ display: 'flex', overflow: 'hidden' }}>\r\n                                              <Box sx={{ display: 'flex', alignItems: 'center', cursor: 'pointer', ':hover': { cursor: 'pointer' } }} onClick={() => toggleImagesPreviewListDrawer([authConfig.backEndApiHost + FileUrl['webkitRelativePath']], ['image'])}>\r\n                                                  <ImgStyled68 src={authConfig.backEndApiHost + FileUrl['webkitRelativePath']} />\r\n                                              </Box>\r\n                                              </div>\r\n                                          </ListItem>\r\n                                        </div>\r\n                                      )\r\n                                    })}\r\n                                    </div>                               \r\n                                  </MUITableCell>\r\n                                </Fragment>\r\n                              )\r\n                            }\r\n                            else if ((FieldArray.type == \"files\" || FieldArray.type == \"files2\") && CellData.Value != undefined) {\r\n                              \r\n                              return (\r\n                                <Fragment key={FieldArray_index}>\r\n                                  <MUITableCell sx={{ width: '50%' }} colSpan={colSpan+1}>\r\n                                    {FieldArray.label}:\r\n                                    <div style={{ display: 'flex', flexWrap: 'wrap' }}>\r\n                                    {CellData.Value && CellData.Value.length>0 && CellData.Value.map((FileUrl: any)=>{\r\n                                      \r\n                                      return (\r\n                                        <ListItem key={FileUrl['name']} style={{padding: \"3px\"}}>\r\n                                        <div className='file-details' style={{display: \"flex\"}}>\r\n                                          <div style={{padding: \"3px 3px 0 0\"}}>\r\n                                            {FileUrl.type.startsWith('image') ? \r\n                                            <Box sx={{ display: 'flex', alignItems: 'center',cursor: 'pointer',':hover': {cursor: 'pointer',}, }} onClick={() => toggleImagesPreviewListDrawer([authConfig.backEndApiHost+FileUrl['webkitRelativePath']], ['image'])}>\r\n                                              <ImgStyled68 src={authConfig.backEndApiHost+FileUrl['webkitRelativePath']} />\r\n                                            </Box>\r\n                                            : <Icon icon='mdi:file-document-outline' fontSize={28}/> \r\n                                            }\r\n                                          </div>\r\n                                          <div>\r\n                                            {FileUrl['type']==\"pdf\" || FileUrl['type']==\"Excel\" || FileUrl['type']==\"Word\" || FileUrl['type']==\"PowerPoint\" ? \r\n                                              <Typography className='file-name'><CustomLink href={authConfig.backEndApiHost+FileUrl['webkitRelativePath']} download={FileUrl['name']}>{FileUrl['name']}</CustomLink></Typography>\r\n                                            :\r\n                                              ''\r\n                                            }      \r\n                                            {FileUrl['type']==\"file\" ? \r\n                                              <Typography className='file-name'><CustomLink href={authConfig.backEndApiHost+FileUrl['webkitRelativePath']} download={FileUrl['name']}>{FileUrl['name']}</CustomLink></Typography>\r\n                                            :\r\n                                              ''\r\n                                            }              \r\n                                            {FileUrl['size']>0 ? \r\n                                              <Typography className='file-size' variant='body2'>\r\n                                                  {Math.round(FileUrl['size'] / 100) / 10 > 1000\r\n                                                  ? `${(Math.round(FileUrl['size'] / 100) / 10000).toFixed(1)} mb`\r\n                                                  : `${(Math.round(FileUrl['size'] / 100) / 10).toFixed(1)} kb`}\r\n                                              </Typography>\r\n                                              : ''\r\n                                            }                                  \r\n                                          </div>\r\n                                        </div>\r\n                                        </ListItem>\r\n                                        )\r\n                                    })}  \r\n                                    </div>                              \r\n                                  </MUITableCell>\r\n                                </Fragment>\r\n                              )\r\n                            }\r\n                            else if (FieldArray.type == \"editor\") {\r\n                              \r\n                              return (\r\n                                <Fragment key={FieldArray_index}>\r\n                                  <MUITableCell sx={{ width: '15%', whiteSpace: 'nowrap' }}>{FieldArray.label}:</MUITableCell>\r\n                                  <MUITableCell sx={{ width: '35%' }} colSpan={colSpan}><div dangerouslySetInnerHTML={{ __html: CellData.Value }} /></MUITableCell>\r\n                                </Fragment>\r\n                              )\r\n                            }    \r\n                            else if (FieldArray.type == \"tablefiltercolor\" ||\r\n                                    FieldArray.type == \"tablefilter\" ||\r\n                                    FieldArray.type == \"radiogroup\" ||\r\n                                    FieldArray.type == \"radiogroupcolor\"\r\n                                    ) {\r\n                              \r\n                              return (\r\n                                <Fragment key={FieldArray_index}>\r\n                                  <MUITableCell sx={{ width: '15%', whiteSpace: 'nowrap' }}>{FieldArray.label}:</MUITableCell>\r\n                                  <MUITableCell sx={{ width: '35%' }} colSpan={colSpan}>{CellData.Value}</MUITableCell>\r\n                                </Fragment>\r\n                              )\r\n                            }                      \r\n                            else {\r\n                              \r\n                              return (\r\n                                <Fragment key={FieldArray_index}>\r\n                                  <MUITableCell sx={{ width: '15%', whiteSpace: 'nowrap' }}>{FieldArray.label}:</MUITableCell>\r\n                                  <MUITableCell sx={{ width: '35%' }} colSpan={colSpan}>\r\n                                    {CellData && CellData.Value && typeof CellData.Value === 'string' ? CellData.Value : FieldArray.type + \" \" + (CellData && CellData.Value ? CellData.Value.toString() : '')}\r\n                                  </MUITableCell>\r\n                                </Fragment>\r\n                              )\r\n                            }\r\n                            \r\n                          })}\r\n                        </TableRow>\r\n                      )\r\n\r\n                    })}\r\n\r\n                  </TableBody>\r\n                </Table>\r\n\r\n                {approvalNodes && approvalNodes.Nodes && approvalNodes.Nodes.length>0 && approvalNodes.Fields ?\r\n                  <Fragment>\r\n                  <Divider />\r\n                    <Table>\r\n                      <TableHead>\r\n                        <TableRow key=\"ChildTableTableRow\">\r\n                          {approvalNodes.Fields && approvalNodes.Fields.map((Item: any, ItemIndex: number) => {\r\n                            \r\n                            return <MUITableCell sx={{ width: '20%', whiteSpace: 'nowrap' }} key={ItemIndex}>{Item}</MUITableCell>\r\n                          })}\r\n                        </TableRow>\r\n                      </TableHead>\r\n                      <TableBody>\r\n                        {approvalNodes.Nodes && approvalNodes.Nodes.map((Node: string, NodeIndex: number) => {\r\n                          const FieldTemp = `${Node}${approvalNodes.Fields[1]}`\r\n                          \r\n                          return (\r\n                            <Fragment key={NodeIndex}>\r\n                              {FieldTemp in defaultValuesView ?\r\n                                <TableRow>\r\n                                  {approvalNodes.Fields && approvalNodes.Fields.map((Item: any, ItemIndex: number) => {\r\n                                    const FieldTemp = `${Node}${Item}`\r\n\r\n                                    return <MUITableCell key={ItemIndex}>{Item==\"审核结点\" ? Node : defaultValuesView[FieldTemp]}</MUITableCell>\r\n                                  })}\r\n                                </TableRow>\r\n                                : '' }\r\n                            </Fragment>\r\n                          )\r\n                        })}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </Fragment>\r\n                  : ''\r\n                }\r\n                \r\n                {childTable && childTable.allFields && childTable.data ?\r\n                  <Fragment>\r\n                  <Divider />\r\n                    <Table>\r\n                      <TableHead>\r\n                        <TableRow key=\"ChildTableTableRow\">\r\n                          {childTable.allFields && childTable.allFields.Default.map((Item: any, Index: number) => {\r\n                            \r\n                            return <MUITableCell key={Index}>{Item.code? Item.code : Item.name}</MUITableCell>\r\n                          })}\r\n                        </TableRow>\r\n                      </TableHead>\r\n                      <TableBody>\r\n                        {childTable.data && childTable.data.map((RowItem: any, RowIndex: number) => {\r\n                          \r\n                          return (\r\n                            <TableRow key={RowIndex}>\r\n                              {childTable.allFields && childTable.allFields.Default.map((Item: any, Index: number) => {\r\n                                \r\n                                return <MUITableCell key={Index}>{Item.type==\"autocomplete\" ? RowItem[Item.code? Item.code : Item.name] : RowItem[Item.name]}</MUITableCell>\r\n                              })}\r\n                            </TableRow>\r\n                          )\r\n                        })}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </Fragment>\r\n                  : ''\r\n                }\r\n\r\n                {print && print.text ?\r\n                  <Grid container justifyContent=\"flex-end\">\r\n                      <Button onClick={()=>{window.print();}}  variant='contained' size=\"small\">{print.text}</Button>\r\n                  </Grid>\r\n                  : ''\r\n                }    \r\n\r\n              </Grid>\r\n            </CardContent>\r\n          </Card>\r\n        </Fragment>\r\n      )}\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default ViewTableCore\r\n","D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\pages\\auth\\FooterIllustrationsV2.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\pages\\dialog-examples\\create-app-tabs\\DialogTabBilling.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\pages\\dialog-examples\\create-app-tabs\\DialogTabDatabase.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\pages\\dialog-examples\\create-app-tabs\\DialogTabDetails.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\pages\\dialog-examples\\create-app-tabs\\DialogTabFramework.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\pages\\dialog-examples\\DialogAddAddress.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\pages\\dialog-examples\\DialogAddCard.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\pages\\dialog-examples\\DialogAuthentication.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\pages\\dialog-examples\\DialogCreateApp.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\pages\\dialog-examples\\DialogEditUserInfo.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\pages\\dialog-examples\\DialogReferEarn.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\pages\\dialog-examples\\DialogShareProject.tsx",[],[],"D:\\MYXINLI\\SchoolMentalHealth\\src\\views\\pages\\misc\\FooterIllustrations.tsx",[],[],{"ruleId":"3400","severity":1,"message":"3401","line":38,"column":5,"nodeType":"3402","endLine":38,"endColumn":19,"suggestions":"3403","suppressions":"3404"},{"ruleId":"3400","severity":1,"message":"3405","line":29,"column":6,"nodeType":"3402","endLine":29,"endColumn":20,"suggestions":"3406","suppressions":"3407"},{"ruleId":"3400","severity":1,"message":"3408","line":134,"column":6,"nodeType":"3402","endLine":134,"endColumn":20,"suggestions":"3409","suppressions":"3410"},{"ruleId":"3400","severity":1,"message":"3411","line":145,"column":6,"nodeType":"3402","endLine":145,"endColumn":23,"suggestions":"3412","suppressions":"3413"},{"ruleId":"3400","severity":1,"message":"3414","line":57,"column":6,"nodeType":"3402","endLine":57,"endColumn":8,"suggestions":"3415","suppressions":"3416"},{"ruleId":"3400","severity":1,"message":"3417","line":76,"column":6,"nodeType":"3402","endLine":76,"endColumn":8,"suggestions":"3418"},{"ruleId":"3400","severity":1,"message":"3419","line":123,"column":6,"nodeType":"3402","endLine":123,"endColumn":16,"suggestions":"3420"},{"ruleId":"3400","severity":1,"message":"3421","line":156,"column":6,"nodeType":"3402","endLine":156,"endColumn":21,"suggestions":"3422","suppressions":"3423"},{"ruleId":"3400","severity":1,"message":"3424","line":168,"column":6,"nodeType":"3402","endLine":168,"endColumn":30,"suggestions":"3425","suppressions":"3426"},{"ruleId":"3400","severity":1,"message":"3427","line":175,"column":6,"nodeType":"3402","endLine":175,"endColumn":16,"suggestions":"3428","suppressions":"3429"},{"ruleId":"3400","severity":1,"message":"3430","line":35,"column":6,"nodeType":"3402","endLine":35,"endColumn":14,"suggestions":"3431","suppressions":"3432"},{"ruleId":"3400","severity":1,"message":"3405","line":97,"column":6,"nodeType":"3402","endLine":97,"endColumn":8,"suggestions":"3433","suppressions":"3434"},{"ruleId":"3435","severity":2,"message":"3436","line":26,"column":3,"nodeType":"3437","messageId":"3438","endLine":26,"endColumn":23,"fix":"3439","suppressions":"3440"},{"ruleId":"3435","severity":2,"message":"3436","line":37,"column":3,"nodeType":"3437","messageId":"3438","endLine":37,"endColumn":23,"fix":"3441","suppressions":"3442"},{"ruleId":"3435","severity":2,"message":"3436","line":45,"column":3,"nodeType":"3437","messageId":"3438","endLine":45,"endColumn":37,"fix":"3443","suppressions":"3444"},{"ruleId":"3400","severity":1,"message":"3445","line":62,"column":6,"nodeType":"3402","endLine":62,"endColumn":8,"suggestions":"3446"},{"ruleId":"3400","severity":1,"message":"3419","line":73,"column":6,"nodeType":"3402","endLine":73,"endColumn":40,"suggestions":"3447"},{"ruleId":"3400","severity":1,"message":"3419","line":73,"column":6,"nodeType":"3402","endLine":73,"endColumn":40,"suggestions":"3448"},{"ruleId":"3400","severity":1,"message":"3419","line":73,"column":6,"nodeType":"3402","endLine":73,"endColumn":40,"suggestions":"3449"},{"ruleId":"3400","severity":1,"message":"3419","line":73,"column":6,"nodeType":"3402","endLine":73,"endColumn":40,"suggestions":"3450"},{"ruleId":"3400","severity":1,"message":"3419","line":73,"column":6,"nodeType":"3402","endLine":73,"endColumn":40,"suggestions":"3451"},{"ruleId":"3400","severity":1,"message":"3419","line":73,"column":6,"nodeType":"3402","endLine":73,"endColumn":40,"suggestions":"3452"},{"ruleId":"3400","severity":1,"message":"3453","line":80,"column":6,"nodeType":"3402","endLine":80,"endColumn":40,"suggestions":"3454"},{"ruleId":"3400","severity":1,"message":"3453","line":81,"column":6,"nodeType":"3402","endLine":81,"endColumn":40,"suggestions":"3455"},{"ruleId":"3400","severity":1,"message":"3401","line":35,"column":6,"nodeType":"3402","endLine":35,"endColumn":8,"suggestions":"3456","suppressions":"3457"},{"ruleId":"3400","severity":1,"message":"3405","line":14,"column":6,"nodeType":"3402","endLine":14,"endColumn":11,"suggestions":"3458"},{"ruleId":"3400","severity":1,"message":"3459","line":63,"column":6,"nodeType":"3402","endLine":63,"endColumn":11,"suggestions":"3460"},{"ruleId":"3400","severity":1,"message":"3461","line":52,"column":6,"nodeType":"3402","endLine":52,"endColumn":8,"suggestions":"3462"},{"ruleId":"3400","severity":1,"message":"3463","line":153,"column":6,"nodeType":"3402","endLine":153,"endColumn":11,"suggestions":"3464"},{"ruleId":"3400","severity":1,"message":"3465","line":419,"column":8,"nodeType":"3402","endLine":419,"endColumn":60,"suggestions":"3466"},{"ruleId":"3400","severity":1,"message":"3467","line":925,"column":8,"nodeType":"3402","endLine":925,"endColumn":26,"suggestions":"3468"},{"ruleId":"3400","severity":1,"message":"3469","line":1082,"column":8,"nodeType":"3402","endLine":1082,"endColumn":23,"suggestions":"3470"},{"ruleId":"3471","severity":1,"message":"3472","line":181,"column":31,"nodeType":"3473","endLine":181,"endColumn":95},{"ruleId":"3471","severity":1,"message":"3472","line":204,"column":31,"nodeType":"3473","endLine":204,"endColumn":95},{"ruleId":"3400","severity":1,"message":"3474","line":340,"column":6,"nodeType":"3402","endLine":340,"endColumn":164,"suggestions":"3475"},{"ruleId":"3400","severity":1,"message":"3476","line":441,"column":6,"nodeType":"3402","endLine":441,"endColumn":8,"suggestions":"3477"},{"ruleId":"3400","severity":1,"message":"3419","line":56,"column":6,"nodeType":"3402","endLine":56,"endColumn":22,"suggestions":"3478"},{"ruleId":"3400","severity":1,"message":"3479","line":47,"column":6,"nodeType":"3402","endLine":47,"endColumn":10,"suggestions":"3480"},{"ruleId":"3400","severity":1,"message":"3481","line":49,"column":9,"nodeType":"3482","endLine":49,"endColumn":133},{"ruleId":"3400","severity":1,"message":"3483","line":51,"column":9,"nodeType":"3482","endLine":108,"endColumn":4},{"ruleId":"3400","severity":1,"message":"3484","line":116,"column":6,"nodeType":"3402","endLine":116,"endColumn":24,"suggestions":"3485"},{"ruleId":"3400","severity":1,"message":"3481","line":49,"column":9,"nodeType":"3482","endLine":49,"endColumn":133},{"ruleId":"3400","severity":1,"message":"3483","line":51,"column":9,"nodeType":"3482","endLine":108,"endColumn":4},{"ruleId":"3400","severity":1,"message":"3484","line":116,"column":6,"nodeType":"3402","endLine":116,"endColumn":24,"suggestions":"3486"},{"ruleId":"3400","severity":1,"message":"3481","line":49,"column":9,"nodeType":"3482","endLine":49,"endColumn":133},{"ruleId":"3400","severity":1,"message":"3483","line":51,"column":9,"nodeType":"3482","endLine":108,"endColumn":4},{"ruleId":"3400","severity":1,"message":"3484","line":116,"column":6,"nodeType":"3402","endLine":116,"endColumn":24,"suggestions":"3487"},{"ruleId":"3400","severity":1,"message":"3488","line":163,"column":6,"nodeType":"3402","endLine":163,"endColumn":41,"suggestions":"3489"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'auth.user' and 'router'. Either include them or remove the dependency array.","ArrayExpression",["3490"],["3491"],"React Hook useEffect has a missing dependency: 'router'. Either include it or remove the dependency array.",["3492"],["3493"],"React Hook useEffect has a missing dependency: 'settings'. Either include it or remove the dependency array. You can also do a functional update 'setSettings(s => ...)' if you only need 'settings' in the 'setSettings' call.",["3494"],["3495"],"React Hook useEffect has a missing dependency: 'settings'. Either include it or remove the dependency array.",["3496"],["3497"],"React Hook useCallback has a missing dependency: 'clipboardCopy'. Either include it or remove the dependency array.",["3498"],["3499"],"React Hook useEffect has missing dependencies: 'refresh' and 'user'. Either include them or remove the dependency array.",["3500"],"React Hook useEffect has a missing dependency: 'storedToken'. Either include it or remove the dependency array.",["3501"],"React Hook useEffect has missing dependencies: 'currentURL', 'groupActive', 'item', 'navCollapsed', 'navHover', 'setCurrentActiveGroup', and 'setGroupActive'. Either include them or remove the dependency array.",["3502"],["3503"],"React Hook useEffect has missing dependencies: 'currentActiveGroup', 'groupActive.length', and 'setGroupActive'. Either include them or remove the dependency array.",["3504"],["3505"],"React Hook useEffect has missing dependencies: 'groupActive.length', 'navCollapsed', and 'setGroupActive'. Either include them or remove the dependency array.",["3506"],["3507"],"React Hook useEffect has missing dependencies: 'saveSettings' and 'settings'. Either include them or remove the dependency array.",["3508"],["3509"],["3510"],["3511"],"lines-around-comment","Expected line before comment.","Line","before",{"range":"3512","text":"3513"},["3514"],{"range":"3515","text":"3513"},["3516"],{"range":"3517","text":"3513"},["3518"],"React Hook useEffect has missing dependencies: 'backEndApi' and 'router'. Either include them or remove the dependency array.",["3519"],["3520"],["3521"],["3522"],["3523"],["3524"],["3525"],"React Hook useEffect has missing dependencies: 'router' and 'storedToken'. Either include them or remove the dependency array.",["3526"],["3527"],["3528"],["3529"],["3530"],"React Hook useEffect has a missing dependency: 'activeTab'. Either include it or remove the dependency array.",["3531"],"React Hook useEffect has missing dependencies: 'auth' and 'getAppsPage'. Either include them or remove the dependency array.",["3532"],"React Hook useEffect has missing dependencies: 'getAppsPage' and 'pageid'. Either include them or remove the dependency array. You can also do a functional update 'setPageid(p => ...)' if you only need 'pageid' in the 'setPageid' call.",["3533"],"React Hook useEffect has missing dependencies: 'CSRF_TOKEN', 'action', 'addEditStructInfo2.allFields', 'addEditStructInfo2.allFieldsMode', 'addEditStructInfo2.defaultValues', 'allEditorValues', 'allFields', 'backEndApi', 'externalId', and 'storedToken'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setDefaultValuesNew' needs the current value of 'addEditStructInfo2.defaultValues'.",["3534"],"React Hook useEffect has a missing dependency: 'isIndeterminateCheckbox'. Either include it or remove the dependency array.",["3535"],"React Hook useEffect has a missing dependency: 'allFields'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setSingleModelCounter' needs the current value of 'allFields'.",["3536"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has missing dependencies: 'allRows', 'fetchData', 'isMobileData', 'mobileEditPageId', and 'mobileEditPageIdEnable'. Either include them or remove the dependency array.",["3537"],"React Hook useCallback has missing dependencies: 'backEndApi', 'externalId', and 'storedToken'. Either include them or remove the dependency array.",["3538"],["3539"],"React Hook useEffect has missing dependencies: 'backEndApi', 'data', and 'model'. Either include them or remove the dependency array.",["3540"],"The 'series' conditional could make the dependencies of useEffect Hook (at line 127) change on every render. To fix this, wrap the initialization of 'series' in its own useMemo() Hook.","VariableDeclarator","The 'options' object makes the dependencies of useEffect Hook (at line 127) change on every render. To fix this, wrap the initialization of 'options' in its own useMemo() Hook.","React Hook useEffect has a missing dependency: 'printModel'. Either include it or remove the dependency array.",["3541"],["3542"],["3543"],"React Hook useEffect has missing dependencies: 'CSRF_TOKEN', 'action', 'backEndApi', and 'storedToken'. Either include them or remove the dependency array.",["3544"],{"desc":"3545","fix":"3546"},{"kind":"3547","justification":"3548"},{"desc":"3549","fix":"3550"},{"kind":"3547","justification":"3548"},{"desc":"3551","fix":"3552"},{"kind":"3547","justification":"3548"},{"desc":"3553","fix":"3554"},{"kind":"3547","justification":"3548"},{"desc":"3555","fix":"3556"},{"kind":"3547","justification":"3548"},{"desc":"3557","fix":"3558"},{"desc":"3559","fix":"3560"},{"desc":"3561","fix":"3562"},{"kind":"3547","justification":"3548"},{"desc":"3563","fix":"3564"},{"kind":"3547","justification":"3548"},{"desc":"3565","fix":"3566"},{"kind":"3547","justification":"3548"},{"desc":"3567","fix":"3568"},{"kind":"3547","justification":"3548"},{"desc":"3569","fix":"3570"},{"kind":"3547","justification":"3548"},[901,901],"\n",{"kind":"3547","justification":"3548"},[1137,1137],{"kind":"3547","justification":"3548"},[1310,1310],{"kind":"3547","justification":"3548"},{"desc":"3571","fix":"3572"},{"desc":"3573","fix":"3574"},{"desc":"3573","fix":"3575"},{"desc":"3573","fix":"3576"},{"desc":"3573","fix":"3577"},{"desc":"3573","fix":"3578"},{"desc":"3573","fix":"3579"},{"desc":"3580","fix":"3581"},{"desc":"3580","fix":"3582"},{"desc":"3583","fix":"3584"},{"kind":"3547","justification":"3548"},{"desc":"3585","fix":"3586"},{"desc":"3587","fix":"3588"},{"desc":"3589","fix":"3590"},{"desc":"3591","fix":"3592"},{"desc":"3593","fix":"3594"},{"desc":"3595","fix":"3596"},{"desc":"3597","fix":"3598"},{"desc":"3599","fix":"3600"},{"desc":"3601","fix":"3602"},{"desc":"3603","fix":"3604"},{"desc":"3605","fix":"3606"},{"desc":"3607","fix":"3608"},{"desc":"3607","fix":"3609"},{"desc":"3607","fix":"3610"},{"desc":"3611","fix":"3612"},"Update the dependencies array to be: [auth.user, router, router.route]",{"range":"3613","text":"3614"},"directive","","Update the dependencies array to be: [router, router.route]",{"range":"3615","text":"3616"},"Update the dependencies array to be: [pageSettings, settings]",{"range":"3617","text":"3618"},"Update the dependencies array to be: [settings, settings.layout]",{"range":"3619","text":"3620"},"Update the dependencies array to be: [clipboardCopy]",{"range":"3621","text":"3622"},"Update the dependencies array to be: [refresh, user]",{"range":"3623","text":"3624"},"Update the dependencies array to be: [isLogout, storedToken]",{"range":"3625","text":"3626"},"Update the dependencies array to be: [currentURL, groupActive, item, navCollapsed, navHover, router.asPath, setCurrentActiveGroup, setGroupActive]",{"range":"3627","text":"3628"},"Update the dependencies array to be: [currentActiveGroup, groupActive.length, navCollapsed, navHover, setGroupActive]",{"range":"3629","text":"3630"},"Update the dependencies array to be: [groupActive.length, navCollapsed, navHover, setGroupActive]",{"range":"3631","text":"3632"},"Update the dependencies array to be: [hidden, saveSettings, settings]",{"range":"3633","text":"3634"},"Update the dependencies array to be: [router]",{"range":"3635","text":"3636"},"Update the dependencies array to be: [backEndApi, router]",{"range":"3637","text":"3638"},"Update the dependencies array to be: [className, auth, optionsMenuItem, storedToken]",{"range":"3639","text":"3640"},{"range":"3641","text":"3640"},{"range":"3642","text":"3640"},{"range":"3643","text":"3640"},{"range":"3644","text":"3640"},{"range":"3645","text":"3640"},"Update the dependencies array to be: [className, auth, optionsMenuItem, storedToken, router]",{"range":"3646","text":"3647"},{"range":"3648","text":"3647"},"Update the dependencies array to be: [auth.user, router]",{"range":"3649","text":"3650"},"Update the dependencies array to be: [router, tab]",{"range":"3651","text":"3652"},"Update the dependencies array to be: [activeTab, tab]",{"range":"3653","text":"3654"},"Update the dependencies array to be: [auth, getAppsPage]",{"range":"3655","text":"3656"},"Update the dependencies array to be: [app, getAppsPage, pageid]",{"range":"3657","text":"3658"},"Update the dependencies array to be: [id, editViewCounter, IsGetStructureFromEditDefault, action, externalId, backEndApi, storedToken, CSRF_TOKEN, allEditorValues, addEditStructInfo2.allFieldsMode, addEditStructInfo2.allFields, addEditStructInfo2.defaultValues, allFields]",{"range":"3659","text":"3660"},"Update the dependencies array to be: [isIndeterminateCheckbox, selectedCheckbox]",{"range":"3661","text":"3662"},"Update the dependencies array to be: [allFields, allFieldsMode]",{"range":"3663","text":"3664"},"Update the dependencies array to be: [dispatch, searchFieldName, searchFieldValue, allSubmitFields, page, pageSize, pageCount, sortMethod, sortColumn, forceUpdate, filterMultiColumns, externalId, fetchData, mobileEditPageId, mobileEditPageIdEnable, isMobileData, allRows]",{"range":"3665","text":"3666"},"Update the dependencies array to be: [backEndApi, externalId, storedToken]",{"range":"3667","text":"3668"},"Update the dependencies array to be: [storedToken, textFieldValue]",{"range":"3669","text":"3670"},"Update the dependencies array to be: [backEndApi, data, id, model]",{"range":"3671","text":"3672"},"Update the dependencies array to be: [id, data, series, printModel]",{"range":"3673","text":"3674"},{"range":"3675","text":"3674"},{"range":"3676","text":"3674"},"Update the dependencies array to be: [id, editViewCounter, isMobileData, action, backEndApi, storedToken, CSRF_TOKEN]",{"range":"3677","text":"3678"},[918,932],"[auth.user, router, router.route]",[675,689],"[router, router.route]",[3963,3977],"[pageSettings, settings]",[4346,4363],"[settings, settings.layout]",[1613,1615],"[clipboardCopy]",[1931,1933],"[refresh, user]",[2969,2979],"[isLogout, storedToken]",[4976,4991],"[currentURL, groupActive, item, navCollapsed, navHover, router.asPath, setCurrentActiveGroup, setGroupActive]",[5298,5322],"[currentActiveGroup, groupActive.length, navCollapsed, navHover, setGroupActive]",[5501,5511],"[groupActive.length, navCollapsed, navHover, setGroupActive]",[1015,1023],"[hidden, saveSettings, settings]",[3045,3047],"[router]",[2010,2012],"[backEndApi, router]",[2812,2846],"[className, auth, optionsMenuItem, storedToken]",[2812,2846],[2812,2846],[2802,2836],[2808,2842],[2822,2856],[3279,3313],"[className, auth, optionsMenuItem, storedToken, router]",[3271,3305],[848,850],"[auth.user, router]",[380,385],"[router, tab]",[1931,1936],"[activeTab, tab]",[2053,2055],"[auth, getAppsPage]",[4697,4702],"[app, getAppsPage, pageid]",[22310,22362],"[id, editViewCounter, IsGetStructureFromEditDefault, action, externalId, backEndApi, storedToken, CSRF_TOKEN, allEditorValues, addEditStructInfo2.allFieldsMode, addEditStructInfo2.allFields, addEditStructInfo2.defaultValues, allFields]",[48213,48231],"[isIndeterminateCheckbox, selectedCheckbox]",[54122,54137],"[allFields, allFieldsMode]",[12437,12595],"[dispatch, searchFieldName, searchFieldValue, allSubmitFields, page, pageSize, pageCount, sortMethod, sortColumn, forceUpdate, filterMultiColumns, externalId, fetchData, mobileEditPageId, mobileEditPageIdEnable, isMobileData, allRows]",[15985,15987],"[backEndApi, externalId, storedToken]",[1962,1978],"[storedToken, textFieldValue]",[1649,1653],"[backEndApi, data, id, model]",[3425,3443],"[id, data, series, printModel]",[3423,3441],[3423,3441],[5469,5504],"[id, editViewCounter, isMobileData, action, backEndApi, storedToken, CSRF_TOKEN]"]